//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Language.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class LanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, WS=2, IF=3, ELSE=4, SWITCH=5, CASE=6, DEFAULT=7, AND=8, OR=9, 
		NOT=10, TRUE=11, FALSE=12, NULL=13, MARKER=14, ISNULL=15, SUM_IF=16, COUNT_IF=17, 
		ABS=18, SQRT=19, SUM=20, MAX=21, MIN=22, AVERAGE=23, LENGTH=24, COALESCE=25, 
		CARACTERISTICA_TABELA=26, ATIVIDADE_TABELA=27, CARACTERISTICA=28, PARAMETRO=29, 
		PARAMETRO_CODIGO=30, PARAMETRO_INTERVALO=31, ROUND=32, TODAY=33, NOW=34, 
		DATE_DIF=35, GET_MONTH=36, GET_DAY=37, GET_YEAR=38, LOOKUP_FUNC=39, BASE_FUNC=40, 
		TOTAL_PAYMENTS=41, TOTAL_DISCOUNTS=42, DIRECT_RECALCULATION=43, PROPORTIONAL_RECALCULATION=44, 
		CLEAR_VALUES_FUNCTION=45, CLEAR_DISCOUNTS_FUNCTION=46, CLEAR_PAYMENTS_FUNCTION=47, 
		ADD_DAY=48, ADD_MONTH=49, ADD_YEAR=50, GET_DAY_DIFF=51, GET_MONTH_DIFF=52, 
		GET_YEAR_DIFF=53, GET_DATE=54, LAST_DAY_PROCESS=55, DESPREZAR=56, WHILE=57, 
		LBRACKET=58, RBRACKET=59, LBRACE=60, RBRACE=61, LPAREN=62, RPAREN=63, 
		MULT=64, DIV=65, PLUS=66, MINUS=67, POW=68, GT=69, GE=70, LT=71, LE=72, 
		EQ=73, NEQ=74, YEAR=75, MONTH=76, DAY=77, ATRIB=78, PLUS_ASSIGNMENT=79, 
		MINUS_ASSIGNMENT=80, MULT_ASSIGNMENT=81, DIV_ASSIGNMENT=82, VAR=83, LISTA=84, 
		RETURN=85, COMMA=86, DOT=87, QUOTE=88, NUMBER=89, DECIMAL=90, DATE=91, 
		IDENTIFIER=92, TEXT=93, VAR_PRIMARY=94, SEMI=95, COLON=96;
	public const int
		RULE_rule_set = 0, RULE_rule_block = 1, RULE_variable_declaration = 2, 
		RULE_assignment = 3, RULE_return_value = 4, RULE_conditional = 5, RULE_then_block = 6, 
		RULE_else_block = 7, RULE_if_expression = 8, RULE_comparison_expression = 9, 
		RULE_comparison_operator = 10, RULE_assignment_operator = 11, RULE_loop = 12, 
		RULE_function_signature = 13, RULE_arithmetic_expression = 14, RULE_tabela_caracteristica = 15, 
		RULE_descricao_caracteristica = 16, RULE_valor_fator_caracteristica = 17, 
		RULE_codigo_caracteristica = 18, RULE_exercicio_caracteristica = 19, RULE_coluna_caracteristica = 20, 
		RULE_coluna_filtro = 21, RULE_coluna_valor_caracteristica = 22, RULE_entity = 23, 
		RULE_varMemory = 24, RULE_listMemoryGlobal = 25, RULE_listMemory = 26, 
		RULE_list = 27, RULE_text = 28, RULE_number_integer = 29, RULE_number_decimal = 30, 
		RULE_date_unit = 31;
	public static readonly string[] ruleNames = {
		"rule_set", "rule_block", "variable_declaration", "assignment", "return_value", 
		"conditional", "then_block", "else_block", "if_expression", "comparison_expression", 
		"comparison_operator", "assignment_operator", "loop", "function_signature", 
		"arithmetic_expression", "tabela_caracteristica", "descricao_caracteristica", 
		"valor_fator_caracteristica", "codigo_caracteristica", "exercicio_caracteristica", 
		"coluna_caracteristica", "coluna_filtro", "coluna_valor_caracteristica", 
		"entity", "varMemory", "listMemoryGlobal", "listMemory", "list", "text", 
		"number_integer", "number_decimal", "date_unit"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'se'", "'senao'", "'switch'", "'case'", "'default'", 
		"'&&'", "'||'", "'!'", "'true'", "'false'", "'nulo'", "'marker'", "'_NULO'", 
		"'_SOMASE'", "'_CONTSE'", "'_ABS'", "'_RAIZ'", "'_SOMA'", "'_MAXIMO'", 
		"'_MINIMO'", "'_MEDIA'", "'_CONT'", "'_COALESCE'", "'_CARACTERISTICATABELA'", 
		"'_ATIVIDADETABELA'", "'_CARACTERISTICA'", "'_PARAMETRO'", "'_PARAMETROCODIGO'", 
		"'_PARAMETROINTERVALO'", "'_ARREDONDAR'", "'_HOJE'", "'_AGORA'", "'_DATADIF'", 
		"'_MES'", "'_DIA'", "'_ANO'", "'lookupFunction'", "'baseFunction'", "'totalPayments'", 
		"'totalDiscounts'", "'directRecalculation'", "'proportionalRecalculation'", 
		"'clearValuesFunction'", "'clearDiscountsFunction'", "'clearPaymentsFunction'", 
		"'addDay'", "'addMonth'", "'addYear'", "'getDayDiff'", "'getMonthDiff'", 
		"'getYearDiff'", "'getDate'", "'lastDayProcess'", "'desprezar'", "'enquanto'", 
		"'['", "']'", "'{'", "'}'", "'('", "')'", "'*'", "'/'", "'+'", "'-'", 
		"'^'", "'>'", "'>='", "'<'", "'<='", "'=='", "'!='", "'ANO'", "'MES'", 
		"'DIA'", "'='", "'+='", "'-='", "'*='", "'/='", "'var'", "'lista'", "'retorno'", 
		"','", "'.'", "'\"'", null, null, null, null, null, null, "';'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "WS", "IF", "ELSE", "SWITCH", "CASE", "DEFAULT", "AND", 
		"OR", "NOT", "TRUE", "FALSE", "NULL", "MARKER", "ISNULL", "SUM_IF", "COUNT_IF", 
		"ABS", "SQRT", "SUM", "MAX", "MIN", "AVERAGE", "LENGTH", "COALESCE", "CARACTERISTICA_TABELA", 
		"ATIVIDADE_TABELA", "CARACTERISTICA", "PARAMETRO", "PARAMETRO_CODIGO", 
		"PARAMETRO_INTERVALO", "ROUND", "TODAY", "NOW", "DATE_DIF", "GET_MONTH", 
		"GET_DAY", "GET_YEAR", "LOOKUP_FUNC", "BASE_FUNC", "TOTAL_PAYMENTS", "TOTAL_DISCOUNTS", 
		"DIRECT_RECALCULATION", "PROPORTIONAL_RECALCULATION", "CLEAR_VALUES_FUNCTION", 
		"CLEAR_DISCOUNTS_FUNCTION", "CLEAR_PAYMENTS_FUNCTION", "ADD_DAY", "ADD_MONTH", 
		"ADD_YEAR", "GET_DAY_DIFF", "GET_MONTH_DIFF", "GET_YEAR_DIFF", "GET_DATE", 
		"LAST_DAY_PROCESS", "DESPREZAR", "WHILE", "LBRACKET", "RBRACKET", "LBRACE", 
		"RBRACE", "LPAREN", "RPAREN", "MULT", "DIV", "PLUS", "MINUS", "POW", "GT", 
		"GE", "LT", "LE", "EQ", "NEQ", "YEAR", "MONTH", "DAY", "ATRIB", "PLUS_ASSIGNMENT", 
		"MINUS_ASSIGNMENT", "MULT_ASSIGNMENT", "DIV_ASSIGNMENT", "VAR", "LISTA", 
		"RETURN", "COMMA", "DOT", "QUOTE", "NUMBER", "DECIMAL", "DATE", "IDENTIFIER", 
		"TEXT", "VAR_PRIMARY", "SEMI", "COLON"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Rule_setContext : ParserRuleContext {
		public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public Return_valueContext return_value() {
			return GetRuleContext<Return_valueContext>(0);
		}
		public Rule_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_set; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_setContext rule_set() {
		Rule_setContext _localctx = new Rule_setContext(Context, State);
		EnterRule(_localctx, 0, RULE_rule_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << ISNULL) | (1L << SUM_IF) | (1L << COUNT_IF) | (1L << ABS) | (1L << SQRT) | (1L << SUM) | (1L << MAX) | (1L << MIN) | (1L << AVERAGE) | (1L << LENGTH) | (1L << COALESCE) | (1L << CARACTERISTICA_TABELA) | (1L << ATIVIDADE_TABELA) | (1L << CARACTERISTICA) | (1L << PARAMETRO) | (1L << ROUND) | (1L << TODAY) | (1L << NOW) | (1L << DATE_DIF) | (1L << GET_MONTH) | (1L << GET_DAY) | (1L << GET_YEAR) | (1L << WHILE) | (1L << LPAREN))) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (VAR - 83)) | (1L << (LISTA - 83)) | (1L << (NUMBER - 83)) | (1L << (DECIMAL - 83)) | (1L << (DATE - 83)) | (1L << (IDENTIFIER - 83)) | (1L << (TEXT - 83)) | (1L << (VAR_PRIMARY - 83)))) != 0)) {
				{
				{
				State = 64; rule_block();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURN) {
				{
				State = 70; return_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_blockContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ConditionalContext conditional() {
			return GetRuleContext<ConditionalContext>(0);
		}
		public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public Rule_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_blockContext rule_block() {
		Rule_blockContext _localctx = new Rule_blockContext(Context, State);
		EnterRule(_localctx, 2, RULE_rule_block);
		try {
			State = 78;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 73; assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 74; variable_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 75; arithmetic_expression(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 76; conditional();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 77; loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
	 
		public Variable_declarationContext() { }
		public virtual void CopyFrom(Variable_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArithmeticDeclarationContext : Variable_declarationContext {
		public ITerminalNode VAR() { return GetToken(LanguageParser.VAR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public ITerminalNode ATRIB() { return GetToken(LanguageParser.ATRIB, 0); }
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public ArithmeticDeclarationContext(Variable_declarationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclareListContext : Variable_declarationContext {
		public ITerminalNode LISTA() { return GetToken(LanguageParser.LISTA, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public ITerminalNode ATRIB() { return GetToken(LanguageParser.ATRIB, 0); }
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public DeclareListContext(Variable_declarationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonDeclarationContext : Variable_declarationContext {
		public ITerminalNode VAR() { return GetToken(LanguageParser.VAR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public ITerminalNode ATRIB() { return GetToken(LanguageParser.ATRIB, 0); }
		public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public ComparisonDeclarationContext(Variable_declarationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclareListAllContext : Variable_declarationContext {
		public ITerminalNode LISTA() { return GetToken(LanguageParser.LISTA, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public ITerminalNode ATRIB() { return GetToken(LanguageParser.ATRIB, 0); }
		public ITerminalNode LBRACKET() { return GetToken(LanguageParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(LanguageParser.RBRACKET, 0); }
		public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public DeclareListAllContext(Variable_declarationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareListAll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_variable_declaration);
		try {
			State = 104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new ArithmeticDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 80; Match(VAR);
				State = 81; Match(IDENTIFIER);
				State = 82; Match(ATRIB);
				State = 83; arithmetic_expression(0);
				State = 84; Match(SEMI);
				}
				break;
			case 2:
				_localctx = new ComparisonDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 86; Match(VAR);
				State = 87; Match(IDENTIFIER);
				State = 88; Match(ATRIB);
				State = 89; comparison_expression();
				State = 90; Match(SEMI);
				}
				break;
			case 3:
				_localctx = new DeclareListContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 92; Match(LISTA);
				State = 93; Match(IDENTIFIER);
				State = 94; Match(ATRIB);
				State = 95; arithmetic_expression(0);
				State = 96; Match(SEMI);
				}
				break;
			case 4:
				_localctx = new DeclareListAllContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 98; Match(LISTA);
				State = 99; Match(IDENTIFIER);
				State = 100; Match(ATRIB);
				State = 101; Match(LBRACKET);
				State = 102; Match(RBRACKET);
				State = 103; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	 
		public AssignmentContext() { }
		public virtual void CopyFrom(AssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListAssignmentContext : AssignmentContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		public ITerminalNode LBRACKET() { return GetToken(LanguageParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(LanguageParser.RBRACKET, 0); }
		public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public ListAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListMemoryGlobalValueAssignmentContext : AssignmentContext {
		public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		public ITerminalNode LBRACKET() { return GetToken(LanguageParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(LanguageParser.RBRACKET, 0); }
		public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public ListMemoryGlobalValueAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListMemoryGlobalValueAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarMemoryValueAssignmentContext : AssignmentContext {
		public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public VarMemoryValueAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarMemoryValueAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonAssignmentContext : AssignmentContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public ITerminalNode ATRIB() { return GetToken(LanguageParser.ATRIB, 0); }
		public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public ComparisonAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticAssignmentContext : AssignmentContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public ArithmeticAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListMemoryValueAssignmentContext : AssignmentContext {
		public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		public ITerminalNode[] DOT() { return GetTokens(LanguageParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(LanguageParser.DOT, i);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		public ITerminalNode LBRACKET() { return GetToken(LanguageParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(LanguageParser.RBRACKET, 0); }
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public ListMemoryValueAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListMemoryValueAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignment);
		try {
			State = 164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new ComparisonAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 106; Match(IDENTIFIER);
				State = 107; Match(ATRIB);
				State = 108; comparison_expression();
				State = 109; Match(SEMI);
				}
				break;
			case 2:
				_localctx = new ArithmeticAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 111; Match(IDENTIFIER);
				State = 112; assignment_operator();
				State = 113; arithmetic_expression(0);
				State = 114; Match(SEMI);
				}
				break;
			case 3:
				_localctx = new ListAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 116; Match(IDENTIFIER);
				State = 117; Match(LBRACKET);
				State = 120;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTIFIER:
					{
					State = 118; Match(IDENTIFIER);
					}
					break;
				case NUMBER:
					{
					State = 119; number_integer();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 122; Match(RBRACKET);
				State = 123; Match(DOT);
				State = 124; Match(IDENTIFIER);
				State = 125; assignment_operator();
				State = 126; arithmetic_expression(0);
				State = 127; Match(SEMI);
				}
				break;
			case 4:
				_localctx = new VarMemoryValueAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 129; Match(VAR_PRIMARY);
				State = 130; Match(DOT);
				State = 131; Match(IDENTIFIER);
				State = 132; assignment_operator();
				State = 133; arithmetic_expression(0);
				State = 134; Match(SEMI);
				}
				break;
			case 5:
				_localctx = new ListMemoryGlobalValueAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 136; Match(VAR_PRIMARY);
				State = 137; Match(LBRACKET);
				State = 140;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTIFIER:
					{
					State = 138; Match(IDENTIFIER);
					}
					break;
				case NUMBER:
					{
					State = 139; number_integer();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 142; Match(RBRACKET);
				State = 143; Match(DOT);
				State = 144; Match(IDENTIFIER);
				State = 145; assignment_operator();
				State = 146; arithmetic_expression(0);
				State = 147; Match(SEMI);
				}
				break;
			case 6:
				_localctx = new ListMemoryValueAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 149; Match(VAR_PRIMARY);
				State = 150; Match(DOT);
				State = 151; Match(IDENTIFIER);
				State = 152; Match(LBRACKET);
				State = 155;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTIFIER:
					{
					State = 153; Match(IDENTIFIER);
					}
					break;
				case NUMBER:
					{
					State = 154; number_integer();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 157; Match(RBRACKET);
				State = 158; Match(DOT);
				State = 159; Match(IDENTIFIER);
				State = 160; assignment_operator();
				State = 161; arithmetic_expression(0);
				State = 162; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_valueContext : ParserRuleContext {
		public Return_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_value; } }
	 
		public Return_valueContext() { }
		public virtual void CopyFrom(Return_valueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ReturnValueContext : Return_valueContext {
		public ITerminalNode RETURN() { return GetToken(LanguageParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ReturnValueContext(Return_valueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_valueContext return_value() {
		Return_valueContext _localctx = new Return_valueContext(Context, State);
		EnterRule(_localctx, 8, RULE_return_value);
		int _la;
		try {
			_localctx = new ReturnValueContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(RETURN);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << ISNULL) | (1L << SUM_IF) | (1L << COUNT_IF) | (1L << ABS) | (1L << SQRT) | (1L << SUM) | (1L << MAX) | (1L << MIN) | (1L << AVERAGE) | (1L << LENGTH) | (1L << COALESCE) | (1L << CARACTERISTICA_TABELA) | (1L << ATIVIDADE_TABELA) | (1L << CARACTERISTICA) | (1L << PARAMETRO) | (1L << ROUND) | (1L << TODAY) | (1L << NOW) | (1L << DATE_DIF) | (1L << GET_MONTH) | (1L << GET_DAY) | (1L << GET_YEAR) | (1L << LPAREN))) != 0) || ((((_la - 89)) & ~0x3f) == 0 && ((1L << (_la - 89)) & ((1L << (NUMBER - 89)) | (1L << (DECIMAL - 89)) | (1L << (DATE - 89)) | (1L << (IDENTIFIER - 89)) | (1L << (TEXT - 89)) | (1L << (VAR_PRIMARY - 89)))) != 0)) {
				{
				State = 167; arithmetic_expression(0);
				}
			}

			State = 170; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(LanguageParser.IF, 0); }
		public If_expressionContext if_expression() {
			return GetRuleContext<If_expressionContext>(0);
		}
		public ITerminalNode[] LBRACE() { return GetTokens(LanguageParser.LBRACE); }
		public ITerminalNode LBRACE(int i) {
			return GetToken(LanguageParser.LBRACE, i);
		}
		public Then_blockContext then_block() {
			return GetRuleContext<Then_blockContext>(0);
		}
		public ITerminalNode[] RBRACE() { return GetTokens(LanguageParser.RBRACE); }
		public ITerminalNode RBRACE(int i) {
			return GetToken(LanguageParser.RBRACE, i);
		}
		public ITerminalNode ELSE() { return GetToken(LanguageParser.ELSE, 0); }
		public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		public ConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalContext conditional() {
		ConditionalContext _localctx = new ConditionalContext(Context, State);
		EnterRule(_localctx, 10, RULE_conditional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; Match(IF);
			State = 173; if_expression(0);
			State = 174; Match(LBRACE);
			State = 175; then_block();
			State = 176; Match(RBRACE);
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 177; Match(ELSE);
				State = 178; Match(LBRACE);
				State = 179; else_block();
				State = 180; Match(RBRACE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Then_blockContext : ParserRuleContext {
		public Then_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_then_block; } }
	 
		public Then_blockContext() { }
		public virtual void CopyFrom(Then_blockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ThenBlockContext : Then_blockContext {
		public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public ThenBlockContext(Then_blockContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThenBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Then_blockContext then_block() {
		Then_blockContext _localctx = new Then_blockContext(Context, State);
		EnterRule(_localctx, 12, RULE_then_block);
		int _la;
		try {
			_localctx = new ThenBlockContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << ISNULL) | (1L << SUM_IF) | (1L << COUNT_IF) | (1L << ABS) | (1L << SQRT) | (1L << SUM) | (1L << MAX) | (1L << MIN) | (1L << AVERAGE) | (1L << LENGTH) | (1L << COALESCE) | (1L << CARACTERISTICA_TABELA) | (1L << ATIVIDADE_TABELA) | (1L << CARACTERISTICA) | (1L << PARAMETRO) | (1L << ROUND) | (1L << TODAY) | (1L << NOW) | (1L << DATE_DIF) | (1L << GET_MONTH) | (1L << GET_DAY) | (1L << GET_YEAR) | (1L << WHILE) | (1L << LPAREN))) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (VAR - 83)) | (1L << (LISTA - 83)) | (1L << (NUMBER - 83)) | (1L << (DECIMAL - 83)) | (1L << (DATE - 83)) | (1L << (IDENTIFIER - 83)) | (1L << (TEXT - 83)) | (1L << (VAR_PRIMARY - 83)))) != 0)) {
				{
				{
				State = 184; rule_block();
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_blockContext : ParserRuleContext {
		public Else_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_block; } }
	 
		public Else_blockContext() { }
		public virtual void CopyFrom(Else_blockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ElseBlockContext : Else_blockContext {
		public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public ElseBlockContext(Else_blockContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_blockContext else_block() {
		Else_blockContext _localctx = new Else_blockContext(Context, State);
		EnterRule(_localctx, 14, RULE_else_block);
		int _la;
		try {
			_localctx = new ElseBlockContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << ISNULL) | (1L << SUM_IF) | (1L << COUNT_IF) | (1L << ABS) | (1L << SQRT) | (1L << SUM) | (1L << MAX) | (1L << MIN) | (1L << AVERAGE) | (1L << LENGTH) | (1L << COALESCE) | (1L << CARACTERISTICA_TABELA) | (1L << ATIVIDADE_TABELA) | (1L << CARACTERISTICA) | (1L << PARAMETRO) | (1L << ROUND) | (1L << TODAY) | (1L << NOW) | (1L << DATE_DIF) | (1L << GET_MONTH) | (1L << GET_DAY) | (1L << GET_YEAR) | (1L << WHILE) | (1L << LPAREN))) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (VAR - 83)) | (1L << (LISTA - 83)) | (1L << (NUMBER - 83)) | (1L << (DECIMAL - 83)) | (1L << (DATE - 83)) | (1L << (IDENTIFIER - 83)) | (1L << (TEXT - 83)) | (1L << (VAR_PRIMARY - 83)))) != 0)) {
				{
				{
				State = 190; rule_block();
				}
				}
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_expressionContext : ParserRuleContext {
		public If_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_expression; } }
	 
		public If_expressionContext() { }
		public virtual void CopyFrom(If_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NotIfEntityContext : If_expressionContext {
		public ITerminalNode NOT() { return GetToken(LanguageParser.NOT, 0); }
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public NotIfEntityContext(If_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotIfEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : If_expressionContext {
		public If_expressionContext[] if_expression() {
			return GetRuleContexts<If_expressionContext>();
		}
		public If_expressionContext if_expression(int i) {
			return GetRuleContext<If_expressionContext>(i);
		}
		public ITerminalNode OR() { return GetToken(LanguageParser.OR, 0); }
		public OrExpressionContext(If_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfComparisonExpressionContext : If_expressionContext {
		public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public IfComparisonExpressionContext(If_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : If_expressionContext {
		public If_expressionContext[] if_expression() {
			return GetRuleContexts<If_expressionContext>();
		}
		public If_expressionContext if_expression(int i) {
			return GetRuleContext<If_expressionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(LanguageParser.AND, 0); }
		public AndExpressionContext(If_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisIfExpressionContext : If_expressionContext {
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public If_expressionContext if_expression() {
			return GetRuleContext<If_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ParenthesisIfExpressionContext(If_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfEntityContext : If_expressionContext {
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public IfEntityContext(If_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotParenthesisIfExpressionContext : If_expressionContext {
		public ITerminalNode NOT() { return GetToken(LanguageParser.NOT, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public If_expressionContext if_expression() {
			return GetRuleContext<If_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public NotParenthesisIfExpressionContext(If_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotParenthesisIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_expressionContext if_expression() {
		return if_expression(0);
	}

	private If_expressionContext if_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		If_expressionContext _localctx = new If_expressionContext(Context, _parentState);
		If_expressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_if_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				_localctx = new IfComparisonExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 197; comparison_expression();
				}
				break;
			case 2:
				{
				_localctx = new NotParenthesisIfExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 198; Match(NOT);
				State = 199; Match(LPAREN);
				State = 200; if_expression(0);
				State = 201; Match(RPAREN);
				}
				break;
			case 3:
				{
				_localctx = new ParenthesisIfExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 203; Match(LPAREN);
				State = 204; if_expression(0);
				State = 205; Match(RPAREN);
				}
				break;
			case 4:
				{
				_localctx = new NotIfEntityContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 207; Match(NOT);
				State = 208; entity();
				}
				break;
			case 5:
				{
				_localctx = new IfEntityContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 209; entity();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 220;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 218;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new AndExpressionContext(new If_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_if_expression);
						State = 212;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 213; Match(AND);
						State = 214; if_expression(8);
						}
						break;
					case 2:
						{
						_localctx = new OrExpressionContext(new If_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_if_expression);
						State = 215;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 216; Match(OR);
						State = 217; if_expression(7);
						}
						break;
					}
					} 
				}
				State = 222;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Comparison_expressionContext : ParserRuleContext {
		public Comparison_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_expression; } }
	 
		public Comparison_expressionContext() { }
		public virtual void CopyFrom(Comparison_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesisComparisonExpressionContext : Comparison_expressionContext {
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ParenthesisComparisonExpressionContext(Comparison_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : Comparison_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public ComparisonExpressionContext(Comparison_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_expressionContext comparison_expression() {
		Comparison_expressionContext _localctx = new Comparison_expressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_comparison_expression);
		try {
			State = 231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new ComparisonExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 223; arithmetic_expression(0);
				State = 224; comparison_operator();
				State = 225; arithmetic_expression(0);
				}
				break;
			case 2:
				_localctx = new ParenthesisComparisonExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 227; Match(LPAREN);
				State = 228; comparison_expression();
				State = 229; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		public ITerminalNode GT() { return GetToken(LanguageParser.GT, 0); }
		public ITerminalNode GE() { return GetToken(LanguageParser.GE, 0); }
		public ITerminalNode LT() { return GetToken(LanguageParser.LT, 0); }
		public ITerminalNode LE() { return GetToken(LanguageParser.LE, 0); }
		public ITerminalNode EQ() { return GetToken(LanguageParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(LanguageParser.NEQ, 0); }
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(Context, State);
		EnterRule(_localctx, 20, RULE_comparison_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (GT - 69)) | (1L << (GE - 69)) | (1L << (LT - 69)) | (1L << (LE - 69)) | (1L << (EQ - 69)) | (1L << (NEQ - 69)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public ITerminalNode ATRIB() { return GetToken(LanguageParser.ATRIB, 0); }
		public ITerminalNode PLUS_ASSIGNMENT() { return GetToken(LanguageParser.PLUS_ASSIGNMENT, 0); }
		public ITerminalNode MINUS_ASSIGNMENT() { return GetToken(LanguageParser.MINUS_ASSIGNMENT, 0); }
		public ITerminalNode MULT_ASSIGNMENT() { return GetToken(LanguageParser.MULT_ASSIGNMENT, 0); }
		public ITerminalNode DIV_ASSIGNMENT() { return GetToken(LanguageParser.DIV_ASSIGNMENT, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 22, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (ATRIB - 78)) | (1L << (PLUS_ASSIGNMENT - 78)) | (1L << (MINUS_ASSIGNMENT - 78)) | (1L << (MULT_ASSIGNMENT - 78)) | (1L << (DIV_ASSIGNMENT - 78)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
	 
		public LoopContext() { }
		public virtual void CopyFrom(LoopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhileExpressionContext : LoopContext {
		public ITerminalNode WHILE() { return GetToken(LanguageParser.WHILE, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public If_expressionContext if_expression() {
			return GetRuleContext<If_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ITerminalNode LBRACE() { return GetToken(LanguageParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(LanguageParser.RBRACE, 0); }
		public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public WhileExpressionContext(LoopContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 24, RULE_loop);
		int _la;
		try {
			_localctx = new WhileExpressionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; Match(WHILE);
			State = 238; Match(LPAREN);
			State = 239; if_expression(0);
			State = 240; Match(RPAREN);
			State = 241; Match(LBRACE);
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << ISNULL) | (1L << SUM_IF) | (1L << COUNT_IF) | (1L << ABS) | (1L << SQRT) | (1L << SUM) | (1L << MAX) | (1L << MIN) | (1L << AVERAGE) | (1L << LENGTH) | (1L << COALESCE) | (1L << CARACTERISTICA_TABELA) | (1L << ATIVIDADE_TABELA) | (1L << CARACTERISTICA) | (1L << PARAMETRO) | (1L << ROUND) | (1L << TODAY) | (1L << NOW) | (1L << DATE_DIF) | (1L << GET_MONTH) | (1L << GET_DAY) | (1L << GET_YEAR) | (1L << WHILE) | (1L << LPAREN))) != 0) || ((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (VAR - 83)) | (1L << (LISTA - 83)) | (1L << (NUMBER - 83)) | (1L << (DECIMAL - 83)) | (1L << (DATE - 83)) | (1L << (IDENTIFIER - 83)) | (1L << (TEXT - 83)) | (1L << (VAR_PRIMARY - 83)))) != 0)) {
				{
				{
				State = 242; rule_block();
				}
				}
				State = 247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 248; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_signatureContext : ParserRuleContext {
		public Function_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_signature; } }
	 
		public Function_signatureContext() { }
		public virtual void CopyFrom(Function_signatureContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaracteristicaContext : Function_signatureContext {
		public ITerminalNode CARACTERISTICA() { return GetToken(LanguageParser.CARACTERISTICA, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public Descricao_caracteristicaContext descricao_caracteristica() {
			return GetRuleContext<Descricao_caracteristicaContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public Codigo_caracteristicaContext codigo_caracteristica() {
			return GetRuleContext<Codigo_caracteristicaContext>(0);
		}
		public Valor_fator_caracteristicaContext valor_fator_caracteristica() {
			return GetRuleContext<Valor_fator_caracteristicaContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public Exercicio_caracteristicaContext exercicio_caracteristica() {
			return GetRuleContext<Exercicio_caracteristicaContext>(0);
		}
		public CaracteristicaContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AbsFunctionContext : Function_signatureContext {
		public ITerminalNode ABS() { return GetToken(LanguageParser.ABS, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public AbsFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbsFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinDatabaseContext : Function_signatureContext {
		public ITerminalNode MIN() { return GetToken(LanguageParser.MIN, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		public ITerminalNode[] DOT() { return GetTokens(LanguageParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(LanguageParser.DOT, i);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public MinDatabaseContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AverageVariableContext : Function_signatureContext {
		public ITerminalNode AVERAGE() { return GetToken(LanguageParser.AVERAGE, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public AverageVariableContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAverageVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumIfListLocalContext : Function_signatureContext {
		public ITerminalNode SUM_IF() { return GetToken(LanguageParser.SUM_IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		public ITerminalNode COMMA() { return GetToken(LanguageParser.COMMA, 0); }
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public SumIfListLocalContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumIfListLocal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumIfFunctionContext : Function_signatureContext {
		public ITerminalNode SUM_IF() { return GetToken(LanguageParser.SUM_IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		public ITerminalNode[] DOT() { return GetTokens(LanguageParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(LanguageParser.DOT, i);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		public ITerminalNode COMMA() { return GetToken(LanguageParser.COMMA, 0); }
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public SumIfFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumIfFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LengthVariableContext : Function_signatureContext {
		public ITerminalNode LENGTH() { return GetToken(LanguageParser.LENGTH, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public LengthVariableContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaxListLocalContext : Function_signatureContext {
		public ITerminalNode MAX() { return GetToken(LanguageParser.MAX, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public MaxListLocalContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxListLocal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParametroFunctionContext : Function_signatureContext {
		public ITerminalNode PARAMETRO() { return GetToken(LanguageParser.PARAMETRO, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public Number_integerContext[] number_integer() {
			return GetRuleContexts<Number_integerContext>();
		}
		public Number_integerContext number_integer(int i) {
			return GetRuleContext<Number_integerContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ParametroFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametroFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumDatabaseContext : Function_signatureContext {
		public ITerminalNode SUM() { return GetToken(LanguageParser.SUM, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		public ITerminalNode[] DOT() { return GetTokens(LanguageParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(LanguageParser.DOT, i);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public SumDatabaseContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinListLocalContext : Function_signatureContext {
		public ITerminalNode MIN() { return GetToken(LanguageParser.MIN, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public MinListLocalContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinListLocal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NowFunctionContext : Function_signatureContext {
		public ITerminalNode NOW() { return GetToken(LanguageParser.NOW, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public NowFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNowFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtividadeTabelaContext : Function_signatureContext {
		public ITerminalNode ATIVIDADE_TABELA() { return GetToken(LanguageParser.ATIVIDADE_TABELA, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public Tabela_caracteristicaContext tabela_caracteristica() {
			return GetRuleContext<Tabela_caracteristicaContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public Descricao_caracteristicaContext descricao_caracteristica() {
			return GetRuleContext<Descricao_caracteristicaContext>(0);
		}
		public Coluna_caracteristicaContext coluna_caracteristica() {
			return GetRuleContext<Coluna_caracteristicaContext>(0);
		}
		public Exercicio_caracteristicaContext exercicio_caracteristica() {
			return GetRuleContext<Exercicio_caracteristicaContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public Coluna_filtroContext coluna_filtro() {
			return GetRuleContext<Coluna_filtroContext>(0);
		}
		public ITerminalNode LBRACKET() { return GetToken(LanguageParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(LanguageParser.RBRACKET, 0); }
		public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public AtividadeTabelaContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtividadeTabela(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AverageDatabaseContext : Function_signatureContext {
		public ITerminalNode AVERAGE() { return GetToken(LanguageParser.AVERAGE, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		public ITerminalNode[] DOT() { return GetTokens(LanguageParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(LanguageParser.DOT, i);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public AverageDatabaseContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAverageDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetDayFunctionContext : Function_signatureContext {
		public ITerminalNode GET_DAY() { return GetToken(LanguageParser.GET_DAY, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public GetDayFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetDayFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CountIfListLocalContext : Function_signatureContext {
		public ITerminalNode COUNT_IF() { return GetToken(LanguageParser.COUNT_IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public ITerminalNode COMMA() { return GetToken(LanguageParser.COMMA, 0); }
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public CountIfListLocalContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountIfListLocal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoundFunctionContext : Function_signatureContext {
		public ITerminalNode ROUND() { return GetToken(LanguageParser.ROUND, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(LanguageParser.COMMA, 0); }
		public RoundFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoundFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceFunctionContext : Function_signatureContext {
		public ITerminalNode COALESCE() { return GetToken(LanguageParser.COALESCE, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public CoalesceFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumListLocalContext : Function_signatureContext {
		public ITerminalNode SUM() { return GetToken(LanguageParser.SUM, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public SumListLocalContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumListLocal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaxVariableContext : Function_signatureContext {
		public ITerminalNode MAX() { return GetToken(LanguageParser.MAX, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public MaxVariableContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaracteristicaTabelaContext : Function_signatureContext {
		public ITerminalNode CARACTERISTICA_TABELA() { return GetToken(LanguageParser.CARACTERISTICA_TABELA, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public Tabela_caracteristicaContext tabela_caracteristica() {
			return GetRuleContext<Tabela_caracteristicaContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public Descricao_caracteristicaContext descricao_caracteristica() {
			return GetRuleContext<Descricao_caracteristicaContext>(0);
		}
		public Coluna_caracteristicaContext coluna_caracteristica() {
			return GetRuleContext<Coluna_caracteristicaContext>(0);
		}
		public Exercicio_caracteristicaContext exercicio_caracteristica() {
			return GetRuleContext<Exercicio_caracteristicaContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public Valor_fator_caracteristicaContext valor_fator_caracteristica() {
			return GetRuleContext<Valor_fator_caracteristicaContext>(0);
		}
		public CaracteristicaTabelaContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaracteristicaTabela(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumVariableContext : Function_signatureContext {
		public ITerminalNode SUM() { return GetToken(LanguageParser.SUM, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public SumVariableContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinVariableContext : Function_signatureContext {
		public ITerminalNode MIN() { return GetToken(LanguageParser.MIN, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public MinVariableContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TodayFunctionContext : Function_signatureContext {
		public ITerminalNode TODAY() { return GetToken(LanguageParser.TODAY, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public TodayFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTodayFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateDifFunctionContext : Function_signatureContext {
		public ITerminalNode DATE_DIF() { return GetToken(LanguageParser.DATE_DIF, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public Date_unitContext date_unit() {
			return GetRuleContext<Date_unitContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public DateDifFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateDifFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AverageListLocalContext : Function_signatureContext {
		public ITerminalNode AVERAGE() { return GetToken(LanguageParser.AVERAGE, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public AverageListLocalContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAverageListLocal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetYearFunctionContext : Function_signatureContext {
		public ITerminalNode GET_YEAR() { return GetToken(LanguageParser.GET_YEAR, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public GetYearFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetYearFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetMonthFunctionContext : Function_signatureContext {
		public ITerminalNode GET_MONTH() { return GetToken(LanguageParser.GET_MONTH, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public GetMonthFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetMonthFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LengthDatabaseContext : Function_signatureContext {
		public ITerminalNode LENGTH() { return GetToken(LanguageParser.LENGTH, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public LengthDatabaseContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaxDatabaseContext : Function_signatureContext {
		public ITerminalNode MAX() { return GetToken(LanguageParser.MAX, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		public ITerminalNode[] DOT() { return GetTokens(LanguageParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(LanguageParser.DOT, i);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public MaxDatabaseContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsNullFunctionContext : Function_signatureContext {
		public ITerminalNode ISNULL() { return GetToken(LanguageParser.ISNULL, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public IsNullFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsNullFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SqrtFunctionContext : Function_signatureContext {
		public ITerminalNode SQRT() { return GetToken(LanguageParser.SQRT, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public SqrtFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqrtFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CountIfFunctionContext : Function_signatureContext {
		public ITerminalNode COUNT_IF() { return GetToken(LanguageParser.COUNT_IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		public ITerminalNode COMMA() { return GetToken(LanguageParser.COMMA, 0); }
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public CountIfFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountIfFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_signatureContext function_signature() {
		Function_signatureContext _localctx = new Function_signatureContext(Context, State);
		EnterRule(_localctx, 26, RULE_function_signature);
		int _la;
		try {
			int _alt;
			State = 531;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				_localctx = new AtividadeTabelaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 250; Match(ATIVIDADE_TABELA);
				State = 251; Match(LPAREN);
				State = 252; tabela_caracteristica();
				State = 253; Match(COMMA);
				State = 254; descricao_caracteristica();
				State = 255; Match(COMMA);
				State = 256; coluna_caracteristica();
				State = 257; Match(COMMA);
				State = 258; exercicio_caracteristica();
				State = 261;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 259; Match(COMMA);
					State = 260; coluna_filtro();
					}
					break;
				}
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 263; Match(COMMA);
					State = 264; Match(LBRACKET);
					State = 276;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 266;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 265; text();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 268;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						State = 273;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==COMMA) {
							{
							{
							State = 270; Match(COMMA);
							}
							}
							State = 275;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						}
						State = 278;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==TEXT );
					State = 280; Match(RBRACKET);
					}
				}

				State = 284; Match(RPAREN);
				}
				break;
			case 2:
				_localctx = new CaracteristicaTabelaContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 286; Match(CARACTERISTICA_TABELA);
				State = 287; Match(LPAREN);
				State = 288; tabela_caracteristica();
				State = 289; Match(COMMA);
				State = 290; descricao_caracteristica();
				State = 291; Match(COMMA);
				State = 292; coluna_caracteristica();
				State = 293; Match(COMMA);
				State = 294; exercicio_caracteristica();
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 295; Match(COMMA);
					State = 296; valor_fator_caracteristica();
					}
				}

				State = 299; Match(RPAREN);
				}
				break;
			case 3:
				_localctx = new CaracteristicaContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 301; Match(CARACTERISTICA);
				State = 302; Match(LPAREN);
				State = 303; descricao_caracteristica();
				State = 304; Match(COMMA);
				State = 305; codigo_caracteristica();
				State = 306; Match(COMMA);
				State = 307; valor_fator_caracteristica();
				State = 310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 308; Match(COMMA);
					State = 309; exercicio_caracteristica();
					}
				}

				State = 312; Match(RPAREN);
				}
				break;
			case 4:
				_localctx = new ParametroFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 314; Match(PARAMETRO);
				State = 315; Match(LPAREN);
				State = 316; text();
				State = 317; Match(COMMA);
				State = 318; number_integer();
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 319; Match(COMMA);
					State = 320; number_integer();
					}
				}

				State = 323; Match(RPAREN);
				}
				break;
			case 5:
				_localctx = new SumDatabaseContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 325; Match(SUM);
				State = 326; Match(LPAREN);
				State = 327; Match(VAR_PRIMARY);
				State = 328; Match(DOT);
				State = 329; Match(IDENTIFIER);
				State = 332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 330; Match(DOT);
					State = 331; Match(IDENTIFIER);
					}
				}

				State = 334; Match(RPAREN);
				}
				break;
			case 6:
				_localctx = new SumListLocalContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 335; Match(SUM);
				State = 336; Match(LPAREN);
				State = 337; Match(IDENTIFIER);
				State = 338; Match(DOT);
				State = 339; Match(IDENTIFIER);
				State = 340; Match(RPAREN);
				}
				break;
			case 7:
				_localctx = new SumVariableContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 341; Match(SUM);
				State = 342; Match(LPAREN);
				State = 343; Match(IDENTIFIER);
				State = 344; Match(RPAREN);
				}
				break;
			case 8:
				_localctx = new MaxDatabaseContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 345; Match(MAX);
				State = 346; Match(LPAREN);
				State = 347; Match(VAR_PRIMARY);
				State = 348; Match(DOT);
				State = 349; Match(IDENTIFIER);
				State = 352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 350; Match(DOT);
					State = 351; Match(IDENTIFIER);
					}
				}

				State = 354; Match(RPAREN);
				}
				break;
			case 9:
				_localctx = new MaxListLocalContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 355; Match(MAX);
				State = 356; Match(LPAREN);
				State = 357; Match(IDENTIFIER);
				State = 358; Match(DOT);
				State = 359; Match(IDENTIFIER);
				State = 360; Match(RPAREN);
				}
				break;
			case 10:
				_localctx = new MaxVariableContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 361; Match(MAX);
				State = 362; Match(LPAREN);
				State = 363; Match(IDENTIFIER);
				State = 364; Match(RPAREN);
				}
				break;
			case 11:
				_localctx = new MinDatabaseContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 365; Match(MIN);
				State = 366; Match(LPAREN);
				State = 367; Match(VAR_PRIMARY);
				State = 368; Match(DOT);
				State = 369; Match(IDENTIFIER);
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 370; Match(DOT);
					State = 371; Match(IDENTIFIER);
					}
				}

				State = 374; Match(RPAREN);
				}
				break;
			case 12:
				_localctx = new MinListLocalContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 375; Match(MIN);
				State = 376; Match(LPAREN);
				State = 377; Match(IDENTIFIER);
				State = 378; Match(DOT);
				State = 379; Match(IDENTIFIER);
				State = 380; Match(RPAREN);
				}
				break;
			case 13:
				_localctx = new MinVariableContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 381; Match(MIN);
				State = 382; Match(LPAREN);
				State = 383; Match(IDENTIFIER);
				State = 384; Match(RPAREN);
				}
				break;
			case 14:
				_localctx = new AverageDatabaseContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 385; Match(AVERAGE);
				State = 386; Match(LPAREN);
				State = 387; Match(VAR_PRIMARY);
				State = 388; Match(DOT);
				State = 389; Match(IDENTIFIER);
				State = 392;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 390; Match(DOT);
					State = 391; Match(IDENTIFIER);
					}
				}

				State = 394; Match(RPAREN);
				}
				break;
			case 15:
				_localctx = new AverageListLocalContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 395; Match(AVERAGE);
				State = 396; Match(LPAREN);
				State = 397; Match(IDENTIFIER);
				State = 398; Match(DOT);
				State = 399; Match(IDENTIFIER);
				State = 400; Match(RPAREN);
				}
				break;
			case 16:
				_localctx = new AverageVariableContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 401; Match(AVERAGE);
				State = 402; Match(LPAREN);
				State = 403; Match(IDENTIFIER);
				State = 404; Match(RPAREN);
				}
				break;
			case 17:
				_localctx = new LengthDatabaseContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 405; Match(LENGTH);
				State = 406; Match(LPAREN);
				State = 407; Match(VAR_PRIMARY);
				State = 410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 408; Match(DOT);
					State = 409; Match(IDENTIFIER);
					}
				}

				State = 412; Match(RPAREN);
				}
				break;
			case 18:
				_localctx = new LengthVariableContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 413; Match(LENGTH);
				State = 414; Match(LPAREN);
				State = 415; Match(IDENTIFIER);
				State = 416; Match(RPAREN);
				}
				break;
			case 19:
				_localctx = new RoundFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 417; Match(ROUND);
				State = 418; Match(LPAREN);
				State = 419; arithmetic_expression(0);
				State = 422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 420; Match(COMMA);
					State = 421; arithmetic_expression(0);
					}
				}

				State = 424; Match(RPAREN);
				}
				break;
			case 20:
				_localctx = new CoalesceFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 426; Match(COALESCE);
				State = 427; Match(LPAREN);
				State = 428; entity();
				State = 433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 429; Match(COMMA);
					State = 430; entity();
					}
					}
					State = 435;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 436; Match(RPAREN);
				}
				break;
			case 21:
				_localctx = new SqrtFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 438; Match(SQRT);
				State = 439; Match(LPAREN);
				State = 440; arithmetic_expression(0);
				State = 441; Match(RPAREN);
				}
				break;
			case 22:
				_localctx = new AbsFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 443; Match(ABS);
				State = 444; Match(LPAREN);
				State = 445; arithmetic_expression(0);
				State = 446; Match(RPAREN);
				}
				break;
			case 23:
				_localctx = new SumIfFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 448; Match(SUM_IF);
				State = 449; Match(LPAREN);
				State = 450; Match(VAR_PRIMARY);
				State = 451; Match(DOT);
				State = 452; Match(IDENTIFIER);
				State = 455;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 453; Match(DOT);
					State = 454; Match(IDENTIFIER);
					}
				}

				State = 457; Match(COMMA);
				State = 458; arithmetic_expression(0);
				State = 459; comparison_operator();
				State = 460; arithmetic_expression(0);
				State = 461; Match(RPAREN);
				}
				break;
			case 24:
				_localctx = new SumIfListLocalContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 463; Match(SUM_IF);
				State = 464; Match(LPAREN);
				State = 465; Match(IDENTIFIER);
				State = 466; Match(DOT);
				State = 467; Match(IDENTIFIER);
				State = 468; Match(COMMA);
				State = 469; arithmetic_expression(0);
				State = 470; comparison_operator();
				State = 471; arithmetic_expression(0);
				State = 472; Match(RPAREN);
				}
				break;
			case 25:
				_localctx = new CountIfFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 474; Match(COUNT_IF);
				State = 475; Match(LPAREN);
				State = 476; Match(VAR_PRIMARY);
				State = 479;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 477; Match(DOT);
					State = 478; Match(IDENTIFIER);
					}
				}

				State = 481; Match(COMMA);
				State = 482; arithmetic_expression(0);
				State = 483; comparison_operator();
				State = 484; arithmetic_expression(0);
				State = 485; Match(RPAREN);
				}
				break;
			case 26:
				_localctx = new CountIfListLocalContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 487; Match(COUNT_IF);
				State = 488; Match(LPAREN);
				State = 489; Match(IDENTIFIER);
				State = 490; Match(COMMA);
				State = 491; arithmetic_expression(0);
				State = 492; comparison_operator();
				State = 493; arithmetic_expression(0);
				State = 494; Match(RPAREN);
				}
				break;
			case 27:
				_localctx = new IsNullFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 496; Match(ISNULL);
				State = 497; Match(LPAREN);
				State = 498; arithmetic_expression(0);
				State = 499; Match(RPAREN);
				}
				break;
			case 28:
				_localctx = new TodayFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 501; Match(TODAY);
				State = 502; Match(LPAREN);
				State = 503; Match(RPAREN);
				}
				break;
			case 29:
				_localctx = new NowFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 504; Match(NOW);
				State = 505; Match(LPAREN);
				State = 506; Match(RPAREN);
				}
				break;
			case 30:
				_localctx = new DateDifFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 507; Match(DATE_DIF);
				State = 508; Match(LPAREN);
				State = 509; entity();
				State = 510; Match(COMMA);
				State = 511; entity();
				State = 512; Match(COMMA);
				State = 513; date_unit();
				State = 514; Match(RPAREN);
				}
				break;
			case 31:
				_localctx = new GetYearFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 516; Match(GET_YEAR);
				State = 517; Match(LPAREN);
				State = 518; entity();
				State = 519; Match(RPAREN);
				}
				break;
			case 32:
				_localctx = new GetMonthFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 521; Match(GET_MONTH);
				State = 522; Match(LPAREN);
				State = 523; entity();
				State = 524; Match(RPAREN);
				}
				break;
			case 33:
				_localctx = new GetDayFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 526; Match(GET_DAY);
				State = 527; Match(LPAREN);
				State = 528; entity();
				State = 529; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arithmetic_expressionContext : ParserRuleContext {
		public Arithmetic_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic_expression; } }
	 
		public Arithmetic_expressionContext() { }
		public virtual void CopyFrom(Arithmetic_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MinusExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(LanguageParser.MINUS, 0); }
		public MinusExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode POW() { return GetToken(LanguageParser.POW, 0); }
		public PowExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpressionContext : Arithmetic_expressionContext {
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ParenthesisExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode MULT() { return GetToken(LanguageParser.MULT, 0); }
		public MultExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(LanguageParser.DIV, 0); }
		public DivExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(LanguageParser.PLUS, 0); }
		public PlusExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfFunctionSignatureContext : Arithmetic_expressionContext {
		public Function_signatureContext function_signature() {
			return GetRuleContext<Function_signatureContext>(0);
		}
		public IfFunctionSignatureContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EntityExpressionContext : Arithmetic_expressionContext {
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public EntityExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetic_expressionContext arithmetic_expression() {
		return arithmetic_expression(0);
	}

	private Arithmetic_expressionContext arithmetic_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Arithmetic_expressionContext _localctx = new Arithmetic_expressionContext(Context, _parentState);
		Arithmetic_expressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_arithmetic_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				_localctx = new ParenthesisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 534; Match(LPAREN);
				State = 535; arithmetic_expression(0);
				State = 536; Match(RPAREN);
				}
				break;
			case ISNULL:
			case SUM_IF:
			case COUNT_IF:
			case ABS:
			case SQRT:
			case SUM:
			case MAX:
			case MIN:
			case AVERAGE:
			case LENGTH:
			case COALESCE:
			case CARACTERISTICA_TABELA:
			case ATIVIDADE_TABELA:
			case CARACTERISTICA:
			case PARAMETRO:
			case ROUND:
			case TODAY:
			case NOW:
			case DATE_DIF:
			case GET_MONTH:
			case GET_DAY:
			case GET_YEAR:
				{
				_localctx = new IfFunctionSignatureContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 538; function_signature();
				}
				break;
			case TRUE:
			case FALSE:
			case NULL:
			case NUMBER:
			case DECIMAL:
			case DATE:
			case IDENTIFIER:
			case TEXT:
			case VAR_PRIMARY:
				{
				_localctx = new EntityExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 539; entity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 559;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 557;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
					case 1:
						{
						_localctx = new MultExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 542;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 543; Match(MULT);
						State = 544; arithmetic_expression(9);
						}
						break;
					case 2:
						{
						_localctx = new DivExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 545;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 546; Match(DIV);
						State = 547; arithmetic_expression(8);
						}
						break;
					case 3:
						{
						_localctx = new PlusExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 548;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 549; Match(PLUS);
						State = 550; arithmetic_expression(7);
						}
						break;
					case 4:
						{
						_localctx = new MinusExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 551;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 552; Match(MINUS);
						State = 553; arithmetic_expression(6);
						}
						break;
					case 5:
						{
						_localctx = new PowExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 554;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 555; Match(POW);
						State = 556; arithmetic_expression(5);
						}
						break;
					}
					} 
				}
				State = 561;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Tabela_caracteristicaContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public Tabela_caracteristicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabela_caracteristica; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabela_caracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tabela_caracteristicaContext tabela_caracteristica() {
		Tabela_caracteristicaContext _localctx = new Tabela_caracteristicaContext(Context, State);
		EnterRule(_localctx, 30, RULE_tabela_caracteristica);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Descricao_caracteristicaContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public Descricao_caracteristicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_descricao_caracteristica; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescricao_caracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Descricao_caracteristicaContext descricao_caracteristica() {
		Descricao_caracteristicaContext _localctx = new Descricao_caracteristicaContext(Context, State);
		EnterRule(_localctx, 32, RULE_descricao_caracteristica);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Valor_fator_caracteristicaContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public Valor_fator_caracteristicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valor_fator_caracteristica; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValor_fator_caracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Valor_fator_caracteristicaContext valor_fator_caracteristica() {
		Valor_fator_caracteristicaContext _localctx = new Valor_fator_caracteristicaContext(Context, State);
		EnterRule(_localctx, 34, RULE_valor_fator_caracteristica);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Codigo_caracteristicaContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public Codigo_caracteristicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codigo_caracteristica; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodigo_caracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Codigo_caracteristicaContext codigo_caracteristica() {
		Codigo_caracteristicaContext _localctx = new Codigo_caracteristicaContext(Context, State);
		EnterRule(_localctx, 36, RULE_codigo_caracteristica);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exercicio_caracteristicaContext : ParserRuleContext {
		public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public Exercicio_caracteristicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exercicio_caracteristica; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExercicio_caracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exercicio_caracteristicaContext exercicio_caracteristica() {
		Exercicio_caracteristicaContext _localctx = new Exercicio_caracteristicaContext(Context, State);
		EnterRule(_localctx, 38, RULE_exercicio_caracteristica);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570; number_integer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Coluna_caracteristicaContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public Coluna_caracteristicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coluna_caracteristica; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColuna_caracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Coluna_caracteristicaContext coluna_caracteristica() {
		Coluna_caracteristicaContext _localctx = new Coluna_caracteristicaContext(Context, State);
		EnterRule(_localctx, 40, RULE_coluna_caracteristica);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Coluna_filtroContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public Coluna_filtroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coluna_filtro; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColuna_filtro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Coluna_filtroContext coluna_filtro() {
		Coluna_filtroContext _localctx = new Coluna_filtroContext(Context, State);
		EnterRule(_localctx, 42, RULE_coluna_filtro);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Coluna_valor_caracteristicaContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public Coluna_valor_caracteristicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coluna_valor_caracteristica; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColuna_valor_caracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Coluna_valor_caracteristicaContext coluna_valor_caracteristica() {
		Coluna_valor_caracteristicaContext _localctx = new Coluna_valor_caracteristicaContext(Context, State);
		EnterRule(_localctx, 44, RULE_coluna_valor_caracteristica);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : ParserRuleContext {
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
	 
		public EntityContext() { }
		public virtual void CopyFrom(EntityContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListMemoryGlobalEntityContext : EntityContext {
		public ListMemoryGlobalContext listMemoryGlobal() {
			return GetRuleContext<ListMemoryGlobalContext>(0);
		}
		public ListMemoryGlobalEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListMemoryGlobalEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarMemoryEntityContext : EntityContext {
		public VarMemoryContext varMemory() {
			return GetRuleContext<VarMemoryContext>(0);
		}
		public VarMemoryEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarMemoryEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolEntityContext : EntityContext {
		public ITerminalNode TRUE() { return GetToken(LanguageParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(LanguageParser.FALSE, 0); }
		public BoolEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarPrimaryEntityContext : EntityContext {
		public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		public VarPrimaryEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarPrimaryEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullEntityContext : EntityContext {
		public ITerminalNode NULL() { return GetToken(LanguageParser.NULL, 0); }
		public NullEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberDecimalEntityContext : EntityContext {
		public Number_decimalContext number_decimal() {
			return GetRuleContext<Number_decimalContext>(0);
		}
		public NumberDecimalEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberDecimalEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableEntityContext : EntityContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public VariableEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListEntityContext : EntityContext {
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public ListEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListMemoryEntityContext : EntityContext {
		public ListMemoryContext listMemory() {
			return GetRuleContext<ListMemoryContext>(0);
		}
		public ListMemoryEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListMemoryEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberIntegerEntityContext : EntityContext {
		public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public NumberIntegerEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberIntegerEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringEntityContext : EntityContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public StringEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateEntityContext : EntityContext {
		public ITerminalNode DATE() { return GetToken(LanguageParser.DATE, 0); }
		public DateEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		EntityContext _localctx = new EntityContext(Context, State);
		EnterRule(_localctx, 46, RULE_entity);
		int _la;
		try {
			State = 590;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				_localctx = new BoolEntityContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 578;
				_la = TokenStream.LA(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				_localctx = new NumberDecimalEntityContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 579; number_decimal();
				}
				break;
			case 3:
				_localctx = new NumberIntegerEntityContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 580; number_integer();
				}
				break;
			case 4:
				_localctx = new StringEntityContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 581; text();
				}
				break;
			case 5:
				_localctx = new DateEntityContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 582; Match(DATE);
				}
				break;
			case 6:
				_localctx = new VariableEntityContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 583; Match(IDENTIFIER);
				}
				break;
			case 7:
				_localctx = new ListEntityContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 584; list();
				}
				break;
			case 8:
				_localctx = new VarPrimaryEntityContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 585; Match(VAR_PRIMARY);
				}
				break;
			case 9:
				_localctx = new VarMemoryEntityContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 586; varMemory();
				}
				break;
			case 10:
				_localctx = new ListMemoryEntityContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 587; listMemory();
				}
				break;
			case 11:
				_localctx = new ListMemoryGlobalEntityContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 588; listMemoryGlobal();
				}
				break;
			case 12:
				_localctx = new NullEntityContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 589; Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarMemoryContext : ParserRuleContext {
		public VarMemoryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varMemory; } }
	 
		public VarMemoryContext() { }
		public virtual void CopyFrom(VarMemoryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VarMemoryValueContext : VarMemoryContext {
		public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public VarMemoryValueContext(VarMemoryContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarMemoryValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarMemoryContext varMemory() {
		VarMemoryContext _localctx = new VarMemoryContext(Context, State);
		EnterRule(_localctx, 48, RULE_varMemory);
		try {
			_localctx = new VarMemoryValueContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 592; Match(VAR_PRIMARY);
			State = 593; Match(DOT);
			State = 594; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListMemoryGlobalContext : ParserRuleContext {
		public ListMemoryGlobalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listMemoryGlobal; } }
	 
		public ListMemoryGlobalContext() { }
		public virtual void CopyFrom(ListMemoryGlobalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListMemoryGlobalValueContext : ListMemoryGlobalContext {
		public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		public ITerminalNode LBRACKET() { return GetToken(LanguageParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(LanguageParser.RBRACKET, 0); }
		public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public ListMemoryGlobalValueContext(ListMemoryGlobalContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListMemoryGlobalValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListMemoryGlobalContext listMemoryGlobal() {
		ListMemoryGlobalContext _localctx = new ListMemoryGlobalContext(Context, State);
		EnterRule(_localctx, 50, RULE_listMemoryGlobal);
		try {
			_localctx = new ListMemoryGlobalValueContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 596; Match(VAR_PRIMARY);
			State = 597; Match(LBRACKET);
			State = 600;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 598; Match(IDENTIFIER);
				}
				break;
			case NUMBER:
				{
				State = 599; number_integer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 602; Match(RBRACKET);
			State = 603; Match(DOT);
			State = 604; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListMemoryContext : ParserRuleContext {
		public ListMemoryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listMemory; } }
	 
		public ListMemoryContext() { }
		public virtual void CopyFrom(ListMemoryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListMemoryValueContext : ListMemoryContext {
		public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		public ITerminalNode[] DOT() { return GetTokens(LanguageParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(LanguageParser.DOT, i);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		public ITerminalNode LBRACKET() { return GetToken(LanguageParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(LanguageParser.RBRACKET, 0); }
		public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public ListMemoryValueContext(ListMemoryContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListMemoryValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListMemoryContext listMemory() {
		ListMemoryContext _localctx = new ListMemoryContext(Context, State);
		EnterRule(_localctx, 52, RULE_listMemory);
		try {
			_localctx = new ListMemoryValueContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 606; Match(VAR_PRIMARY);
			State = 607; Match(DOT);
			State = 608; Match(IDENTIFIER);
			State = 609; Match(LBRACKET);
			State = 612;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 610; Match(IDENTIFIER);
				}
				break;
			case NUMBER:
				{
				State = 611; number_integer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 614; Match(RBRACKET);
			State = 615; Match(DOT);
			State = 616; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
	 
		public ListContext() { }
		public virtual void CopyFrom(ListContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListValueContext : ListContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		public ITerminalNode LBRACKET() { return GetToken(LanguageParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(LanguageParser.RBRACKET, 0); }
		public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		public ListValueContext(ListContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 54, RULE_list);
		try {
			_localctx = new ListValueContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 618; Match(IDENTIFIER);
			State = 619; Match(LBRACKET);
			State = 622;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 620; Match(IDENTIFIER);
				}
				break;
			case NUMBER:
				{
				State = 621; number_integer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 624; Match(RBRACKET);
			State = 627;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 625; Match(DOT);
				State = 626; Match(IDENTIFIER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
	 
		public TextContext() { }
		public virtual void CopyFrom(TextContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringContext : TextContext {
		public ITerminalNode TEXT() { return GetToken(LanguageParser.TEXT, 0); }
		public StringContext(TextContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 56, RULE_text);
		try {
			_localctx = new StringContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 629; Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_integerContext : ParserRuleContext {
		public Number_integerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_integer; } }
	 
		public Number_integerContext() { }
		public virtual void CopyFrom(Number_integerContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberIntegerContext : Number_integerContext {
		public ITerminalNode NUMBER() { return GetToken(LanguageParser.NUMBER, 0); }
		public NumberIntegerContext(Number_integerContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Number_integerContext number_integer() {
		Number_integerContext _localctx = new Number_integerContext(Context, State);
		EnterRule(_localctx, 58, RULE_number_integer);
		try {
			_localctx = new NumberIntegerContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 631; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_decimalContext : ParserRuleContext {
		public Number_decimalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_decimal; } }
	 
		public Number_decimalContext() { }
		public virtual void CopyFrom(Number_decimalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberDecimalContext : Number_decimalContext {
		public ITerminalNode DECIMAL() { return GetToken(LanguageParser.DECIMAL, 0); }
		public NumberDecimalContext(Number_decimalContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Number_decimalContext number_decimal() {
		Number_decimalContext _localctx = new Number_decimalContext(Context, State);
		EnterRule(_localctx, 60, RULE_number_decimal);
		try {
			_localctx = new NumberDecimalContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 633; Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_unitContext : ParserRuleContext {
		public ITerminalNode YEAR() { return GetToken(LanguageParser.YEAR, 0); }
		public ITerminalNode MONTH() { return GetToken(LanguageParser.MONTH, 0); }
		public ITerminalNode DAY() { return GetToken(LanguageParser.DAY, 0); }
		public Date_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_unit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_unitContext date_unit() {
		Date_unitContext _localctx = new Date_unitContext(Context, State);
		EnterRule(_localctx, 62, RULE_date_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (YEAR - 75)) | (1L << (MONTH - 75)) | (1L << (DAY - 75)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return if_expression_sempred((If_expressionContext)_localctx, predIndex);
		case 14: return arithmetic_expression_sempred((Arithmetic_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool if_expression_sempred(If_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		}
		return true;
	}
	private bool arithmetic_expression_sempred(Arithmetic_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 6);
		case 5: return Precpred(Context, 5);
		case 6: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x62', '\x280', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x3', '\x2', '\a', '\x2', '\x44', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', 'G', '\v', '\x2', '\x3', '\x2', 
		'\x5', '\x2', 'J', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'Q', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'k', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'{', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x8F', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x9E', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\xA7', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xAB', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '\xB9', '\n', '\a', '\x3', '\b', 
		'\a', '\b', '\xBC', '\n', '\b', '\f', '\b', '\xE', '\b', '\xBF', '\v', 
		'\b', '\x3', '\t', '\a', '\t', '\xC2', '\n', '\t', '\f', '\t', '\xE', 
		'\t', '\xC5', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', '\xD5', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\xDD', '\n', '\n', '\f', 
		'\n', '\xE', '\n', '\xE0', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', '\xEA', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\a', '\xE', '\xF6', '\n', '\xE', '\f', '\xE', '\xE', 
		'\xE', '\xF9', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\x108', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x6', '\xF', '\x10D', '\n', '\xF', '\r', '\xF', '\xE', '\xF', 
		'\x10E', '\x3', '\xF', '\a', '\xF', '\x112', '\n', '\xF', '\f', '\xF', 
		'\xE', '\xF', '\x115', '\v', '\xF', '\x6', '\xF', '\x117', '\n', '\xF', 
		'\r', '\xF', '\xE', '\xF', '\x118', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x11D', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\x12C', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x139', 
		'\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x144', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\x14F', '\n', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\x163', '\n', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x177', '\n', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x18B', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\x19D', '\n', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x1A9', 
		'\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x1B2', '\n', '\xF', 
		'\f', '\xF', '\xE', '\xF', '\x1B5', '\v', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x1CA', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x1E2', '\n', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x216', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\x21F', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\a', '\x10', '\x230', '\n', '\x10', '\f', '\x10', 
		'\xE', '\x10', '\x233', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x5', '\x19', '\x251', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\x25B', '\n', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x267', 
		'\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', 
		'\x271', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', 
		'\x1D', '\x276', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x2', '\x4', '\x12', '\x1E', '\"', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x2', '\x6', '\x3', '\x2', 'G', 'L', '\x3', 
		'\x2', 'P', 'T', '\x3', '\x2', '\r', '\xE', '\x3', '\x2', 'M', 'O', '\x2', 
		'\x2C3', '\x2', '\x45', '\x3', '\x2', '\x2', '\x2', '\x4', 'P', '\x3', 
		'\x2', '\x2', '\x2', '\x6', 'j', '\x3', '\x2', '\x2', '\x2', '\b', '\xA6', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\xA8', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xE', '\xBD', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\xC3', '\x3', '\x2', '\x2', '\x2', '\x12', '\xD4', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\xEB', '\x3', '\x2', '\x2', '\x2', '\x18', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\xEF', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x215', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x21E', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x234', '\x3', '\x2', '\x2', '\x2', '\"', '\x236', '\x3', '\x2', 
		'\x2', '\x2', '$', '\x238', '\x3', '\x2', '\x2', '\x2', '&', '\x23A', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x23C', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x23E', '\x3', '\x2', '\x2', '\x2', ',', '\x240', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x242', '\x3', '\x2', '\x2', '\x2', '\x30', '\x250', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x252', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x256', '\x3', '\x2', '\x2', '\x2', '\x36', '\x260', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x26C', '\x3', '\x2', '\x2', '\x2', ':', '\x277', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x279', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x27B', '\x3', '\x2', '\x2', '\x2', '@', '\x27D', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x44', '\x5', '\x4', '\x3', '\x2', '\x43', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x44', 'G', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'I', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'J', '\x5', '\n', '\x6', '\x2', 'I', 'H', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', '\x3', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'Q', '\x5', '\b', '\x5', '\x2', 'L', 'Q', '\x5', 
		'\x6', '\x4', '\x2', 'M', 'Q', '\x5', '\x1E', '\x10', '\x2', 'N', 'Q', 
		'\x5', '\f', '\a', '\x2', 'O', 'Q', '\x5', '\x1A', '\xE', '\x2', 'P', 
		'K', '\x3', '\x2', '\x2', '\x2', 'P', 'L', '\x3', '\x2', '\x2', '\x2', 
		'P', 'M', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 
		'P', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', '\x5', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\a', 'U', '\x2', '\x2', 'S', 'T', '\a', '^', '\x2', 
		'\x2', 'T', 'U', '\a', 'P', '\x2', '\x2', 'U', 'V', '\x5', '\x1E', '\x10', 
		'\x2', 'V', 'W', '\a', '\x61', '\x2', '\x2', 'W', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'Y', '\a', 'U', '\x2', '\x2', 'Y', 'Z', '\a', '^', '\x2', 
		'\x2', 'Z', '[', '\a', 'P', '\x2', '\x2', '[', '\\', '\x5', '\x14', '\v', 
		'\x2', '\\', ']', '\a', '\x61', '\x2', '\x2', ']', 'k', '\x3', '\x2', 
		'\x2', '\x2', '^', '_', '\a', 'V', '\x2', '\x2', '_', '`', '\a', '^', 
		'\x2', '\x2', '`', '\x61', '\a', 'P', '\x2', '\x2', '\x61', '\x62', '\x5', 
		'\x1E', '\x10', '\x2', '\x62', '\x63', '\a', '\x61', '\x2', '\x2', '\x63', 
		'k', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', 'V', '\x2', '\x2', 
		'\x65', '\x66', '\a', '^', '\x2', '\x2', '\x66', 'g', '\a', 'P', '\x2', 
		'\x2', 'g', 'h', '\a', '<', '\x2', '\x2', 'h', 'i', '\a', '=', '\x2', 
		'\x2', 'i', 'k', '\a', '\x61', '\x2', '\x2', 'j', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'X', '\x3', '\x2', '\x2', '\x2', 'j', '^', '\x3', '\x2', '\x2', 
		'\x2', 'j', '\x64', '\x3', '\x2', '\x2', '\x2', 'k', '\a', '\x3', '\x2', 
		'\x2', '\x2', 'l', 'm', '\a', '^', '\x2', '\x2', 'm', 'n', '\a', 'P', 
		'\x2', '\x2', 'n', 'o', '\x5', '\x14', '\v', '\x2', 'o', 'p', '\a', '\x61', 
		'\x2', '\x2', 'p', '\xA7', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\a', 
		'^', '\x2', '\x2', 'r', 's', '\x5', '\x18', '\r', '\x2', 's', 't', '\x5', 
		'\x1E', '\x10', '\x2', 't', 'u', '\a', '\x61', '\x2', '\x2', 'u', '\xA7', 
		'\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', '^', '\x2', '\x2', 'w', 'z', 
		'\a', '<', '\x2', '\x2', 'x', '{', '\a', '^', '\x2', '\x2', 'y', '{', 
		'\x5', '<', '\x1F', '\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', 'z', 
		'y', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', 
		'|', '}', '\a', '=', '\x2', '\x2', '}', '~', '\a', 'Y', '\x2', '\x2', 
		'~', '\x7F', '\a', '^', '\x2', '\x2', '\x7F', '\x80', '\x5', '\x18', '\r', 
		'\x2', '\x80', '\x81', '\x5', '\x1E', '\x10', '\x2', '\x81', '\x82', '\a', 
		'\x61', '\x2', '\x2', '\x82', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x84', '\a', '`', '\x2', '\x2', '\x84', '\x85', '\a', 'Y', '\x2', '\x2', 
		'\x85', '\x86', '\a', '^', '\x2', '\x2', '\x86', '\x87', '\x5', '\x18', 
		'\r', '\x2', '\x87', '\x88', '\x5', '\x1E', '\x10', '\x2', '\x88', '\x89', 
		'\a', '\x61', '\x2', '\x2', '\x89', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x8B', '\a', '`', '\x2', '\x2', '\x8B', '\x8E', '\a', '<', '\x2', 
		'\x2', '\x8C', '\x8F', '\a', '^', '\x2', '\x2', '\x8D', '\x8F', '\x5', 
		'<', '\x1F', '\x2', '\x8E', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x91', '\a', '=', '\x2', '\x2', '\x91', '\x92', '\a', 
		'Y', '\x2', '\x2', '\x92', '\x93', '\a', '^', '\x2', '\x2', '\x93', '\x94', 
		'\x5', '\x18', '\r', '\x2', '\x94', '\x95', '\x5', '\x1E', '\x10', '\x2', 
		'\x95', '\x96', '\a', '\x61', '\x2', '\x2', '\x96', '\xA7', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x98', '\a', '`', '\x2', '\x2', '\x98', '\x99', 
		'\a', 'Y', '\x2', '\x2', '\x99', '\x9A', '\a', '^', '\x2', '\x2', '\x9A', 
		'\x9D', '\a', '<', '\x2', '\x2', '\x9B', '\x9E', '\a', '^', '\x2', '\x2', 
		'\x9C', '\x9E', '\x5', '<', '\x1F', '\x2', '\x9D', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\x9D', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\a', '=', '\x2', '\x2', '\xA0', 
		'\xA1', '\a', 'Y', '\x2', '\x2', '\xA1', '\xA2', '\a', '^', '\x2', '\x2', 
		'\xA2', '\xA3', '\x5', '\x18', '\r', '\x2', '\xA3', '\xA4', '\x5', '\x1E', 
		'\x10', '\x2', '\xA4', '\xA5', '\a', '\x61', '\x2', '\x2', '\xA5', '\xA7', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', 'l', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'q', '\x3', '\x2', '\x2', '\x2', '\xA6', 'v', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\x83', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\x97', '\x3', '\x2', '\x2', '\x2', '\xA7', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\xAA', '\a', 'W', '\x2', '\x2', '\xA9', 
		'\xAB', '\x5', '\x1E', '\x10', '\x2', '\xAA', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '\xAD', '\a', '\x61', '\x2', '\x2', '\xAD', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\a', '\x5', '\x2', 
		'\x2', '\xAF', '\xB0', '\x5', '\x12', '\n', '\x2', '\xB0', '\xB1', '\a', 
		'>', '\x2', '\x2', '\xB1', '\xB2', '\x5', '\xE', '\b', '\x2', '\xB2', 
		'\xB8', '\a', '?', '\x2', '\x2', '\xB3', '\xB4', '\a', '\x6', '\x2', '\x2', 
		'\xB4', '\xB5', '\a', '>', '\x2', '\x2', '\xB5', '\xB6', '\x5', '\x10', 
		'\t', '\x2', '\xB6', '\xB7', '\a', '?', '\x2', '\x2', '\xB7', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\xB8', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB9', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\xBA', '\xBC', '\x5', '\x4', '\x3', '\x2', '\xBB', '\xBA', 
		'\x3', '\x2', '\x2', '\x2', '\xBC', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\xBD', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\xF', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\xC0', '\xC2', '\x5', '\x4', '\x3', '\x2', 
		'\xC1', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC5', '\x3', '\x2', 
		'\x2', '\x2', '\xC3', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\xC5', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\b', '\n', 
		'\x1', '\x2', '\xC7', '\xD5', '\x5', '\x14', '\v', '\x2', '\xC8', '\xC9', 
		'\a', '\f', '\x2', '\x2', '\xC9', '\xCA', '\a', '@', '\x2', '\x2', '\xCA', 
		'\xCB', '\x5', '\x12', '\n', '\x2', '\xCB', '\xCC', '\a', '\x41', '\x2', 
		'\x2', '\xCC', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\a', 
		'@', '\x2', '\x2', '\xCE', '\xCF', '\x5', '\x12', '\n', '\x2', '\xCF', 
		'\xD0', '\a', '\x41', '\x2', '\x2', '\xD0', '\xD5', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xD2', '\a', '\f', '\x2', '\x2', '\xD2', '\xD5', '\x5', 
		'\x30', '\x19', '\x2', '\xD3', '\xD5', '\x5', '\x30', '\x19', '\x2', '\xD4', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xC8', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\xD4', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD5', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\f', '\t', '\x2', 
		'\x2', '\xD7', '\xD8', '\a', '\n', '\x2', '\x2', '\xD8', '\xDD', '\x5', 
		'\x12', '\n', '\n', '\xD9', '\xDA', '\f', '\b', '\x2', '\x2', '\xDA', 
		'\xDB', '\a', '\v', '\x2', '\x2', '\xDB', '\xDD', '\x5', '\x12', '\n', 
		'\t', '\xDC', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\xDD', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xDF', '\x13', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xDE', '\x3', 
		'\x2', '\x2', '\x2', '\xE1', '\xE2', '\x5', '\x1E', '\x10', '\x2', '\xE2', 
		'\xE3', '\x5', '\x16', '\f', '\x2', '\xE3', '\xE4', '\x5', '\x1E', '\x10', 
		'\x2', '\xE4', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\a', 
		'@', '\x2', '\x2', '\xE6', '\xE7', '\x5', '\x14', '\v', '\x2', '\xE7', 
		'\xE8', '\a', '\x41', '\x2', '\x2', '\xE8', '\xEA', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\x15', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xEC', '\t', '\x2', '\x2', '\x2', '\xEC', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xEE', '\t', '\x3', '\x2', '\x2', '\xEE', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\xF0', '\a', ';', '\x2', '\x2', '\xF0', 
		'\xF1', '\a', '@', '\x2', '\x2', '\xF1', '\xF2', '\x5', '\x12', '\n', 
		'\x2', '\xF2', '\xF3', '\a', '\x41', '\x2', '\x2', '\xF3', '\xF7', '\a', 
		'>', '\x2', '\x2', '\xF4', '\xF6', '\x5', '\x4', '\x3', '\x2', '\xF5', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\xF7', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', '\a', '?', '\x2', 
		'\x2', '\xFB', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\a', 
		'\x1D', '\x2', '\x2', '\xFD', '\xFE', '\a', '@', '\x2', '\x2', '\xFE', 
		'\xFF', '\x5', ' ', '\x11', '\x2', '\xFF', '\x100', '\a', 'X', '\x2', 
		'\x2', '\x100', '\x101', '\x5', '\"', '\x12', '\x2', '\x101', '\x102', 
		'\a', 'X', '\x2', '\x2', '\x102', '\x103', '\x5', '*', '\x16', '\x2', 
		'\x103', '\x104', '\a', 'X', '\x2', '\x2', '\x104', '\x107', '\x5', '(', 
		'\x15', '\x2', '\x105', '\x106', '\a', 'X', '\x2', '\x2', '\x106', '\x108', 
		'\x5', ',', '\x17', '\x2', '\x107', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\x108', '\x3', '\x2', '\x2', '\x2', '\x108', '\x11C', '\x3', 
		'\x2', '\x2', '\x2', '\x109', '\x10A', '\a', 'X', '\x2', '\x2', '\x10A', 
		'\x116', '\a', '<', '\x2', '\x2', '\x10B', '\x10D', '\x5', ':', '\x1E', 
		'\x2', '\x10C', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', 
		'\x3', '\x2', '\x2', '\x2', '\x10E', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x113', '\x3', 
		'\x2', '\x2', '\x2', '\x110', '\x112', '\a', 'X', '\x2', '\x2', '\x111', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x112', '\x115', '\x3', '\x2', '\x2', 
		'\x2', '\x113', '\x111', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x117', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x113', '\x3', '\x2', '\x2', '\x2', '\x116', '\x10C', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x118', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x116', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', '\x3', '\x2', '\x2', 
		'\x2', '\x119', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', 
		'\a', '=', '\x2', '\x2', '\x11B', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\x109', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11E', 
		'\x11F', '\a', '\x41', '\x2', '\x2', '\x11F', '\x216', '\x3', '\x2', '\x2', 
		'\x2', '\x120', '\x121', '\a', '\x1C', '\x2', '\x2', '\x121', '\x122', 
		'\a', '@', '\x2', '\x2', '\x122', '\x123', '\x5', ' ', '\x11', '\x2', 
		'\x123', '\x124', '\a', 'X', '\x2', '\x2', '\x124', '\x125', '\x5', '\"', 
		'\x12', '\x2', '\x125', '\x126', '\a', 'X', '\x2', '\x2', '\x126', '\x127', 
		'\x5', '*', '\x16', '\x2', '\x127', '\x128', '\a', 'X', '\x2', '\x2', 
		'\x128', '\x12B', '\x5', '(', '\x15', '\x2', '\x129', '\x12A', '\a', 'X', 
		'\x2', '\x2', '\x12A', '\x12C', '\x5', '$', '\x13', '\x2', '\x12B', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\a', 
		'\x41', '\x2', '\x2', '\x12E', '\x216', '\x3', '\x2', '\x2', '\x2', '\x12F', 
		'\x130', '\a', '\x1E', '\x2', '\x2', '\x130', '\x131', '\a', '@', '\x2', 
		'\x2', '\x131', '\x132', '\x5', '\"', '\x12', '\x2', '\x132', '\x133', 
		'\a', 'X', '\x2', '\x2', '\x133', '\x134', '\x5', '&', '\x14', '\x2', 
		'\x134', '\x135', '\a', 'X', '\x2', '\x2', '\x135', '\x138', '\x5', '$', 
		'\x13', '\x2', '\x136', '\x137', '\a', 'X', '\x2', '\x2', '\x137', '\x139', 
		'\x5', '(', '\x15', '\x2', '\x138', '\x136', '\x3', '\x2', '\x2', '\x2', 
		'\x138', '\x139', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x13B', '\a', '\x41', '\x2', '\x2', '\x13B', 
		'\x216', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', '\a', '\x1F', '\x2', 
		'\x2', '\x13D', '\x13E', '\a', '@', '\x2', '\x2', '\x13E', '\x13F', '\x5', 
		':', '\x1E', '\x2', '\x13F', '\x140', '\a', 'X', '\x2', '\x2', '\x140', 
		'\x143', '\x5', '<', '\x1F', '\x2', '\x141', '\x142', '\a', 'X', '\x2', 
		'\x2', '\x142', '\x144', '\x5', '<', '\x1F', '\x2', '\x143', '\x141', 
		'\x3', '\x2', '\x2', '\x2', '\x143', '\x144', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '\x145', '\x3', '\x2', '\x2', '\x2', '\x145', '\x146', '\a', 
		'\x41', '\x2', '\x2', '\x146', '\x216', '\x3', '\x2', '\x2', '\x2', '\x147', 
		'\x148', '\a', '\x16', '\x2', '\x2', '\x148', '\x149', '\a', '@', '\x2', 
		'\x2', '\x149', '\x14A', '\a', '`', '\x2', '\x2', '\x14A', '\x14B', '\a', 
		'Y', '\x2', '\x2', '\x14B', '\x14E', '\a', '^', '\x2', '\x2', '\x14C', 
		'\x14D', '\a', 'Y', '\x2', '\x2', '\x14D', '\x14F', '\a', '^', '\x2', 
		'\x2', '\x14E', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', 
		'\x3', '\x2', '\x2', '\x2', '\x14F', '\x150', '\x3', '\x2', '\x2', '\x2', 
		'\x150', '\x216', '\a', '\x41', '\x2', '\x2', '\x151', '\x152', '\a', 
		'\x16', '\x2', '\x2', '\x152', '\x153', '\a', '@', '\x2', '\x2', '\x153', 
		'\x154', '\a', '^', '\x2', '\x2', '\x154', '\x155', '\a', 'Y', '\x2', 
		'\x2', '\x155', '\x156', '\a', '^', '\x2', '\x2', '\x156', '\x216', '\a', 
		'\x41', '\x2', '\x2', '\x157', '\x158', '\a', '\x16', '\x2', '\x2', '\x158', 
		'\x159', '\a', '@', '\x2', '\x2', '\x159', '\x15A', '\a', '^', '\x2', 
		'\x2', '\x15A', '\x216', '\a', '\x41', '\x2', '\x2', '\x15B', '\x15C', 
		'\a', '\x17', '\x2', '\x2', '\x15C', '\x15D', '\a', '@', '\x2', '\x2', 
		'\x15D', '\x15E', '\a', '`', '\x2', '\x2', '\x15E', '\x15F', '\a', 'Y', 
		'\x2', '\x2', '\x15F', '\x162', '\a', '^', '\x2', '\x2', '\x160', '\x161', 
		'\a', 'Y', '\x2', '\x2', '\x161', '\x163', '\a', '^', '\x2', '\x2', '\x162', 
		'\x160', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', '\x3', '\x2', '\x2', 
		'\x2', '\x163', '\x164', '\x3', '\x2', '\x2', '\x2', '\x164', '\x216', 
		'\a', '\x41', '\x2', '\x2', '\x165', '\x166', '\a', '\x17', '\x2', '\x2', 
		'\x166', '\x167', '\a', '@', '\x2', '\x2', '\x167', '\x168', '\a', '^', 
		'\x2', '\x2', '\x168', '\x169', '\a', 'Y', '\x2', '\x2', '\x169', '\x16A', 
		'\a', '^', '\x2', '\x2', '\x16A', '\x216', '\a', '\x41', '\x2', '\x2', 
		'\x16B', '\x16C', '\a', '\x17', '\x2', '\x2', '\x16C', '\x16D', '\a', 
		'@', '\x2', '\x2', '\x16D', '\x16E', '\a', '^', '\x2', '\x2', '\x16E', 
		'\x216', '\a', '\x41', '\x2', '\x2', '\x16F', '\x170', '\a', '\x18', '\x2', 
		'\x2', '\x170', '\x171', '\a', '@', '\x2', '\x2', '\x171', '\x172', '\a', 
		'`', '\x2', '\x2', '\x172', '\x173', '\a', 'Y', '\x2', '\x2', '\x173', 
		'\x176', '\a', '^', '\x2', '\x2', '\x174', '\x175', '\a', 'Y', '\x2', 
		'\x2', '\x175', '\x177', '\a', '^', '\x2', '\x2', '\x176', '\x174', '\x3', 
		'\x2', '\x2', '\x2', '\x176', '\x177', '\x3', '\x2', '\x2', '\x2', '\x177', 
		'\x178', '\x3', '\x2', '\x2', '\x2', '\x178', '\x216', '\a', '\x41', '\x2', 
		'\x2', '\x179', '\x17A', '\a', '\x18', '\x2', '\x2', '\x17A', '\x17B', 
		'\a', '@', '\x2', '\x2', '\x17B', '\x17C', '\a', '^', '\x2', '\x2', '\x17C', 
		'\x17D', '\a', 'Y', '\x2', '\x2', '\x17D', '\x17E', '\a', '^', '\x2', 
		'\x2', '\x17E', '\x216', '\a', '\x41', '\x2', '\x2', '\x17F', '\x180', 
		'\a', '\x18', '\x2', '\x2', '\x180', '\x181', '\a', '@', '\x2', '\x2', 
		'\x181', '\x182', '\a', '^', '\x2', '\x2', '\x182', '\x216', '\a', '\x41', 
		'\x2', '\x2', '\x183', '\x184', '\a', '\x19', '\x2', '\x2', '\x184', '\x185', 
		'\a', '@', '\x2', '\x2', '\x185', '\x186', '\a', '`', '\x2', '\x2', '\x186', 
		'\x187', '\a', 'Y', '\x2', '\x2', '\x187', '\x18A', '\a', '^', '\x2', 
		'\x2', '\x188', '\x189', '\a', 'Y', '\x2', '\x2', '\x189', '\x18B', '\a', 
		'^', '\x2', '\x2', '\x18A', '\x188', '\x3', '\x2', '\x2', '\x2', '\x18A', 
		'\x18B', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18C', '\x3', '\x2', '\x2', 
		'\x2', '\x18C', '\x216', '\a', '\x41', '\x2', '\x2', '\x18D', '\x18E', 
		'\a', '\x19', '\x2', '\x2', '\x18E', '\x18F', '\a', '@', '\x2', '\x2', 
		'\x18F', '\x190', '\a', '^', '\x2', '\x2', '\x190', '\x191', '\a', 'Y', 
		'\x2', '\x2', '\x191', '\x192', '\a', '^', '\x2', '\x2', '\x192', '\x216', 
		'\a', '\x41', '\x2', '\x2', '\x193', '\x194', '\a', '\x19', '\x2', '\x2', 
		'\x194', '\x195', '\a', '@', '\x2', '\x2', '\x195', '\x196', '\a', '^', 
		'\x2', '\x2', '\x196', '\x216', '\a', '\x41', '\x2', '\x2', '\x197', '\x198', 
		'\a', '\x1A', '\x2', '\x2', '\x198', '\x199', '\a', '@', '\x2', '\x2', 
		'\x199', '\x19C', '\a', '`', '\x2', '\x2', '\x19A', '\x19B', '\a', 'Y', 
		'\x2', '\x2', '\x19B', '\x19D', '\a', '^', '\x2', '\x2', '\x19C', '\x19A', 
		'\x3', '\x2', '\x2', '\x2', '\x19C', '\x19D', '\x3', '\x2', '\x2', '\x2', 
		'\x19D', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x216', '\a', 
		'\x41', '\x2', '\x2', '\x19F', '\x1A0', '\a', '\x1A', '\x2', '\x2', '\x1A0', 
		'\x1A1', '\a', '@', '\x2', '\x2', '\x1A1', '\x1A2', '\a', '^', '\x2', 
		'\x2', '\x1A2', '\x216', '\a', '\x41', '\x2', '\x2', '\x1A3', '\x1A4', 
		'\a', '\"', '\x2', '\x2', '\x1A4', '\x1A5', '\a', '@', '\x2', '\x2', '\x1A5', 
		'\x1A8', '\x5', '\x1E', '\x10', '\x2', '\x1A6', '\x1A7', '\a', 'X', '\x2', 
		'\x2', '\x1A7', '\x1A9', '\x5', '\x1E', '\x10', '\x2', '\x1A8', '\x1A6', 
		'\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', '\x3', '\x2', '\x2', '\x2', 
		'\x1A9', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\a', 
		'\x41', '\x2', '\x2', '\x1AB', '\x216', '\x3', '\x2', '\x2', '\x2', '\x1AC', 
		'\x1AD', '\a', '\x1B', '\x2', '\x2', '\x1AD', '\x1AE', '\a', '@', '\x2', 
		'\x2', '\x1AE', '\x1B3', '\x5', '\x30', '\x19', '\x2', '\x1AF', '\x1B0', 
		'\a', 'X', '\x2', '\x2', '\x1B0', '\x1B2', '\x5', '\x30', '\x19', '\x2', 
		'\x1B1', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B5', '\x3', 
		'\x2', '\x2', '\x2', '\x1B3', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B3', 
		'\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B6', '\x3', '\x2', '\x2', 
		'\x2', '\x1B5', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B7', 
		'\a', '\x41', '\x2', '\x2', '\x1B7', '\x216', '\x3', '\x2', '\x2', '\x2', 
		'\x1B8', '\x1B9', '\a', '\x15', '\x2', '\x2', '\x1B9', '\x1BA', '\a', 
		'@', '\x2', '\x2', '\x1BA', '\x1BB', '\x5', '\x1E', '\x10', '\x2', '\x1BB', 
		'\x1BC', '\a', '\x41', '\x2', '\x2', '\x1BC', '\x216', '\x3', '\x2', '\x2', 
		'\x2', '\x1BD', '\x1BE', '\a', '\x14', '\x2', '\x2', '\x1BE', '\x1BF', 
		'\a', '@', '\x2', '\x2', '\x1BF', '\x1C0', '\x5', '\x1E', '\x10', '\x2', 
		'\x1C0', '\x1C1', '\a', '\x41', '\x2', '\x2', '\x1C1', '\x216', '\x3', 
		'\x2', '\x2', '\x2', '\x1C2', '\x1C3', '\a', '\x12', '\x2', '\x2', '\x1C3', 
		'\x1C4', '\a', '@', '\x2', '\x2', '\x1C4', '\x1C5', '\a', '`', '\x2', 
		'\x2', '\x1C5', '\x1C6', '\a', 'Y', '\x2', '\x2', '\x1C6', '\x1C9', '\a', 
		'^', '\x2', '\x2', '\x1C7', '\x1C8', '\a', 'Y', '\x2', '\x2', '\x1C8', 
		'\x1CA', '\a', '^', '\x2', '\x2', '\x1C9', '\x1C7', '\x3', '\x2', '\x2', 
		'\x2', '\x1C9', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CB', 
		'\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CC', '\a', 'X', '\x2', '\x2', 
		'\x1CC', '\x1CD', '\x5', '\x1E', '\x10', '\x2', '\x1CD', '\x1CE', '\x5', 
		'\x16', '\f', '\x2', '\x1CE', '\x1CF', '\x5', '\x1E', '\x10', '\x2', '\x1CF', 
		'\x1D0', '\a', '\x41', '\x2', '\x2', '\x1D0', '\x216', '\x3', '\x2', '\x2', 
		'\x2', '\x1D1', '\x1D2', '\a', '\x12', '\x2', '\x2', '\x1D2', '\x1D3', 
		'\a', '@', '\x2', '\x2', '\x1D3', '\x1D4', '\a', '^', '\x2', '\x2', '\x1D4', 
		'\x1D5', '\a', 'Y', '\x2', '\x2', '\x1D5', '\x1D6', '\a', '^', '\x2', 
		'\x2', '\x1D6', '\x1D7', '\a', 'X', '\x2', '\x2', '\x1D7', '\x1D8', '\x5', 
		'\x1E', '\x10', '\x2', '\x1D8', '\x1D9', '\x5', '\x16', '\f', '\x2', '\x1D9', 
		'\x1DA', '\x5', '\x1E', '\x10', '\x2', '\x1DA', '\x1DB', '\a', '\x41', 
		'\x2', '\x2', '\x1DB', '\x216', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DD', 
		'\a', '\x13', '\x2', '\x2', '\x1DD', '\x1DE', '\a', '@', '\x2', '\x2', 
		'\x1DE', '\x1E1', '\a', '`', '\x2', '\x2', '\x1DF', '\x1E0', '\a', 'Y', 
		'\x2', '\x2', '\x1E0', '\x1E2', '\a', '^', '\x2', '\x2', '\x1E1', '\x1DF', 
		'\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E2', '\x3', '\x2', '\x2', '\x2', 
		'\x1E2', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E4', '\a', 
		'X', '\x2', '\x2', '\x1E4', '\x1E5', '\x5', '\x1E', '\x10', '\x2', '\x1E5', 
		'\x1E6', '\x5', '\x16', '\f', '\x2', '\x1E6', '\x1E7', '\x5', '\x1E', 
		'\x10', '\x2', '\x1E7', '\x1E8', '\a', '\x41', '\x2', '\x2', '\x1E8', 
		'\x216', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EA', '\a', '\x13', '\x2', 
		'\x2', '\x1EA', '\x1EB', '\a', '@', '\x2', '\x2', '\x1EB', '\x1EC', '\a', 
		'^', '\x2', '\x2', '\x1EC', '\x1ED', '\a', 'X', '\x2', '\x2', '\x1ED', 
		'\x1EE', '\x5', '\x1E', '\x10', '\x2', '\x1EE', '\x1EF', '\x5', '\x16', 
		'\f', '\x2', '\x1EF', '\x1F0', '\x5', '\x1E', '\x10', '\x2', '\x1F0', 
		'\x1F1', '\a', '\x41', '\x2', '\x2', '\x1F1', '\x216', '\x3', '\x2', '\x2', 
		'\x2', '\x1F2', '\x1F3', '\a', '\x11', '\x2', '\x2', '\x1F3', '\x1F4', 
		'\a', '@', '\x2', '\x2', '\x1F4', '\x1F5', '\x5', '\x1E', '\x10', '\x2', 
		'\x1F5', '\x1F6', '\a', '\x41', '\x2', '\x2', '\x1F6', '\x216', '\x3', 
		'\x2', '\x2', '\x2', '\x1F7', '\x1F8', '\a', '#', '\x2', '\x2', '\x1F8', 
		'\x1F9', '\a', '@', '\x2', '\x2', '\x1F9', '\x216', '\a', '\x41', '\x2', 
		'\x2', '\x1FA', '\x1FB', '\a', '$', '\x2', '\x2', '\x1FB', '\x1FC', '\a', 
		'@', '\x2', '\x2', '\x1FC', '\x216', '\a', '\x41', '\x2', '\x2', '\x1FD', 
		'\x1FE', '\a', '%', '\x2', '\x2', '\x1FE', '\x1FF', '\a', '@', '\x2', 
		'\x2', '\x1FF', '\x200', '\x5', '\x30', '\x19', '\x2', '\x200', '\x201', 
		'\a', 'X', '\x2', '\x2', '\x201', '\x202', '\x5', '\x30', '\x19', '\x2', 
		'\x202', '\x203', '\a', 'X', '\x2', '\x2', '\x203', '\x204', '\x5', '@', 
		'!', '\x2', '\x204', '\x205', '\a', '\x41', '\x2', '\x2', '\x205', '\x216', 
		'\x3', '\x2', '\x2', '\x2', '\x206', '\x207', '\a', '(', '\x2', '\x2', 
		'\x207', '\x208', '\a', '@', '\x2', '\x2', '\x208', '\x209', '\x5', '\x30', 
		'\x19', '\x2', '\x209', '\x20A', '\a', '\x41', '\x2', '\x2', '\x20A', 
		'\x216', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x20C', '\a', '&', '\x2', 
		'\x2', '\x20C', '\x20D', '\a', '@', '\x2', '\x2', '\x20D', '\x20E', '\x5', 
		'\x30', '\x19', '\x2', '\x20E', '\x20F', '\a', '\x41', '\x2', '\x2', '\x20F', 
		'\x216', '\x3', '\x2', '\x2', '\x2', '\x210', '\x211', '\a', '\'', '\x2', 
		'\x2', '\x211', '\x212', '\a', '@', '\x2', '\x2', '\x212', '\x213', '\x5', 
		'\x30', '\x19', '\x2', '\x213', '\x214', '\a', '\x41', '\x2', '\x2', '\x214', 
		'\x216', '\x3', '\x2', '\x2', '\x2', '\x215', '\xFC', '\x3', '\x2', '\x2', 
		'\x2', '\x215', '\x120', '\x3', '\x2', '\x2', '\x2', '\x215', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', '\x215', '\x13C', '\x3', '\x2', '\x2', '\x2', 
		'\x215', '\x147', '\x3', '\x2', '\x2', '\x2', '\x215', '\x151', '\x3', 
		'\x2', '\x2', '\x2', '\x215', '\x157', '\x3', '\x2', '\x2', '\x2', '\x215', 
		'\x15B', '\x3', '\x2', '\x2', '\x2', '\x215', '\x165', '\x3', '\x2', '\x2', 
		'\x2', '\x215', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x215', '\x16F', 
		'\x3', '\x2', '\x2', '\x2', '\x215', '\x179', '\x3', '\x2', '\x2', '\x2', 
		'\x215', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x215', '\x183', '\x3', 
		'\x2', '\x2', '\x2', '\x215', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x215', 
		'\x193', '\x3', '\x2', '\x2', '\x2', '\x215', '\x197', '\x3', '\x2', '\x2', 
		'\x2', '\x215', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x215', '\x1A3', 
		'\x3', '\x2', '\x2', '\x2', '\x215', '\x1AC', '\x3', '\x2', '\x2', '\x2', 
		'\x215', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x215', '\x1BD', '\x3', 
		'\x2', '\x2', '\x2', '\x215', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x215', 
		'\x1D1', '\x3', '\x2', '\x2', '\x2', '\x215', '\x1DC', '\x3', '\x2', '\x2', 
		'\x2', '\x215', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x215', '\x1F2', 
		'\x3', '\x2', '\x2', '\x2', '\x215', '\x1F7', '\x3', '\x2', '\x2', '\x2', 
		'\x215', '\x1FA', '\x3', '\x2', '\x2', '\x2', '\x215', '\x1FD', '\x3', 
		'\x2', '\x2', '\x2', '\x215', '\x206', '\x3', '\x2', '\x2', '\x2', '\x215', 
		'\x20B', '\x3', '\x2', '\x2', '\x2', '\x215', '\x210', '\x3', '\x2', '\x2', 
		'\x2', '\x216', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x217', '\x218', 
		'\b', '\x10', '\x1', '\x2', '\x218', '\x219', '\a', '@', '\x2', '\x2', 
		'\x219', '\x21A', '\x5', '\x1E', '\x10', '\x2', '\x21A', '\x21B', '\a', 
		'\x41', '\x2', '\x2', '\x21B', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x21C', 
		'\x21F', '\x5', '\x1C', '\xF', '\x2', '\x21D', '\x21F', '\x5', '\x30', 
		'\x19', '\x2', '\x21E', '\x217', '\x3', '\x2', '\x2', '\x2', '\x21E', 
		'\x21C', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x21D', '\x3', '\x2', '\x2', 
		'\x2', '\x21F', '\x231', '\x3', '\x2', '\x2', '\x2', '\x220', '\x221', 
		'\f', '\n', '\x2', '\x2', '\x221', '\x222', '\a', '\x42', '\x2', '\x2', 
		'\x222', '\x230', '\x5', '\x1E', '\x10', '\v', '\x223', '\x224', '\f', 
		'\t', '\x2', '\x2', '\x224', '\x225', '\a', '\x43', '\x2', '\x2', '\x225', 
		'\x230', '\x5', '\x1E', '\x10', '\n', '\x226', '\x227', '\f', '\b', '\x2', 
		'\x2', '\x227', '\x228', '\a', '\x44', '\x2', '\x2', '\x228', '\x230', 
		'\x5', '\x1E', '\x10', '\t', '\x229', '\x22A', '\f', '\a', '\x2', '\x2', 
		'\x22A', '\x22B', '\a', '\x45', '\x2', '\x2', '\x22B', '\x230', '\x5', 
		'\x1E', '\x10', '\b', '\x22C', '\x22D', '\f', '\x6', '\x2', '\x2', '\x22D', 
		'\x22E', '\a', '\x46', '\x2', '\x2', '\x22E', '\x230', '\x5', '\x1E', 
		'\x10', '\a', '\x22F', '\x220', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x223', 
		'\x3', '\x2', '\x2', '\x2', '\x22F', '\x226', '\x3', '\x2', '\x2', '\x2', 
		'\x22F', '\x229', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x22C', '\x3', 
		'\x2', '\x2', '\x2', '\x230', '\x233', '\x3', '\x2', '\x2', '\x2', '\x231', 
		'\x22F', '\x3', '\x2', '\x2', '\x2', '\x231', '\x232', '\x3', '\x2', '\x2', 
		'\x2', '\x232', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x233', '\x231', 
		'\x3', '\x2', '\x2', '\x2', '\x234', '\x235', '\x5', ':', '\x1E', '\x2', 
		'\x235', '!', '\x3', '\x2', '\x2', '\x2', '\x236', '\x237', '\x5', ':', 
		'\x1E', '\x2', '\x237', '#', '\x3', '\x2', '\x2', '\x2', '\x238', '\x239', 
		'\x5', ':', '\x1E', '\x2', '\x239', '%', '\x3', '\x2', '\x2', '\x2', '\x23A', 
		'\x23B', '\x5', ':', '\x1E', '\x2', '\x23B', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x23C', '\x23D', '\x5', '<', '\x1F', '\x2', '\x23D', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x23E', '\x23F', '\x5', ':', '\x1E', '\x2', '\x23F', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x240', '\x241', '\x5', ':', '\x1E', 
		'\x2', '\x241', '-', '\x3', '\x2', '\x2', '\x2', '\x242', '\x243', '\x5', 
		':', '\x1E', '\x2', '\x243', '/', '\x3', '\x2', '\x2', '\x2', '\x244', 
		'\x251', '\t', '\x4', '\x2', '\x2', '\x245', '\x251', '\x5', '>', ' ', 
		'\x2', '\x246', '\x251', '\x5', '<', '\x1F', '\x2', '\x247', '\x251', 
		'\x5', ':', '\x1E', '\x2', '\x248', '\x251', '\a', ']', '\x2', '\x2', 
		'\x249', '\x251', '\a', '^', '\x2', '\x2', '\x24A', '\x251', '\x5', '\x38', 
		'\x1D', '\x2', '\x24B', '\x251', '\a', '`', '\x2', '\x2', '\x24C', '\x251', 
		'\x5', '\x32', '\x1A', '\x2', '\x24D', '\x251', '\x5', '\x36', '\x1C', 
		'\x2', '\x24E', '\x251', '\x5', '\x34', '\x1B', '\x2', '\x24F', '\x251', 
		'\a', '\xF', '\x2', '\x2', '\x250', '\x244', '\x3', '\x2', '\x2', '\x2', 
		'\x250', '\x245', '\x3', '\x2', '\x2', '\x2', '\x250', '\x246', '\x3', 
		'\x2', '\x2', '\x2', '\x250', '\x247', '\x3', '\x2', '\x2', '\x2', '\x250', 
		'\x248', '\x3', '\x2', '\x2', '\x2', '\x250', '\x249', '\x3', '\x2', '\x2', 
		'\x2', '\x250', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x250', '\x24B', 
		'\x3', '\x2', '\x2', '\x2', '\x250', '\x24C', '\x3', '\x2', '\x2', '\x2', 
		'\x250', '\x24D', '\x3', '\x2', '\x2', '\x2', '\x250', '\x24E', '\x3', 
		'\x2', '\x2', '\x2', '\x250', '\x24F', '\x3', '\x2', '\x2', '\x2', '\x251', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x252', '\x253', '\a', '`', '\x2', 
		'\x2', '\x253', '\x254', '\a', 'Y', '\x2', '\x2', '\x254', '\x255', '\a', 
		'^', '\x2', '\x2', '\x255', '\x33', '\x3', '\x2', '\x2', '\x2', '\x256', 
		'\x257', '\a', '`', '\x2', '\x2', '\x257', '\x25A', '\a', '<', '\x2', 
		'\x2', '\x258', '\x25B', '\a', '^', '\x2', '\x2', '\x259', '\x25B', '\x5', 
		'<', '\x1F', '\x2', '\x25A', '\x258', '\x3', '\x2', '\x2', '\x2', '\x25A', 
		'\x259', '\x3', '\x2', '\x2', '\x2', '\x25B', '\x25C', '\x3', '\x2', '\x2', 
		'\x2', '\x25C', '\x25D', '\a', '=', '\x2', '\x2', '\x25D', '\x25E', '\a', 
		'Y', '\x2', '\x2', '\x25E', '\x25F', '\a', '^', '\x2', '\x2', '\x25F', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x260', '\x261', '\a', '`', '\x2', 
		'\x2', '\x261', '\x262', '\a', 'Y', '\x2', '\x2', '\x262', '\x263', '\a', 
		'^', '\x2', '\x2', '\x263', '\x266', '\a', '<', '\x2', '\x2', '\x264', 
		'\x267', '\a', '^', '\x2', '\x2', '\x265', '\x267', '\x5', '<', '\x1F', 
		'\x2', '\x266', '\x264', '\x3', '\x2', '\x2', '\x2', '\x266', '\x265', 
		'\x3', '\x2', '\x2', '\x2', '\x267', '\x268', '\x3', '\x2', '\x2', '\x2', 
		'\x268', '\x269', '\a', '=', '\x2', '\x2', '\x269', '\x26A', '\a', 'Y', 
		'\x2', '\x2', '\x26A', '\x26B', '\a', '^', '\x2', '\x2', '\x26B', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x26C', '\x26D', '\a', '^', '\x2', '\x2', 
		'\x26D', '\x270', '\a', '<', '\x2', '\x2', '\x26E', '\x271', '\a', '^', 
		'\x2', '\x2', '\x26F', '\x271', '\x5', '<', '\x1F', '\x2', '\x270', '\x26E', 
		'\x3', '\x2', '\x2', '\x2', '\x270', '\x26F', '\x3', '\x2', '\x2', '\x2', 
		'\x271', '\x272', '\x3', '\x2', '\x2', '\x2', '\x272', '\x275', '\a', 
		'=', '\x2', '\x2', '\x273', '\x274', '\a', 'Y', '\x2', '\x2', '\x274', 
		'\x276', '\a', '^', '\x2', '\x2', '\x275', '\x273', '\x3', '\x2', '\x2', 
		'\x2', '\x275', '\x276', '\x3', '\x2', '\x2', '\x2', '\x276', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x277', '\x278', '\a', '_', '\x2', '\x2', 
		'\x278', ';', '\x3', '\x2', '\x2', '\x2', '\x279', '\x27A', '\a', '[', 
		'\x2', '\x2', '\x27A', '=', '\x3', '\x2', '\x2', '\x2', '\x27B', '\x27C', 
		'\a', '\\', '\x2', '\x2', '\x27C', '?', '\x3', '\x2', '\x2', '\x2', '\x27D', 
		'\x27E', '\t', '\x5', '\x2', '\x2', '\x27E', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '-', '\x45', 'I', 'P', 'j', 'z', '\x8E', '\x9D', '\xA6', '\xAA', 
		'\xB8', '\xBD', '\xC3', '\xD4', '\xDC', '\xDE', '\xE9', '\xF7', '\x107', 
		'\x10E', '\x113', '\x118', '\x11C', '\x12B', '\x138', '\x143', '\x14E', 
		'\x162', '\x176', '\x18A', '\x19C', '\x1A8', '\x1B3', '\x1C9', '\x1E1', 
		'\x215', '\x21E', '\x22F', '\x231', '\x250', '\x25A', '\x266', '\x270', 
		'\x275',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
