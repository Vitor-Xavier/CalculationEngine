//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Language.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class LanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, WS=2, IF=3, ELSE=4, SWITCH=5, CASE=6, DEFAULT=7, AND=8, OR=9, 
		NOT=10, TRUE=11, FALSE=12, NULL=13, MARKER=14, ISNULL=15, SUM_IF=16, COUNT_IF=17, 
		ABS=18, SQRT=19, SUM=20, MAX=21, MIN=22, AVERAGE=23, LENGTH=24, COALESCE=25, 
		CARACTERISTICA_TABELA=26, CARACTERISTICA=27, PARAMETRO=28, PARAMETRO_CODIGO=29, 
		PARAMETRO_INTERVALO=30, ROUND=31, TODAY=32, NOW=33, DATE_DIF=34, GET_MONTH=35, 
		GET_DAY=36, GET_YEAR=37, LOOKUP_FUNC=38, BASE_FUNC=39, TOTAL_PAYMENTS=40, 
		TOTAL_DISCOUNTS=41, DIRECT_RECALCULATION=42, PROPORTIONAL_RECALCULATION=43, 
		CLEAR_VALUES_FUNCTION=44, CLEAR_DISCOUNTS_FUNCTION=45, CLEAR_PAYMENTS_FUNCTION=46, 
		ADD_DAY=47, ADD_MONTH=48, ADD_YEAR=49, GET_DAY_DIFF=50, GET_MONTH_DIFF=51, 
		GET_YEAR_DIFF=52, GET_DATE=53, LAST_DAY_PROCESS=54, DESPREZAR=55, WHILE=56, 
		LBRACKET=57, RBRACKET=58, LBRACE=59, RBRACE=60, LPAREN=61, RPAREN=62, 
		MULT=63, DIV=64, PLUS=65, MINUS=66, POW=67, GT=68, GE=69, LT=70, LE=71, 
		EQ=72, NEQ=73, YEAR=74, MONTH=75, DAY=76, ATRIB=77, PLUS_ASSIGNMENT=78, 
		MINUS_ASSIGNMENT=79, MULT_ASSIGNMENT=80, DIV_ASSIGNMENT=81, VAR=82, RETURN=83, 
		COMMA=84, DOT=85, QUOTE=86, NUMBER=87, DECIMAL=88, DATE=89, IDENTIFIER=90, 
		TEXT=91, VAR_PRIMARY=92, VAR_OBJECT=93, VAR_ARRAY=94, SEMI=95, COLON=96;
	public const int
		RULE_rule_set = 0, RULE_rule_block = 1, RULE_variable_declaration = 2, 
		RULE_assignment = 3, RULE_return_value = 4, RULE_conditional = 5, RULE_then_block = 6, 
		RULE_else_block = 7, RULE_if_expression = 8, RULE_comparison_expression = 9, 
		RULE_comparison_operator = 10, RULE_assignment_operator = 11, RULE_loop = 12, 
		RULE_function_signature = 13, RULE_arithmetic_expression = 14, RULE_tabela_caracteristica = 15, 
		RULE_descricao_caracteristica = 16, RULE_valor_fator_caracteristica = 17, 
		RULE_codigo_caracteristica = 18, RULE_exercicio_caracteristica = 19, RULE_coluna_caracteristica = 20, 
		RULE_coluna_valor_caracteristica = 21, RULE_entity = 22, RULE_text = 23, 
		RULE_number_integer = 24, RULE_number_decimal = 25, RULE_date_unit = 26;
	public static readonly string[] ruleNames = {
		"rule_set", "rule_block", "variable_declaration", "assignment", "return_value", 
		"conditional", "then_block", "else_block", "if_expression", "comparison_expression", 
		"comparison_operator", "assignment_operator", "loop", "function_signature", 
		"arithmetic_expression", "tabela_caracteristica", "descricao_caracteristica", 
		"valor_fator_caracteristica", "codigo_caracteristica", "exercicio_caracteristica", 
		"coluna_caracteristica", "coluna_valor_caracteristica", "entity", "text", 
		"number_integer", "number_decimal", "date_unit"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'se'", "'senao'", "'switch'", "'case'", "'default'", 
		"'&&'", "'||'", "'!'", "'true'", "'false'", "'nulo'", "'marker'", "'_NULO'", 
		"'_SOMASE'", "'_CONTSE'", "'_ABS'", "'_RAIZ'", "'_SOMA'", "'_MAXIMO'", 
		"'_MINIMO'", "'_MEDIA'", "'_CONT'", "'_COALESCE'", "'_CARACTERISTICATABELA'", 
		"'_CARACTERISTICA'", "'_PARAMETRO'", "'_PARAMETROCODIGO'", "'_PARAMETROINTERVALO'", 
		"'_ARREDONDAR'", "'_HOJE'", "'_AGORA'", "'_DATADIF'", "'_MES'", "'_DIA'", 
		"'_ANO'", "'lookupFunction'", "'baseFunction'", "'totalPayments'", "'totalDiscounts'", 
		"'directRecalculation'", "'proportionalRecalculation'", "'clearValuesFunction'", 
		"'clearDiscountsFunction'", "'clearPaymentsFunction'", "'addDay'", "'addMonth'", 
		"'addYear'", "'getDayDiff'", "'getMonthDiff'", "'getYearDiff'", "'getDate'", 
		"'lastDayProcess'", "'desprezar'", "'enquanto'", "'['", "']'", "'{'", 
		"'}'", "'('", "')'", "'*'", "'/'", "'+'", "'-'", "'^'", "'>'", "'>='", 
		"'<'", "'<='", "'=='", "'!='", "'ANO'", "'MES'", "'DIA'", "'='", "'+='", 
		"'-='", "'*='", "'/='", "'var'", "'retorno'", "','", "'.'", "'\"'", null, 
		null, null, null, null, null, null, null, "';'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "WS", "IF", "ELSE", "SWITCH", "CASE", "DEFAULT", "AND", 
		"OR", "NOT", "TRUE", "FALSE", "NULL", "MARKER", "ISNULL", "SUM_IF", "COUNT_IF", 
		"ABS", "SQRT", "SUM", "MAX", "MIN", "AVERAGE", "LENGTH", "COALESCE", "CARACTERISTICA_TABELA", 
		"CARACTERISTICA", "PARAMETRO", "PARAMETRO_CODIGO", "PARAMETRO_INTERVALO", 
		"ROUND", "TODAY", "NOW", "DATE_DIF", "GET_MONTH", "GET_DAY", "GET_YEAR", 
		"LOOKUP_FUNC", "BASE_FUNC", "TOTAL_PAYMENTS", "TOTAL_DISCOUNTS", "DIRECT_RECALCULATION", 
		"PROPORTIONAL_RECALCULATION", "CLEAR_VALUES_FUNCTION", "CLEAR_DISCOUNTS_FUNCTION", 
		"CLEAR_PAYMENTS_FUNCTION", "ADD_DAY", "ADD_MONTH", "ADD_YEAR", "GET_DAY_DIFF", 
		"GET_MONTH_DIFF", "GET_YEAR_DIFF", "GET_DATE", "LAST_DAY_PROCESS", "DESPREZAR", 
		"WHILE", "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", "LPAREN", "RPAREN", 
		"MULT", "DIV", "PLUS", "MINUS", "POW", "GT", "GE", "LT", "LE", "EQ", "NEQ", 
		"YEAR", "MONTH", "DAY", "ATRIB", "PLUS_ASSIGNMENT", "MINUS_ASSIGNMENT", 
		"MULT_ASSIGNMENT", "DIV_ASSIGNMENT", "VAR", "RETURN", "COMMA", "DOT", 
		"QUOTE", "NUMBER", "DECIMAL", "DATE", "IDENTIFIER", "TEXT", "VAR_PRIMARY", 
		"VAR_OBJECT", "VAR_ARRAY", "SEMI", "COLON"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Rule_setContext : ParserRuleContext {
		public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public Return_valueContext return_value() {
			return GetRuleContext<Return_valueContext>(0);
		}
		public Rule_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_set; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_setContext rule_set() {
		Rule_setContext _localctx = new Rule_setContext(Context, State);
		EnterRule(_localctx, 0, RULE_rule_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << ISNULL) | (1L << SUM_IF) | (1L << COUNT_IF) | (1L << ABS) | (1L << SQRT) | (1L << SUM) | (1L << MAX) | (1L << MIN) | (1L << AVERAGE) | (1L << LENGTH) | (1L << COALESCE) | (1L << CARACTERISTICA_TABELA) | (1L << CARACTERISTICA) | (1L << PARAMETRO) | (1L << PARAMETRO_CODIGO) | (1L << PARAMETRO_INTERVALO) | (1L << ROUND) | (1L << TODAY) | (1L << NOW) | (1L << DATE_DIF) | (1L << GET_MONTH) | (1L << GET_DAY) | (1L << GET_YEAR) | (1L << WHILE) | (1L << LPAREN))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (VAR - 82)) | (1L << (NUMBER - 82)) | (1L << (DECIMAL - 82)) | (1L << (DATE - 82)) | (1L << (IDENTIFIER - 82)) | (1L << (VAR_PRIMARY - 82)) | (1L << (VAR_OBJECT - 82)) | (1L << (VAR_ARRAY - 82)))) != 0)) {
				{
				{
				State = 54; rule_block();
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURN) {
				{
				State = 60; return_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_blockContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ConditionalContext conditional() {
			return GetRuleContext<ConditionalContext>(0);
		}
		public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public Rule_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_blockContext rule_block() {
		Rule_blockContext _localctx = new Rule_blockContext(Context, State);
		EnterRule(_localctx, 2, RULE_rule_block);
		try {
			State = 68;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 63; assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64; variable_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 65; arithmetic_expression(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 66; conditional();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 67; loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
	 
		public Variable_declarationContext() { }
		public virtual void CopyFrom(Variable_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArithmeticDeclarationContext : Variable_declarationContext {
		public ITerminalNode VAR() { return GetToken(LanguageParser.VAR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public ITerminalNode ATRIB() { return GetToken(LanguageParser.ATRIB, 0); }
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public ArithmeticDeclarationContext(Variable_declarationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonDeclarationContext : Variable_declarationContext {
		public ITerminalNode VAR() { return GetToken(LanguageParser.VAR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public ITerminalNode ATRIB() { return GetToken(LanguageParser.ATRIB, 0); }
		public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public ComparisonDeclarationContext(Variable_declarationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_variable_declaration);
		try {
			State = 82;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new ArithmeticDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 70; Match(VAR);
				State = 71; Match(IDENTIFIER);
				State = 72; Match(ATRIB);
				State = 73; arithmetic_expression(0);
				State = 74; Match(SEMI);
				}
				break;
			case 2:
				_localctx = new ComparisonDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 76; Match(VAR);
				State = 77; Match(IDENTIFIER);
				State = 78; Match(ATRIB);
				State = 79; comparison_expression();
				State = 80; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	 
		public AssignmentContext() { }
		public virtual void CopyFrom(AssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ComparisonAssignmentContext : AssignmentContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public ITerminalNode ATRIB() { return GetToken(LanguageParser.ATRIB, 0); }
		public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public ComparisonAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticAssignmentContext : AssignmentContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public ArithmeticAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignment);
		try {
			State = 94;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new ArithmeticAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 84; Match(IDENTIFIER);
				State = 85; assignment_operator();
				State = 86; arithmetic_expression(0);
				State = 87; Match(SEMI);
				}
				break;
			case 2:
				_localctx = new ComparisonAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 89; Match(IDENTIFIER);
				State = 90; Match(ATRIB);
				State = 91; comparison_expression();
				State = 92; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_valueContext : ParserRuleContext {
		public Return_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_value; } }
	 
		public Return_valueContext() { }
		public virtual void CopyFrom(Return_valueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ReturnValueContext : Return_valueContext {
		public ITerminalNode RETURN() { return GetToken(LanguageParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ReturnValueContext(Return_valueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_valueContext return_value() {
		Return_valueContext _localctx = new Return_valueContext(Context, State);
		EnterRule(_localctx, 8, RULE_return_value);
		int _la;
		try {
			_localctx = new ReturnValueContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(RETURN);
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << ISNULL) | (1L << SUM_IF) | (1L << COUNT_IF) | (1L << ABS) | (1L << SQRT) | (1L << SUM) | (1L << MAX) | (1L << MIN) | (1L << AVERAGE) | (1L << LENGTH) | (1L << COALESCE) | (1L << CARACTERISTICA_TABELA) | (1L << CARACTERISTICA) | (1L << PARAMETRO) | (1L << PARAMETRO_CODIGO) | (1L << PARAMETRO_INTERVALO) | (1L << ROUND) | (1L << TODAY) | (1L << NOW) | (1L << DATE_DIF) | (1L << GET_MONTH) | (1L << GET_DAY) | (1L << GET_YEAR) | (1L << LPAREN))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (NUMBER - 87)) | (1L << (DECIMAL - 87)) | (1L << (DATE - 87)) | (1L << (IDENTIFIER - 87)) | (1L << (VAR_PRIMARY - 87)) | (1L << (VAR_OBJECT - 87)) | (1L << (VAR_ARRAY - 87)))) != 0)) {
				{
				State = 97; arithmetic_expression(0);
				}
			}

			State = 100; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(LanguageParser.IF, 0); }
		public If_expressionContext if_expression() {
			return GetRuleContext<If_expressionContext>(0);
		}
		public ITerminalNode[] LBRACE() { return GetTokens(LanguageParser.LBRACE); }
		public ITerminalNode LBRACE(int i) {
			return GetToken(LanguageParser.LBRACE, i);
		}
		public Then_blockContext then_block() {
			return GetRuleContext<Then_blockContext>(0);
		}
		public ITerminalNode[] RBRACE() { return GetTokens(LanguageParser.RBRACE); }
		public ITerminalNode RBRACE(int i) {
			return GetToken(LanguageParser.RBRACE, i);
		}
		public ITerminalNode ELSE() { return GetToken(LanguageParser.ELSE, 0); }
		public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		public ConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalContext conditional() {
		ConditionalContext _localctx = new ConditionalContext(Context, State);
		EnterRule(_localctx, 10, RULE_conditional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(IF);
			State = 103; if_expression(0);
			State = 104; Match(LBRACE);
			State = 105; then_block();
			State = 106; Match(RBRACE);
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 107; Match(ELSE);
				State = 108; Match(LBRACE);
				State = 109; else_block();
				State = 110; Match(RBRACE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Then_blockContext : ParserRuleContext {
		public Then_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_then_block; } }
	 
		public Then_blockContext() { }
		public virtual void CopyFrom(Then_blockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ThenBlockContext : Then_blockContext {
		public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public ThenBlockContext(Then_blockContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThenBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Then_blockContext then_block() {
		Then_blockContext _localctx = new Then_blockContext(Context, State);
		EnterRule(_localctx, 12, RULE_then_block);
		int _la;
		try {
			_localctx = new ThenBlockContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << ISNULL) | (1L << SUM_IF) | (1L << COUNT_IF) | (1L << ABS) | (1L << SQRT) | (1L << SUM) | (1L << MAX) | (1L << MIN) | (1L << AVERAGE) | (1L << LENGTH) | (1L << COALESCE) | (1L << CARACTERISTICA_TABELA) | (1L << CARACTERISTICA) | (1L << PARAMETRO) | (1L << PARAMETRO_CODIGO) | (1L << PARAMETRO_INTERVALO) | (1L << ROUND) | (1L << TODAY) | (1L << NOW) | (1L << DATE_DIF) | (1L << GET_MONTH) | (1L << GET_DAY) | (1L << GET_YEAR) | (1L << WHILE) | (1L << LPAREN))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (VAR - 82)) | (1L << (NUMBER - 82)) | (1L << (DECIMAL - 82)) | (1L << (DATE - 82)) | (1L << (IDENTIFIER - 82)) | (1L << (VAR_PRIMARY - 82)) | (1L << (VAR_OBJECT - 82)) | (1L << (VAR_ARRAY - 82)))) != 0)) {
				{
				{
				State = 114; rule_block();
				}
				}
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_blockContext : ParserRuleContext {
		public Else_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_block; } }
	 
		public Else_blockContext() { }
		public virtual void CopyFrom(Else_blockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ElseBlockContext : Else_blockContext {
		public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public ElseBlockContext(Else_blockContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_blockContext else_block() {
		Else_blockContext _localctx = new Else_blockContext(Context, State);
		EnterRule(_localctx, 14, RULE_else_block);
		int _la;
		try {
			_localctx = new ElseBlockContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << ISNULL) | (1L << SUM_IF) | (1L << COUNT_IF) | (1L << ABS) | (1L << SQRT) | (1L << SUM) | (1L << MAX) | (1L << MIN) | (1L << AVERAGE) | (1L << LENGTH) | (1L << COALESCE) | (1L << CARACTERISTICA_TABELA) | (1L << CARACTERISTICA) | (1L << PARAMETRO) | (1L << PARAMETRO_CODIGO) | (1L << PARAMETRO_INTERVALO) | (1L << ROUND) | (1L << TODAY) | (1L << NOW) | (1L << DATE_DIF) | (1L << GET_MONTH) | (1L << GET_DAY) | (1L << GET_YEAR) | (1L << WHILE) | (1L << LPAREN))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (VAR - 82)) | (1L << (NUMBER - 82)) | (1L << (DECIMAL - 82)) | (1L << (DATE - 82)) | (1L << (IDENTIFIER - 82)) | (1L << (VAR_PRIMARY - 82)) | (1L << (VAR_OBJECT - 82)) | (1L << (VAR_ARRAY - 82)))) != 0)) {
				{
				{
				State = 120; rule_block();
				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_expressionContext : ParserRuleContext {
		public If_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_expression; } }
	 
		public If_expressionContext() { }
		public virtual void CopyFrom(If_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NotIfEntityContext : If_expressionContext {
		public ITerminalNode NOT() { return GetToken(LanguageParser.NOT, 0); }
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public NotIfEntityContext(If_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotIfEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : If_expressionContext {
		public If_expressionContext[] if_expression() {
			return GetRuleContexts<If_expressionContext>();
		}
		public If_expressionContext if_expression(int i) {
			return GetRuleContext<If_expressionContext>(i);
		}
		public ITerminalNode OR() { return GetToken(LanguageParser.OR, 0); }
		public OrExpressionContext(If_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfComparisonExpressionContext : If_expressionContext {
		public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public IfComparisonExpressionContext(If_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : If_expressionContext {
		public If_expressionContext[] if_expression() {
			return GetRuleContexts<If_expressionContext>();
		}
		public If_expressionContext if_expression(int i) {
			return GetRuleContext<If_expressionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(LanguageParser.AND, 0); }
		public AndExpressionContext(If_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisIfExpressionContext : If_expressionContext {
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public If_expressionContext if_expression() {
			return GetRuleContext<If_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ParenthesisIfExpressionContext(If_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfEntityContext : If_expressionContext {
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public IfEntityContext(If_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotParenthesisIfExpressionContext : If_expressionContext {
		public ITerminalNode NOT() { return GetToken(LanguageParser.NOT, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public If_expressionContext if_expression() {
			return GetRuleContext<If_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public NotParenthesisIfExpressionContext(If_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotParenthesisIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_expressionContext if_expression() {
		return if_expression(0);
	}

	private If_expressionContext if_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		If_expressionContext _localctx = new If_expressionContext(Context, _parentState);
		If_expressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_if_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				_localctx = new IfComparisonExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 127; comparison_expression();
				}
				break;
			case 2:
				{
				_localctx = new NotParenthesisIfExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 128; Match(NOT);
				State = 129; Match(LPAREN);
				State = 130; if_expression(0);
				State = 131; Match(RPAREN);
				}
				break;
			case 3:
				{
				_localctx = new ParenthesisIfExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 133; Match(LPAREN);
				State = 134; if_expression(0);
				State = 135; Match(RPAREN);
				}
				break;
			case 4:
				{
				_localctx = new NotIfEntityContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 137; Match(NOT);
				State = 138; entity();
				}
				break;
			case 5:
				{
				_localctx = new IfEntityContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 139; entity();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 150;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 148;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new AndExpressionContext(new If_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_if_expression);
						State = 142;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 143; Match(AND);
						State = 144; if_expression(8);
						}
						break;
					case 2:
						{
						_localctx = new OrExpressionContext(new If_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_if_expression);
						State = 145;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 146; Match(OR);
						State = 147; if_expression(7);
						}
						break;
					}
					} 
				}
				State = 152;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Comparison_expressionContext : ParserRuleContext {
		public Comparison_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_expression; } }
	 
		public Comparison_expressionContext() { }
		public virtual void CopyFrom(Comparison_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesisComparisonExpressionContext : Comparison_expressionContext {
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ParenthesisComparisonExpressionContext(Comparison_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : Comparison_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public ComparisonExpressionContext(Comparison_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_expressionContext comparison_expression() {
		Comparison_expressionContext _localctx = new Comparison_expressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_comparison_expression);
		try {
			State = 161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				_localctx = new ComparisonExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 153; arithmetic_expression(0);
				State = 154; comparison_operator();
				State = 155; arithmetic_expression(0);
				}
				break;
			case 2:
				_localctx = new ParenthesisComparisonExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 157; Match(LPAREN);
				State = 158; comparison_expression();
				State = 159; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		public ITerminalNode GT() { return GetToken(LanguageParser.GT, 0); }
		public ITerminalNode GE() { return GetToken(LanguageParser.GE, 0); }
		public ITerminalNode LT() { return GetToken(LanguageParser.LT, 0); }
		public ITerminalNode LE() { return GetToken(LanguageParser.LE, 0); }
		public ITerminalNode EQ() { return GetToken(LanguageParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(LanguageParser.NEQ, 0); }
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(Context, State);
		EnterRule(_localctx, 20, RULE_comparison_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (GT - 68)) | (1L << (GE - 68)) | (1L << (LT - 68)) | (1L << (LE - 68)) | (1L << (EQ - 68)) | (1L << (NEQ - 68)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		public ITerminalNode ATRIB() { return GetToken(LanguageParser.ATRIB, 0); }
		public ITerminalNode PLUS_ASSIGNMENT() { return GetToken(LanguageParser.PLUS_ASSIGNMENT, 0); }
		public ITerminalNode MINUS_ASSIGNMENT() { return GetToken(LanguageParser.MINUS_ASSIGNMENT, 0); }
		public ITerminalNode MULT_ASSIGNMENT() { return GetToken(LanguageParser.MULT_ASSIGNMENT, 0); }
		public ITerminalNode DIV_ASSIGNMENT() { return GetToken(LanguageParser.DIV_ASSIGNMENT, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 22, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (ATRIB - 77)) | (1L << (PLUS_ASSIGNMENT - 77)) | (1L << (MINUS_ASSIGNMENT - 77)) | (1L << (MULT_ASSIGNMENT - 77)) | (1L << (DIV_ASSIGNMENT - 77)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
	 
		public LoopContext() { }
		public virtual void CopyFrom(LoopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhileExpressionContext : LoopContext {
		public ITerminalNode WHILE() { return GetToken(LanguageParser.WHILE, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public If_expressionContext if_expression() {
			return GetRuleContext<If_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ITerminalNode LBRACE() { return GetToken(LanguageParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(LanguageParser.RBRACE, 0); }
		public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public WhileExpressionContext(LoopContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 24, RULE_loop);
		int _la;
		try {
			_localctx = new WhileExpressionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; Match(WHILE);
			State = 168; Match(LPAREN);
			State = 169; if_expression(0);
			State = 170; Match(RPAREN);
			State = 171; Match(LBRACE);
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << ISNULL) | (1L << SUM_IF) | (1L << COUNT_IF) | (1L << ABS) | (1L << SQRT) | (1L << SUM) | (1L << MAX) | (1L << MIN) | (1L << AVERAGE) | (1L << LENGTH) | (1L << COALESCE) | (1L << CARACTERISTICA_TABELA) | (1L << CARACTERISTICA) | (1L << PARAMETRO) | (1L << PARAMETRO_CODIGO) | (1L << PARAMETRO_INTERVALO) | (1L << ROUND) | (1L << TODAY) | (1L << NOW) | (1L << DATE_DIF) | (1L << GET_MONTH) | (1L << GET_DAY) | (1L << GET_YEAR) | (1L << WHILE) | (1L << LPAREN))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (VAR - 82)) | (1L << (NUMBER - 82)) | (1L << (DECIMAL - 82)) | (1L << (DATE - 82)) | (1L << (IDENTIFIER - 82)) | (1L << (VAR_PRIMARY - 82)) | (1L << (VAR_OBJECT - 82)) | (1L << (VAR_ARRAY - 82)))) != 0)) {
				{
				{
				State = 172; rule_block();
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 178; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_signatureContext : ParserRuleContext {
		public Function_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_signature; } }
	 
		public Function_signatureContext() { }
		public virtual void CopyFrom(Function_signatureContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CoalesceFunctionContext : Function_signatureContext {
		public ITerminalNode COALESCE() { return GetToken(LanguageParser.COALESCE, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public CoalesceFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParametroCodigoFunctionContext : Function_signatureContext {
		public ITerminalNode PARAMETRO_CODIGO() { return GetToken(LanguageParser.PARAMETRO_CODIGO, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public ParametroCodigoFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametroCodigoFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaracteristicaContext : Function_signatureContext {
		public ITerminalNode CARACTERISTICA() { return GetToken(LanguageParser.CARACTERISTICA, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public Descricao_caracteristicaContext descricao_caracteristica() {
			return GetRuleContext<Descricao_caracteristicaContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public Codigo_caracteristicaContext codigo_caracteristica() {
			return GetRuleContext<Codigo_caracteristicaContext>(0);
		}
		public Valor_fator_caracteristicaContext valor_fator_caracteristica() {
			return GetRuleContext<Valor_fator_caracteristicaContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public Exercicio_caracteristicaContext exercicio_caracteristica() {
			return GetRuleContext<Exercicio_caracteristicaContext>(0);
		}
		public CaracteristicaContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AbsFunctionContext : Function_signatureContext {
		public ITerminalNode ABS() { return GetToken(LanguageParser.ABS, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public AbsFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbsFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LengthFunctionContext : Function_signatureContext {
		public ITerminalNode LENGTH() { return GetToken(LanguageParser.LENGTH, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public LengthFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaracteristicaTabelaContext : Function_signatureContext {
		public ITerminalNode CARACTERISTICA_TABELA() { return GetToken(LanguageParser.CARACTERISTICA_TABELA, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public Tabela_caracteristicaContext tabela_caracteristica() {
			return GetRuleContext<Tabela_caracteristicaContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public Descricao_caracteristicaContext descricao_caracteristica() {
			return GetRuleContext<Descricao_caracteristicaContext>(0);
		}
		public Coluna_caracteristicaContext coluna_caracteristica() {
			return GetRuleContext<Coluna_caracteristicaContext>(0);
		}
		public Exercicio_caracteristicaContext exercicio_caracteristica() {
			return GetRuleContext<Exercicio_caracteristicaContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public Valor_fator_caracteristicaContext valor_fator_caracteristica() {
			return GetRuleContext<Valor_fator_caracteristicaContext>(0);
		}
		public CaracteristicaTabelaContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaracteristicaTabela(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TodayFunctionContext : Function_signatureContext {
		public ITerminalNode TODAY() { return GetToken(LanguageParser.TODAY, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public TodayFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTodayFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateDifFunctionContext : Function_signatureContext {
		public ITerminalNode DATE_DIF() { return GetToken(LanguageParser.DATE_DIF, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public Date_unitContext date_unit() {
			return GetRuleContext<Date_unitContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public DateDifFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateDifFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumIfFunctionContext : Function_signatureContext {
		public ITerminalNode SUM_IF() { return GetToken(LanguageParser.SUM_IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode VAR_OBJECT() { return GetToken(LanguageParser.VAR_OBJECT, 0); }
		public ITerminalNode COMMA() { return GetToken(LanguageParser.COMMA, 0); }
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public SumIfFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumIfFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaxFunctionContext : Function_signatureContext {
		public ITerminalNode MAX() { return GetToken(LanguageParser.MAX, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode VAR_OBJECT() { return GetToken(LanguageParser.VAR_OBJECT, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public MaxFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetYearFunctionContext : Function_signatureContext {
		public ITerminalNode GET_YEAR() { return GetToken(LanguageParser.GET_YEAR, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public GetYearFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetYearFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParametroFunctionContext : Function_signatureContext {
		public ITerminalNode PARAMETRO() { return GetToken(LanguageParser.PARAMETRO, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(LanguageParser.COMMA, 0); }
		public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public ParametroFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametroFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetMonthFunctionContext : Function_signatureContext {
		public ITerminalNode GET_MONTH() { return GetToken(LanguageParser.GET_MONTH, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public GetMonthFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetMonthFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParametroIntervaloFunctionContext : Function_signatureContext {
		public ITerminalNode PARAMETRO_INTERVALO() { return GetToken(LanguageParser.PARAMETRO_INTERVALO, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public ParametroIntervaloFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametroIntervaloFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsNullFunctionContext : Function_signatureContext {
		public ITerminalNode ISNULL() { return GetToken(LanguageParser.ISNULL, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public IsNullFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsNullFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SqrtFunctionContext : Function_signatureContext {
		public ITerminalNode SQRT() { return GetToken(LanguageParser.SQRT, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public SqrtFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqrtFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NowFunctionContext : Function_signatureContext {
		public ITerminalNode NOW() { return GetToken(LanguageParser.NOW, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public NowFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNowFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumFunctionContext : Function_signatureContext {
		public ITerminalNode SUM() { return GetToken(LanguageParser.SUM, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode VAR_OBJECT() { return GetToken(LanguageParser.VAR_OBJECT, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public SumFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinFunctionContext : Function_signatureContext {
		public ITerminalNode MIN() { return GetToken(LanguageParser.MIN, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode VAR_OBJECT() { return GetToken(LanguageParser.VAR_OBJECT, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public MinFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AverageFunctionContext : Function_signatureContext {
		public ITerminalNode AVERAGE() { return GetToken(LanguageParser.AVERAGE, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode VAR_OBJECT() { return GetToken(LanguageParser.VAR_OBJECT, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public AverageFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAverageFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetDayFunctionContext : Function_signatureContext {
		public ITerminalNode GET_DAY() { return GetToken(LanguageParser.GET_DAY, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public GetDayFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetDayFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoundFunctionContext : Function_signatureContext {
		public ITerminalNode ROUND() { return GetToken(LanguageParser.ROUND, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(LanguageParser.COMMA, 0); }
		public RoundFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoundFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CountIfFunctionContext : Function_signatureContext {
		public ITerminalNode COUNT_IF() { return GetToken(LanguageParser.COUNT_IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		public ITerminalNode COMMA() { return GetToken(LanguageParser.COMMA, 0); }
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public CountIfFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountIfFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_signatureContext function_signature() {
		Function_signatureContext _localctx = new Function_signatureContext(Context, State);
		EnterRule(_localctx, 26, RULE_function_signature);
		int _la;
		try {
			State = 343;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CARACTERISTICA_TABELA:
				_localctx = new CaracteristicaTabelaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 180; Match(CARACTERISTICA_TABELA);
				State = 181; Match(LPAREN);
				State = 182; tabela_caracteristica();
				State = 183; Match(COMMA);
				State = 184; descricao_caracteristica();
				State = 185; Match(COMMA);
				State = 186; coluna_caracteristica();
				State = 187; Match(COMMA);
				State = 188; exercicio_caracteristica();
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 189; Match(COMMA);
					State = 190; valor_fator_caracteristica();
					}
				}

				State = 193; Match(RPAREN);
				}
				break;
			case CARACTERISTICA:
				_localctx = new CaracteristicaContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 195; Match(CARACTERISTICA);
				State = 196; Match(LPAREN);
				State = 197; descricao_caracteristica();
				State = 198; Match(COMMA);
				State = 199; codigo_caracteristica();
				State = 200; Match(COMMA);
				State = 201; valor_fator_caracteristica();
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 202; Match(COMMA);
					State = 203; exercicio_caracteristica();
					}
				}

				State = 206; Match(RPAREN);
				}
				break;
			case PARAMETRO:
				_localctx = new ParametroFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 208; Match(PARAMETRO);
				State = 209; Match(LPAREN);
				State = 210; text();
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 211; Match(COMMA);
					State = 212; number_integer();
					}
				}

				State = 215; Match(RPAREN);
				}
				break;
			case PARAMETRO_CODIGO:
				_localctx = new ParametroCodigoFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 217; Match(PARAMETRO_CODIGO);
				State = 218; Match(LPAREN);
				State = 219; text();
				State = 220; Match(COMMA);
				State = 221; text();
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 222; Match(COMMA);
					State = 223; number_integer();
					}
				}

				State = 226; Match(RPAREN);
				}
				break;
			case PARAMETRO_INTERVALO:
				_localctx = new ParametroIntervaloFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 228; Match(PARAMETRO_INTERVALO);
				State = 229; Match(LPAREN);
				State = 230; text();
				State = 231; Match(COMMA);
				State = 232; text();
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 233; Match(COMMA);
					State = 234; number_integer();
					}
				}

				State = 237; Match(RPAREN);
				}
				break;
			case SUM:
				_localctx = new SumFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 239; Match(SUM);
				State = 240; Match(LPAREN);
				State = 241; Match(VAR_OBJECT);
				State = 242; Match(RPAREN);
				}
				break;
			case MAX:
				_localctx = new MaxFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 243; Match(MAX);
				State = 244; Match(LPAREN);
				State = 245; Match(VAR_OBJECT);
				State = 246; Match(RPAREN);
				}
				break;
			case MIN:
				_localctx = new MinFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 247; Match(MIN);
				State = 248; Match(LPAREN);
				State = 249; Match(VAR_OBJECT);
				State = 250; Match(RPAREN);
				}
				break;
			case AVERAGE:
				_localctx = new AverageFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 251; Match(AVERAGE);
				State = 252; Match(LPAREN);
				State = 253; Match(VAR_OBJECT);
				State = 254; Match(RPAREN);
				}
				break;
			case LENGTH:
				_localctx = new LengthFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 255; Match(LENGTH);
				State = 256; Match(LPAREN);
				State = 257; Match(VAR_PRIMARY);
				State = 258; Match(RPAREN);
				}
				break;
			case ROUND:
				_localctx = new RoundFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 259; Match(ROUND);
				State = 260; Match(LPAREN);
				State = 261; arithmetic_expression(0);
				State = 264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 262; Match(COMMA);
					State = 263; arithmetic_expression(0);
					}
				}

				State = 266; Match(RPAREN);
				}
				break;
			case COALESCE:
				_localctx = new CoalesceFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 268; Match(COALESCE);
				State = 269; Match(LPAREN);
				State = 270; entity();
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 271; Match(COMMA);
					State = 272; entity();
					}
					}
					State = 277;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 278; Match(RPAREN);
				}
				break;
			case SQRT:
				_localctx = new SqrtFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 280; Match(SQRT);
				State = 281; Match(LPAREN);
				State = 282; arithmetic_expression(0);
				State = 283; Match(RPAREN);
				}
				break;
			case ABS:
				_localctx = new AbsFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 285; Match(ABS);
				State = 286; Match(LPAREN);
				State = 287; arithmetic_expression(0);
				State = 288; Match(RPAREN);
				}
				break;
			case SUM_IF:
				_localctx = new SumIfFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 290; Match(SUM_IF);
				State = 291; Match(LPAREN);
				State = 292; Match(VAR_OBJECT);
				State = 293; Match(COMMA);
				State = 294; arithmetic_expression(0);
				State = 295; comparison_operator();
				State = 296; arithmetic_expression(0);
				State = 297; Match(RPAREN);
				}
				break;
			case COUNT_IF:
				_localctx = new CountIfFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 299; Match(COUNT_IF);
				State = 300; Match(LPAREN);
				State = 301; Match(VAR_PRIMARY);
				State = 302; Match(COMMA);
				State = 303; arithmetic_expression(0);
				State = 304; comparison_operator();
				State = 305; arithmetic_expression(0);
				State = 306; Match(RPAREN);
				}
				break;
			case ISNULL:
				_localctx = new IsNullFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 308; Match(ISNULL);
				State = 309; Match(LPAREN);
				State = 310; arithmetic_expression(0);
				State = 311; Match(RPAREN);
				}
				break;
			case TODAY:
				_localctx = new TodayFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 313; Match(TODAY);
				State = 314; Match(LPAREN);
				State = 315; Match(RPAREN);
				}
				break;
			case NOW:
				_localctx = new NowFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 316; Match(NOW);
				State = 317; Match(LPAREN);
				State = 318; Match(RPAREN);
				}
				break;
			case DATE_DIF:
				_localctx = new DateDifFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 319; Match(DATE_DIF);
				State = 320; Match(LPAREN);
				State = 321; entity();
				State = 322; Match(COMMA);
				State = 323; entity();
				State = 324; Match(COMMA);
				State = 325; date_unit();
				State = 326; Match(RPAREN);
				}
				break;
			case GET_YEAR:
				_localctx = new GetYearFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 328; Match(GET_YEAR);
				State = 329; Match(LPAREN);
				State = 330; entity();
				State = 331; Match(RPAREN);
				}
				break;
			case GET_MONTH:
				_localctx = new GetMonthFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 333; Match(GET_MONTH);
				State = 334; Match(LPAREN);
				State = 335; entity();
				State = 336; Match(RPAREN);
				}
				break;
			case GET_DAY:
				_localctx = new GetDayFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 338; Match(GET_DAY);
				State = 339; Match(LPAREN);
				State = 340; entity();
				State = 341; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arithmetic_expressionContext : ParserRuleContext {
		public Arithmetic_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic_expression; } }
	 
		public Arithmetic_expressionContext() { }
		public virtual void CopyFrom(Arithmetic_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MinusExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(LanguageParser.MINUS, 0); }
		public MinusExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode POW() { return GetToken(LanguageParser.POW, 0); }
		public PowExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpressionContext : Arithmetic_expressionContext {
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ParenthesisExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode MULT() { return GetToken(LanguageParser.MULT, 0); }
		public MultExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(LanguageParser.DIV, 0); }
		public DivExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(LanguageParser.PLUS, 0); }
		public PlusExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfFunctionSignatureContext : Arithmetic_expressionContext {
		public Function_signatureContext function_signature() {
			return GetRuleContext<Function_signatureContext>(0);
		}
		public IfFunctionSignatureContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EntityExpressionContext : Arithmetic_expressionContext {
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public EntityExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetic_expressionContext arithmetic_expression() {
		return arithmetic_expression(0);
	}

	private Arithmetic_expressionContext arithmetic_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Arithmetic_expressionContext _localctx = new Arithmetic_expressionContext(Context, _parentState);
		Arithmetic_expressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_arithmetic_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				_localctx = new ParenthesisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 346; Match(LPAREN);
				State = 347; arithmetic_expression(0);
				State = 348; Match(RPAREN);
				}
				break;
			case ISNULL:
			case SUM_IF:
			case COUNT_IF:
			case ABS:
			case SQRT:
			case SUM:
			case MAX:
			case MIN:
			case AVERAGE:
			case LENGTH:
			case COALESCE:
			case CARACTERISTICA_TABELA:
			case CARACTERISTICA:
			case PARAMETRO:
			case PARAMETRO_CODIGO:
			case PARAMETRO_INTERVALO:
			case ROUND:
			case TODAY:
			case NOW:
			case DATE_DIF:
			case GET_MONTH:
			case GET_DAY:
			case GET_YEAR:
				{
				_localctx = new IfFunctionSignatureContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 350; function_signature();
				}
				break;
			case TRUE:
			case FALSE:
			case NULL:
			case NUMBER:
			case DECIMAL:
			case DATE:
			case IDENTIFIER:
			case VAR_PRIMARY:
			case VAR_OBJECT:
			case VAR_ARRAY:
				{
				_localctx = new EntityExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 351; entity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 371;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 369;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
					case 1:
						{
						_localctx = new MultExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 354;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 355; Match(MULT);
						State = 356; arithmetic_expression(9);
						}
						break;
					case 2:
						{
						_localctx = new DivExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 357;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 358; Match(DIV);
						State = 359; arithmetic_expression(8);
						}
						break;
					case 3:
						{
						_localctx = new PlusExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 360;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 361; Match(PLUS);
						State = 362; arithmetic_expression(7);
						}
						break;
					case 4:
						{
						_localctx = new MinusExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 363;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 364; Match(MINUS);
						State = 365; arithmetic_expression(6);
						}
						break;
					case 5:
						{
						_localctx = new PowExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 366;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 367; Match(POW);
						State = 368; arithmetic_expression(5);
						}
						break;
					}
					} 
				}
				State = 373;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Tabela_caracteristicaContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public Tabela_caracteristicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabela_caracteristica; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabela_caracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tabela_caracteristicaContext tabela_caracteristica() {
		Tabela_caracteristicaContext _localctx = new Tabela_caracteristicaContext(Context, State);
		EnterRule(_localctx, 30, RULE_tabela_caracteristica);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Descricao_caracteristicaContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public Descricao_caracteristicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_descricao_caracteristica; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescricao_caracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Descricao_caracteristicaContext descricao_caracteristica() {
		Descricao_caracteristicaContext _localctx = new Descricao_caracteristicaContext(Context, State);
		EnterRule(_localctx, 32, RULE_descricao_caracteristica);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Valor_fator_caracteristicaContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public Valor_fator_caracteristicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valor_fator_caracteristica; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValor_fator_caracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Valor_fator_caracteristicaContext valor_fator_caracteristica() {
		Valor_fator_caracteristicaContext _localctx = new Valor_fator_caracteristicaContext(Context, State);
		EnterRule(_localctx, 34, RULE_valor_fator_caracteristica);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Codigo_caracteristicaContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public Codigo_caracteristicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codigo_caracteristica; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodigo_caracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Codigo_caracteristicaContext codigo_caracteristica() {
		Codigo_caracteristicaContext _localctx = new Codigo_caracteristicaContext(Context, State);
		EnterRule(_localctx, 36, RULE_codigo_caracteristica);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exercicio_caracteristicaContext : ParserRuleContext {
		public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public Exercicio_caracteristicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exercicio_caracteristica; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExercicio_caracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exercicio_caracteristicaContext exercicio_caracteristica() {
		Exercicio_caracteristicaContext _localctx = new Exercicio_caracteristicaContext(Context, State);
		EnterRule(_localctx, 38, RULE_exercicio_caracteristica);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382; number_integer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Coluna_caracteristicaContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public Coluna_caracteristicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coluna_caracteristica; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColuna_caracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Coluna_caracteristicaContext coluna_caracteristica() {
		Coluna_caracteristicaContext _localctx = new Coluna_caracteristicaContext(Context, State);
		EnterRule(_localctx, 40, RULE_coluna_caracteristica);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Coluna_valor_caracteristicaContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public Coluna_valor_caracteristicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coluna_valor_caracteristica; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColuna_valor_caracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Coluna_valor_caracteristicaContext coluna_valor_caracteristica() {
		Coluna_valor_caracteristicaContext _localctx = new Coluna_valor_caracteristicaContext(Context, State);
		EnterRule(_localctx, 42, RULE_coluna_valor_caracteristica);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : ParserRuleContext {
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
	 
		public EntityContext() { }
		public virtual void CopyFrom(EntityContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolEntityContext : EntityContext {
		public ITerminalNode TRUE() { return GetToken(LanguageParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(LanguageParser.FALSE, 0); }
		public BoolEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarPrimaryEntityContext : EntityContext {
		public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		public VarPrimaryEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarPrimaryEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullEntityContext : EntityContext {
		public ITerminalNode NULL() { return GetToken(LanguageParser.NULL, 0); }
		public NullEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberDecimalEntityContext : EntityContext {
		public Number_decimalContext number_decimal() {
			return GetRuleContext<Number_decimalContext>(0);
		}
		public NumberDecimalEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberDecimalEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarArrayEntityContext : EntityContext {
		public ITerminalNode VAR_ARRAY() { return GetToken(LanguageParser.VAR_ARRAY, 0); }
		public VarArrayEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarArrayEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableEntityContext : EntityContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public VariableEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberIntegerEntityContext : EntityContext {
		public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public NumberIntegerEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberIntegerEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateEntityContext : EntityContext {
		public ITerminalNode DATE() { return GetToken(LanguageParser.DATE, 0); }
		public DateEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarObjectEntityContext : EntityContext {
		public ITerminalNode VAR_OBJECT() { return GetToken(LanguageParser.VAR_OBJECT, 0); }
		public VarObjectEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarObjectEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		EntityContext _localctx = new EntityContext(Context, State);
		EnterRule(_localctx, 44, RULE_entity);
		int _la;
		try {
			State = 397;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
				_localctx = new BoolEntityContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 388;
				_la = TokenStream.LA(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case DECIMAL:
				_localctx = new NumberDecimalEntityContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 389; number_decimal();
				}
				break;
			case NUMBER:
				_localctx = new NumberIntegerEntityContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 390; number_integer();
				}
				break;
			case DATE:
				_localctx = new DateEntityContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 391; Match(DATE);
				}
				break;
			case IDENTIFIER:
				_localctx = new VariableEntityContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 392; Match(IDENTIFIER);
				}
				break;
			case VAR_PRIMARY:
				_localctx = new VarPrimaryEntityContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 393; Match(VAR_PRIMARY);
				}
				break;
			case VAR_ARRAY:
				_localctx = new VarArrayEntityContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 394; Match(VAR_ARRAY);
				}
				break;
			case VAR_OBJECT:
				_localctx = new VarObjectEntityContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 395; Match(VAR_OBJECT);
				}
				break;
			case NULL:
				_localctx = new NullEntityContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 396; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
	 
		public TextContext() { }
		public virtual void CopyFrom(TextContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringEntityContext : TextContext {
		public ITerminalNode TEXT() { return GetToken(LanguageParser.TEXT, 0); }
		public StringEntityContext(TextContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 46, RULE_text);
		try {
			_localctx = new StringEntityContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 399; Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_integerContext : ParserRuleContext {
		public Number_integerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_integer; } }
	 
		public Number_integerContext() { }
		public virtual void CopyFrom(Number_integerContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberIntegerContext : Number_integerContext {
		public ITerminalNode NUMBER() { return GetToken(LanguageParser.NUMBER, 0); }
		public NumberIntegerContext(Number_integerContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Number_integerContext number_integer() {
		Number_integerContext _localctx = new Number_integerContext(Context, State);
		EnterRule(_localctx, 48, RULE_number_integer);
		try {
			_localctx = new NumberIntegerContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 401; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_decimalContext : ParserRuleContext {
		public Number_decimalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_decimal; } }
	 
		public Number_decimalContext() { }
		public virtual void CopyFrom(Number_decimalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberDecimalContext : Number_decimalContext {
		public ITerminalNode DECIMAL() { return GetToken(LanguageParser.DECIMAL, 0); }
		public NumberDecimalContext(Number_decimalContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Number_decimalContext number_decimal() {
		Number_decimalContext _localctx = new Number_decimalContext(Context, State);
		EnterRule(_localctx, 50, RULE_number_decimal);
		try {
			_localctx = new NumberDecimalContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 403; Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_unitContext : ParserRuleContext {
		public ITerminalNode YEAR() { return GetToken(LanguageParser.YEAR, 0); }
		public ITerminalNode MONTH() { return GetToken(LanguageParser.MONTH, 0); }
		public ITerminalNode DAY() { return GetToken(LanguageParser.DAY, 0); }
		public Date_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_unit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_unitContext date_unit() {
		Date_unitContext _localctx = new Date_unitContext(Context, State);
		EnterRule(_localctx, 52, RULE_date_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (YEAR - 74)) | (1L << (MONTH - 74)) | (1L << (DAY - 74)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return if_expression_sempred((If_expressionContext)_localctx, predIndex);
		case 14: return arithmetic_expression_sempred((Arithmetic_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool if_expression_sempred(If_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		}
		return true;
	}
	private bool arithmetic_expression_sempred(Arithmetic_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 6);
		case 5: return Precpred(Context, 5);
		case 6: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x62', '\x19A', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x3', '\x2', '\a', 
		'\x2', ':', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '=', '\v', '\x2', 
		'\x3', '\x2', '\x5', '\x2', '@', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'G', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'U', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x61', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x65', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', 's', '\n', '\a', '\x3', '\b', '\a', 
		'\b', 'v', '\n', '\b', '\f', '\b', '\xE', '\b', 'y', '\v', '\b', '\x3', 
		'\t', '\a', '\t', '|', '\n', '\t', '\f', '\t', '\xE', '\t', '\x7F', '\v', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x8F', '\n', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\a', '\n', '\x97', '\n', '\n', '\f', '\n', '\xE', '\n', 
		'\x9A', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xA4', 
		'\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\a', '\xE', '\xB0', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xB3', 
		'\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xC2', 
		'\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\xCF', '\n', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\xD8', '\n', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xE3', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\xEE', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x10B', 
		'\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x114', '\n', '\xF', 
		'\f', '\xF', '\xE', '\xF', '\x117', '\v', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x15A', 
		'\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x163', '\n', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\a', '\x10', '\x174', '\n', '\x10', '\f', '\x10', '\xE', '\x10', 
		'\x177', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\x190', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x2', '\x4', '\x12', '\x1E', '\x1D', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x36', '\x2', '\x6', '\x3', '\x2', '\x46', 'K', '\x3', '\x2', 
		'O', 'S', '\x3', '\x2', '\r', '\xE', '\x3', '\x2', 'L', 'N', '\x2', '\x1BE', 
		'\x2', ';', '\x3', '\x2', '\x2', '\x2', '\x4', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x6', 'T', '\x3', '\x2', '\x2', '\x2', '\b', '`', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x62', '\x3', '\x2', '\x2', '\x2', '\f', 'h', '\x3', 
		'\x2', '\x2', '\x2', '\xE', 'w', '\x3', '\x2', '\x2', '\x2', '\x10', '}', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x8E', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x16', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x159', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x162', '\x3', '\x2', '\x2', '\x2', ' ', '\x178', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\x17A', '\x3', '\x2', '\x2', '\x2', '$', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x17E', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x180', '\x3', '\x2', '\x2', '\x2', '*', '\x182', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x184', '\x3', '\x2', '\x2', '\x2', '.', '\x18F', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x191', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x193', '\x3', '\x2', '\x2', '\x2', '\x34', '\x195', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x197', '\x3', '\x2', '\x2', '\x2', '\x38', ':', 
		'\x5', '\x4', '\x3', '\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', 
		':', '=', '\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', 
		'\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', '?', '\x3', '\x2', '\x2', 
		'\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '>', '@', '\x5', '\n', '\x6', 
		'\x2', '?', '>', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x3', '\x3', '\x2', '\x2', '\x2', '\x41', 'G', '\x5', '\b', 
		'\x5', '\x2', '\x42', 'G', '\x5', '\x6', '\x4', '\x2', '\x43', 'G', '\x5', 
		'\x1E', '\x10', '\x2', '\x44', 'G', '\x5', '\f', '\a', '\x2', '\x45', 
		'G', '\x5', '\x1A', '\xE', '\x2', '\x46', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x46', '\x42', '\x3', '\x2', '\x2', '\x2', '\x46', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'\x45', '\x3', '\x2', '\x2', '\x2', 'G', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'H', 'I', '\a', 'T', '\x2', '\x2', 'I', 'J', '\a', '\\', '\x2', '\x2', 
		'J', 'K', '\a', 'O', '\x2', '\x2', 'K', 'L', '\x5', '\x1E', '\x10', '\x2', 
		'L', 'M', '\a', '\x61', '\x2', '\x2', 'M', 'U', '\x3', '\x2', '\x2', '\x2', 
		'N', 'O', '\a', 'T', '\x2', '\x2', 'O', 'P', '\a', '\\', '\x2', '\x2', 
		'P', 'Q', '\a', 'O', '\x2', '\x2', 'Q', 'R', '\x5', '\x14', '\v', '\x2', 
		'R', 'S', '\a', '\x61', '\x2', '\x2', 'S', 'U', '\x3', '\x2', '\x2', '\x2', 
		'T', 'H', '\x3', '\x2', '\x2', '\x2', 'T', 'N', '\x3', '\x2', '\x2', '\x2', 
		'U', '\a', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '\\', '\x2', '\x2', 
		'W', 'X', '\x5', '\x18', '\r', '\x2', 'X', 'Y', '\x5', '\x1E', '\x10', 
		'\x2', 'Y', 'Z', '\a', '\x61', '\x2', '\x2', 'Z', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '[', '\\', '\a', '\\', '\x2', '\x2', '\\', ']', '\a', 'O', 
		'\x2', '\x2', ']', '^', '\x5', '\x14', '\v', '\x2', '^', '_', '\a', '\x61', 
		'\x2', '\x2', '_', '\x61', '\x3', '\x2', '\x2', '\x2', '`', 'V', '\x3', 
		'\x2', '\x2', '\x2', '`', '[', '\x3', '\x2', '\x2', '\x2', '\x61', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x64', '\a', 'U', '\x2', '\x2', '\x63', 
		'\x65', '\x5', '\x1E', '\x10', '\x2', '\x64', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', 
		'\x2', '\x2', '\x2', '\x66', 'g', '\a', '\x61', '\x2', '\x2', 'g', '\v', 
		'\x3', '\x2', '\x2', '\x2', 'h', 'i', '\a', '\x5', '\x2', '\x2', 'i', 
		'j', '\x5', '\x12', '\n', '\x2', 'j', 'k', '\a', '=', '\x2', '\x2', 'k', 
		'l', '\x5', '\xE', '\b', '\x2', 'l', 'r', '\a', '>', '\x2', '\x2', 'm', 
		'n', '\a', '\x6', '\x2', '\x2', 'n', 'o', '\a', '=', '\x2', '\x2', 'o', 
		'p', '\x5', '\x10', '\t', '\x2', 'p', 'q', '\a', '>', '\x2', '\x2', 'q', 
		's', '\x3', '\x2', '\x2', '\x2', 'r', 'm', '\x3', '\x2', '\x2', '\x2', 
		'r', 's', '\x3', '\x2', '\x2', '\x2', 's', '\r', '\x3', '\x2', '\x2', 
		'\x2', 't', 'v', '\x5', '\x4', '\x3', '\x2', 'u', 't', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'y', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', '\xF', '\x3', '\x2', 
		'\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', '\x2', 'z', '|', '\x5', '\x4', 
		'\x3', '\x2', '{', 'z', '\x3', '\x2', '\x2', '\x2', '|', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x11', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\b', '\n', '\x1', '\x2', 
		'\x81', '\x8F', '\x5', '\x14', '\v', '\x2', '\x82', '\x83', '\a', '\f', 
		'\x2', '\x2', '\x83', '\x84', '\a', '?', '\x2', '\x2', '\x84', '\x85', 
		'\x5', '\x12', '\n', '\x2', '\x85', '\x86', '\a', '@', '\x2', '\x2', '\x86', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\a', '?', '\x2', 
		'\x2', '\x88', '\x89', '\x5', '\x12', '\n', '\x2', '\x89', '\x8A', '\a', 
		'@', '\x2', '\x2', '\x8A', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x8C', '\a', '\f', '\x2', '\x2', '\x8C', '\x8F', '\x5', '.', '\x18', 
		'\x2', '\x8D', '\x8F', '\x5', '.', '\x18', '\x2', '\x8E', '\x80', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x82', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x91', '\f', '\t', '\x2', '\x2', '\x91', 
		'\x92', '\a', '\n', '\x2', '\x2', '\x92', '\x97', '\x5', '\x12', '\n', 
		'\n', '\x93', '\x94', '\f', '\b', '\x2', '\x2', '\x94', '\x95', '\a', 
		'\v', '\x2', '\x2', '\x95', '\x97', '\x5', '\x12', '\n', '\t', '\x96', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x96', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x98', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x9C', '\x5', '\x1E', '\x10', '\x2', '\x9C', '\x9D', '\x5', 
		'\x16', '\f', '\x2', '\x9D', '\x9E', '\x5', '\x1E', '\x10', '\x2', '\x9E', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\a', '?', '\x2', 
		'\x2', '\xA0', '\xA1', '\x5', '\x14', '\v', '\x2', '\xA1', '\xA2', '\a', 
		'@', '\x2', '\x2', '\xA2', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\xA3', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\x15', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\t', 
		'\x2', '\x2', '\x2', '\xA6', '\x17', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xA8', '\t', '\x3', '\x2', '\x2', '\xA8', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xAA', '\a', ':', '\x2', '\x2', '\xAA', '\xAB', '\a', 
		'?', '\x2', '\x2', '\xAB', '\xAC', '\x5', '\x12', '\n', '\x2', '\xAC', 
		'\xAD', '\a', '@', '\x2', '\x2', '\xAD', '\xB1', '\a', '=', '\x2', '\x2', 
		'\xAE', '\xB0', '\x5', '\x4', '\x3', '\x2', '\xAF', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xAF', 
		'\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\xB5', '\a', '>', '\x2', '\x2', '\xB5', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\a', '\x1C', '\x2', '\x2', 
		'\xB7', '\xB8', '\a', '?', '\x2', '\x2', '\xB8', '\xB9', '\x5', ' ', '\x11', 
		'\x2', '\xB9', '\xBA', '\a', 'V', '\x2', '\x2', '\xBA', '\xBB', '\x5', 
		'\"', '\x12', '\x2', '\xBB', '\xBC', '\a', 'V', '\x2', '\x2', '\xBC', 
		'\xBD', '\x5', '*', '\x16', '\x2', '\xBD', '\xBE', '\a', 'V', '\x2', '\x2', 
		'\xBE', '\xC1', '\x5', '(', '\x15', '\x2', '\xBF', '\xC0', '\a', 'V', 
		'\x2', '\x2', '\xC0', '\xC2', '\x5', '$', '\x13', '\x2', '\xC1', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\a', '@', 
		'\x2', '\x2', '\xC4', '\x15A', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', 
		'\a', '\x1D', '\x2', '\x2', '\xC6', '\xC7', '\a', '?', '\x2', '\x2', '\xC7', 
		'\xC8', '\x5', '\"', '\x12', '\x2', '\xC8', '\xC9', '\a', 'V', '\x2', 
		'\x2', '\xC9', '\xCA', '\x5', '&', '\x14', '\x2', '\xCA', '\xCB', '\a', 
		'V', '\x2', '\x2', '\xCB', '\xCE', '\x5', '$', '\x13', '\x2', '\xCC', 
		'\xCD', '\a', 'V', '\x2', '\x2', '\xCD', '\xCF', '\x5', '(', '\x15', '\x2', 
		'\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\xCF', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', 
		'\a', '@', '\x2', '\x2', '\xD1', '\x15A', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\xD3', '\a', '\x1E', '\x2', '\x2', '\xD3', '\xD4', '\a', '?', 
		'\x2', '\x2', '\xD4', '\xD7', '\x5', '\x30', '\x19', '\x2', '\xD5', '\xD6', 
		'\a', 'V', '\x2', '\x2', '\xD6', '\xD8', '\x5', '\x32', '\x1A', '\x2', 
		'\xD7', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\x3', '\x2', 
		'\x2', '\x2', '\xD8', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', 
		'\a', '@', '\x2', '\x2', '\xDA', '\x15A', '\x3', '\x2', '\x2', '\x2', 
		'\xDB', '\xDC', '\a', '\x1F', '\x2', '\x2', '\xDC', '\xDD', '\a', '?', 
		'\x2', '\x2', '\xDD', '\xDE', '\x5', '\x30', '\x19', '\x2', '\xDE', '\xDF', 
		'\a', 'V', '\x2', '\x2', '\xDF', '\xE2', '\x5', '\x30', '\x19', '\x2', 
		'\xE0', '\xE1', '\a', 'V', '\x2', '\x2', '\xE1', '\xE3', '\x5', '\x32', 
		'\x1A', '\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', 
		'\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\xE5', '\a', '@', '\x2', '\x2', '\xE5', '\x15A', '\x3', '\x2', 
		'\x2', '\x2', '\xE6', '\xE7', '\a', ' ', '\x2', '\x2', '\xE7', '\xE8', 
		'\a', '?', '\x2', '\x2', '\xE8', '\xE9', '\x5', '\x30', '\x19', '\x2', 
		'\xE9', '\xEA', '\a', 'V', '\x2', '\x2', '\xEA', '\xED', '\x5', '\x30', 
		'\x19', '\x2', '\xEB', '\xEC', '\a', 'V', '\x2', '\x2', '\xEC', '\xEE', 
		'\x5', '\x32', '\x1A', '\x2', '\xED', '\xEB', '\x3', '\x2', '\x2', '\x2', 
		'\xED', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\x3', '\x2', 
		'\x2', '\x2', '\xEF', '\xF0', '\a', '@', '\x2', '\x2', '\xF0', '\x15A', 
		'\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\a', '\x16', '\x2', '\x2', 
		'\xF2', '\xF3', '\a', '?', '\x2', '\x2', '\xF3', '\xF4', '\a', '_', '\x2', 
		'\x2', '\xF4', '\x15A', '\a', '@', '\x2', '\x2', '\xF5', '\xF6', '\a', 
		'\x17', '\x2', '\x2', '\xF6', '\xF7', '\a', '?', '\x2', '\x2', '\xF7', 
		'\xF8', '\a', '_', '\x2', '\x2', '\xF8', '\x15A', '\a', '@', '\x2', '\x2', 
		'\xF9', '\xFA', '\a', '\x18', '\x2', '\x2', '\xFA', '\xFB', '\a', '?', 
		'\x2', '\x2', '\xFB', '\xFC', '\a', '_', '\x2', '\x2', '\xFC', '\x15A', 
		'\a', '@', '\x2', '\x2', '\xFD', '\xFE', '\a', '\x19', '\x2', '\x2', '\xFE', 
		'\xFF', '\a', '?', '\x2', '\x2', '\xFF', '\x100', '\a', '_', '\x2', '\x2', 
		'\x100', '\x15A', '\a', '@', '\x2', '\x2', '\x101', '\x102', '\a', '\x1A', 
		'\x2', '\x2', '\x102', '\x103', '\a', '?', '\x2', '\x2', '\x103', '\x104', 
		'\a', '^', '\x2', '\x2', '\x104', '\x15A', '\a', '@', '\x2', '\x2', '\x105', 
		'\x106', '\a', '!', '\x2', '\x2', '\x106', '\x107', '\a', '?', '\x2', 
		'\x2', '\x107', '\x10A', '\x5', '\x1E', '\x10', '\x2', '\x108', '\x109', 
		'\a', 'V', '\x2', '\x2', '\x109', '\x10B', '\x5', '\x1E', '\x10', '\x2', 
		'\x10A', '\x108', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x10D', '\a', '@', '\x2', '\x2', '\x10D', '\x15A', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x10F', '\a', '\x1B', '\x2', '\x2', '\x10F', '\x110', 
		'\a', '?', '\x2', '\x2', '\x110', '\x115', '\x5', '.', '\x18', '\x2', 
		'\x111', '\x112', '\a', 'V', '\x2', '\x2', '\x112', '\x114', '\x5', '.', 
		'\x18', '\x2', '\x113', '\x111', '\x3', '\x2', '\x2', '\x2', '\x114', 
		'\x117', '\x3', '\x2', '\x2', '\x2', '\x115', '\x113', '\x3', '\x2', '\x2', 
		'\x2', '\x115', '\x116', '\x3', '\x2', '\x2', '\x2', '\x116', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '\x117', '\x115', '\x3', '\x2', '\x2', '\x2', 
		'\x118', '\x119', '\a', '@', '\x2', '\x2', '\x119', '\x15A', '\x3', '\x2', 
		'\x2', '\x2', '\x11A', '\x11B', '\a', '\x15', '\x2', '\x2', '\x11B', '\x11C', 
		'\a', '?', '\x2', '\x2', '\x11C', '\x11D', '\x5', '\x1E', '\x10', '\x2', 
		'\x11D', '\x11E', '\a', '@', '\x2', '\x2', '\x11E', '\x15A', '\x3', '\x2', 
		'\x2', '\x2', '\x11F', '\x120', '\a', '\x14', '\x2', '\x2', '\x120', '\x121', 
		'\a', '?', '\x2', '\x2', '\x121', '\x122', '\x5', '\x1E', '\x10', '\x2', 
		'\x122', '\x123', '\a', '@', '\x2', '\x2', '\x123', '\x15A', '\x3', '\x2', 
		'\x2', '\x2', '\x124', '\x125', '\a', '\x12', '\x2', '\x2', '\x125', '\x126', 
		'\a', '?', '\x2', '\x2', '\x126', '\x127', '\a', '_', '\x2', '\x2', '\x127', 
		'\x128', '\a', 'V', '\x2', '\x2', '\x128', '\x129', '\x5', '\x1E', '\x10', 
		'\x2', '\x129', '\x12A', '\x5', '\x16', '\f', '\x2', '\x12A', '\x12B', 
		'\x5', '\x1E', '\x10', '\x2', '\x12B', '\x12C', '\a', '@', '\x2', '\x2', 
		'\x12C', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\a', 
		'\x13', '\x2', '\x2', '\x12E', '\x12F', '\a', '?', '\x2', '\x2', '\x12F', 
		'\x130', '\a', '^', '\x2', '\x2', '\x130', '\x131', '\a', 'V', '\x2', 
		'\x2', '\x131', '\x132', '\x5', '\x1E', '\x10', '\x2', '\x132', '\x133', 
		'\x5', '\x16', '\f', '\x2', '\x133', '\x134', '\x5', '\x1E', '\x10', '\x2', 
		'\x134', '\x135', '\a', '@', '\x2', '\x2', '\x135', '\x15A', '\x3', '\x2', 
		'\x2', '\x2', '\x136', '\x137', '\a', '\x11', '\x2', '\x2', '\x137', '\x138', 
		'\a', '?', '\x2', '\x2', '\x138', '\x139', '\x5', '\x1E', '\x10', '\x2', 
		'\x139', '\x13A', '\a', '@', '\x2', '\x2', '\x13A', '\x15A', '\x3', '\x2', 
		'\x2', '\x2', '\x13B', '\x13C', '\a', '\"', '\x2', '\x2', '\x13C', '\x13D', 
		'\a', '?', '\x2', '\x2', '\x13D', '\x15A', '\a', '@', '\x2', '\x2', '\x13E', 
		'\x13F', '\a', '#', '\x2', '\x2', '\x13F', '\x140', '\a', '?', '\x2', 
		'\x2', '\x140', '\x15A', '\a', '@', '\x2', '\x2', '\x141', '\x142', '\a', 
		'$', '\x2', '\x2', '\x142', '\x143', '\a', '?', '\x2', '\x2', '\x143', 
		'\x144', '\x5', '.', '\x18', '\x2', '\x144', '\x145', '\a', 'V', '\x2', 
		'\x2', '\x145', '\x146', '\x5', '.', '\x18', '\x2', '\x146', '\x147', 
		'\a', 'V', '\x2', '\x2', '\x147', '\x148', '\x5', '\x36', '\x1C', '\x2', 
		'\x148', '\x149', '\a', '@', '\x2', '\x2', '\x149', '\x15A', '\x3', '\x2', 
		'\x2', '\x2', '\x14A', '\x14B', '\a', '\'', '\x2', '\x2', '\x14B', '\x14C', 
		'\a', '?', '\x2', '\x2', '\x14C', '\x14D', '\x5', '.', '\x18', '\x2', 
		'\x14D', '\x14E', '\a', '@', '\x2', '\x2', '\x14E', '\x15A', '\x3', '\x2', 
		'\x2', '\x2', '\x14F', '\x150', '\a', '%', '\x2', '\x2', '\x150', '\x151', 
		'\a', '?', '\x2', '\x2', '\x151', '\x152', '\x5', '.', '\x18', '\x2', 
		'\x152', '\x153', '\a', '@', '\x2', '\x2', '\x153', '\x15A', '\x3', '\x2', 
		'\x2', '\x2', '\x154', '\x155', '\a', '&', '\x2', '\x2', '\x155', '\x156', 
		'\a', '?', '\x2', '\x2', '\x156', '\x157', '\x5', '.', '\x18', '\x2', 
		'\x157', '\x158', '\a', '@', '\x2', '\x2', '\x158', '\x15A', '\x3', '\x2', 
		'\x2', '\x2', '\x159', '\xB6', '\x3', '\x2', '\x2', '\x2', '\x159', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '\x159', '\xD2', '\x3', '\x2', '\x2', '\x2', 
		'\x159', '\xDB', '\x3', '\x2', '\x2', '\x2', '\x159', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '\x159', '\xF1', '\x3', '\x2', '\x2', '\x2', '\x159', '\xF5', 
		'\x3', '\x2', '\x2', '\x2', '\x159', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\x159', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x159', '\x101', '\x3', 
		'\x2', '\x2', '\x2', '\x159', '\x105', '\x3', '\x2', '\x2', '\x2', '\x159', 
		'\x10E', '\x3', '\x2', '\x2', '\x2', '\x159', '\x11A', '\x3', '\x2', '\x2', 
		'\x2', '\x159', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x159', '\x124', 
		'\x3', '\x2', '\x2', '\x2', '\x159', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x159', '\x136', '\x3', '\x2', '\x2', '\x2', '\x159', '\x13B', '\x3', 
		'\x2', '\x2', '\x2', '\x159', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x159', 
		'\x141', '\x3', '\x2', '\x2', '\x2', '\x159', '\x14A', '\x3', '\x2', '\x2', 
		'\x2', '\x159', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x159', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x15A', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x15B', '\x15C', '\b', '\x10', '\x1', '\x2', '\x15C', '\x15D', '\a', 
		'?', '\x2', '\x2', '\x15D', '\x15E', '\x5', '\x1E', '\x10', '\x2', '\x15E', 
		'\x15F', '\a', '@', '\x2', '\x2', '\x15F', '\x163', '\x3', '\x2', '\x2', 
		'\x2', '\x160', '\x163', '\x5', '\x1C', '\xF', '\x2', '\x161', '\x163', 
		'\x5', '.', '\x18', '\x2', '\x162', '\x15B', '\x3', '\x2', '\x2', '\x2', 
		'\x162', '\x160', '\x3', '\x2', '\x2', '\x2', '\x162', '\x161', '\x3', 
		'\x2', '\x2', '\x2', '\x163', '\x175', '\x3', '\x2', '\x2', '\x2', '\x164', 
		'\x165', '\f', '\n', '\x2', '\x2', '\x165', '\x166', '\a', '\x41', '\x2', 
		'\x2', '\x166', '\x174', '\x5', '\x1E', '\x10', '\v', '\x167', '\x168', 
		'\f', '\t', '\x2', '\x2', '\x168', '\x169', '\a', '\x42', '\x2', '\x2', 
		'\x169', '\x174', '\x5', '\x1E', '\x10', '\n', '\x16A', '\x16B', '\f', 
		'\b', '\x2', '\x2', '\x16B', '\x16C', '\a', '\x43', '\x2', '\x2', '\x16C', 
		'\x174', '\x5', '\x1E', '\x10', '\t', '\x16D', '\x16E', '\f', '\a', '\x2', 
		'\x2', '\x16E', '\x16F', '\a', '\x44', '\x2', '\x2', '\x16F', '\x174', 
		'\x5', '\x1E', '\x10', '\b', '\x170', '\x171', '\f', '\x6', '\x2', '\x2', 
		'\x171', '\x172', '\a', '\x45', '\x2', '\x2', '\x172', '\x174', '\x5', 
		'\x1E', '\x10', '\a', '\x173', '\x164', '\x3', '\x2', '\x2', '\x2', '\x173', 
		'\x167', '\x3', '\x2', '\x2', '\x2', '\x173', '\x16A', '\x3', '\x2', '\x2', 
		'\x2', '\x173', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x173', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '\x174', '\x177', '\x3', '\x2', '\x2', '\x2', 
		'\x175', '\x173', '\x3', '\x2', '\x2', '\x2', '\x175', '\x176', '\x3', 
		'\x2', '\x2', '\x2', '\x176', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x177', 
		'\x175', '\x3', '\x2', '\x2', '\x2', '\x178', '\x179', '\x5', '\x30', 
		'\x19', '\x2', '\x179', '!', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17B', 
		'\x5', '\x30', '\x19', '\x2', '\x17B', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x17C', '\x17D', '\x5', '\x30', '\x19', '\x2', '\x17D', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x17E', '\x17F', '\x5', '\x30', '\x19', '\x2', '\x17F', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x180', '\x181', '\x5', '\x32', '\x1A', 
		'\x2', '\x181', ')', '\x3', '\x2', '\x2', '\x2', '\x182', '\x183', '\x5', 
		'\x30', '\x19', '\x2', '\x183', '+', '\x3', '\x2', '\x2', '\x2', '\x184', 
		'\x185', '\x5', '\x30', '\x19', '\x2', '\x185', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x186', '\x190', '\t', '\x4', '\x2', '\x2', '\x187', '\x190', 
		'\x5', '\x34', '\x1B', '\x2', '\x188', '\x190', '\x5', '\x32', '\x1A', 
		'\x2', '\x189', '\x190', '\a', '[', '\x2', '\x2', '\x18A', '\x190', '\a', 
		'\\', '\x2', '\x2', '\x18B', '\x190', '\a', '^', '\x2', '\x2', '\x18C', 
		'\x190', '\a', '`', '\x2', '\x2', '\x18D', '\x190', '\a', '_', '\x2', 
		'\x2', '\x18E', '\x190', '\a', '\xF', '\x2', '\x2', '\x18F', '\x186', 
		'\x3', '\x2', '\x2', '\x2', '\x18F', '\x187', '\x3', '\x2', '\x2', '\x2', 
		'\x18F', '\x188', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x189', '\x3', 
		'\x2', '\x2', '\x2', '\x18F', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x18F', 
		'\x18B', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x18C', '\x3', '\x2', '\x2', 
		'\x2', '\x18F', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x18E', 
		'\x3', '\x2', '\x2', '\x2', '\x190', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x191', '\x192', '\a', ']', '\x2', '\x2', '\x192', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x193', '\x194', '\a', 'Y', '\x2', '\x2', '\x194', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x195', '\x196', '\a', 'Z', '\x2', '\x2', 
		'\x196', '\x35', '\x3', '\x2', '\x2', '\x2', '\x197', '\x198', '\t', '\x5', 
		'\x2', '\x2', '\x198', '\x37', '\x3', '\x2', '\x2', '\x2', '\x1C', ';', 
		'?', '\x46', 'T', '`', '\x64', 'r', 'w', '}', '\x8E', '\x96', '\x98', 
		'\xA3', '\xB1', '\xC1', '\xCE', '\xD7', '\xE2', '\xED', '\x10A', '\x115', 
		'\x159', '\x162', '\x173', '\x175', '\x18F',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
