//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Language.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class LanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IF=1, ELSE=2, SWITCH=3, CASE=4, DEFAULT=5, AND=6, OR=7, TRUE=8, FALSE=9, 
		NULL=10, MARKER=11, LOOKUP_FUNC=12, BASE_FUNC=13, TOTAL_PAYMENTS=14, TOTAL_DISCOUNTS=15, 
		DIRECT_RECALCULATION=16, PROPORTIONAL_RECALCULATION=17, ROUND_FUNCTION=18, 
		CLEAR_VALUES_FUNCTION=19, CLEAR_DISCOUNTS_FUNCTION=20, CLEAR_PAYMENTS_FUNCTION=21, 
		GET_DAY=22, GET_MONTH=23, GET_YEAR=24, ADD_DAY=25, ADD_MONTH=26, ADD_YEAR=27, 
		GET_DAY_DIFF=28, GET_MONTH_DIFF=29, GET_YEAR_DIFF=30, GET_DATE=31, LAST_DAY_PROCESS=32, 
		DESPREZAR=33, RBRACES=34, LBRACES=35, LPAREN=36, RPAREN=37, MULT=38, DIV=39, 
		PLUS=40, MINUS=41, GT=42, GE=43, LT=44, LE=45, EQ=46, NEQ=47, ATRIB=48, 
		VAR=49, CONST=50, RETURN=51, COMMA=52, QUOTE=53, DECIMAL=54, DATE=55, 
		IDENTIFIER=56, SEMI=57, COLON=58, COMMENT=59, WS=60;
	public const int
		RULE_rule_set = 0, RULE_rule_block = 1, RULE_assignment = 2, RULE_return_value = 3, 
		RULE_arithmetic_expression = 4, RULE_entity = 5;
	public static readonly string[] ruleNames = {
		"rule_set", "rule_block", "assignment", "return_value", "arithmetic_expression", 
		"entity"
	};

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'else'", "'switch'", "'case'", "'default'", "'&&'", "'||'", 
		"'true'", "'false'", "'null'", "'marker'", "'lookupFunction'", "'baseFunction'", 
		"'totalPayments'", "'totalDiscounts'", "'directRecalculation'", "'proportionalRecalculation'", 
		"'roundFunction'", "'clearValuesFunction'", "'clearDiscountsFunction'", 
		"'clearPaymentsFunction'", "'getDay'", "'getMonth'", "'getYear'", "'addDay'", 
		"'addMonth'", "'addYear'", "'getDayDiff'", "'getMonthDiff'", "'getYearDiff'", 
		"'getDate'", "'lastDayProcess'", "'desprezar'", "'{'", "'}'", "'('", "')'", 
		"'*'", "'/'", "'+'", "'-'", "'>'", "'>='", "'<'", "'<='", "'=='", "'!='", 
		"'='", "'var'", "'const'", "'retorno'", "','", "'\"'", null, null, null, 
		"';'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IF", "ELSE", "SWITCH", "CASE", "DEFAULT", "AND", "OR", "TRUE", 
		"FALSE", "NULL", "MARKER", "LOOKUP_FUNC", "BASE_FUNC", "TOTAL_PAYMENTS", 
		"TOTAL_DISCOUNTS", "DIRECT_RECALCULATION", "PROPORTIONAL_RECALCULATION", 
		"ROUND_FUNCTION", "CLEAR_VALUES_FUNCTION", "CLEAR_DISCOUNTS_FUNCTION", 
		"CLEAR_PAYMENTS_FUNCTION", "GET_DAY", "GET_MONTH", "GET_YEAR", "ADD_DAY", 
		"ADD_MONTH", "ADD_YEAR", "GET_DAY_DIFF", "GET_MONTH_DIFF", "GET_YEAR_DIFF", 
		"GET_DATE", "LAST_DAY_PROCESS", "DESPREZAR", "RBRACES", "LBRACES", "LPAREN", 
		"RPAREN", "MULT", "DIV", "PLUS", "MINUS", "GT", "GE", "LT", "LE", "EQ", 
		"NEQ", "ATRIB", "VAR", "CONST", "RETURN", "COMMA", "QUOTE", "DECIMAL", 
		"DATE", "IDENTIFIER", "SEMI", "COLON", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Rule_setContext : ParserRuleContext {
		public Return_valueContext return_value() {
			return GetRuleContext<Return_valueContext>(0);
		}
		public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public Rule_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_set; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterRule_set(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitRule_set(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_setContext rule_set() {
		Rule_setContext _localctx = new Rule_setContext(Context, State);
		EnterRule(_localctx, 0, RULE_rule_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << VAR) | (1L << CONST) | (1L << QUOTE) | (1L << DECIMAL) | (1L << DATE) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 12; rule_block();
				}
				}
				State = 17;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 18; return_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_blockContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public Rule_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterRule_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitRule_block(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_blockContext rule_block() {
		Rule_blockContext _localctx = new Rule_blockContext(Context, State);
		EnterRule(_localctx, 2, RULE_rule_block);
		try {
			State = 22;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 20; assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 21; arithmetic_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public ITerminalNode ATRIB() { return GetToken(LanguageParser.ATRIB, 0); }
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public ITerminalNode CONST() { return GetToken(LanguageParser.CONST, 0); }
		public ITerminalNode VAR() { return GetToken(LanguageParser.VAR, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 4, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONST) {
				{
				State = 24; Match(CONST);
				}
			}

			State = 28;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VAR) {
				{
				State = 27; Match(VAR);
				}
			}

			State = 30; Match(IDENTIFIER);
			State = 31; Match(ATRIB);
			State = 32; arithmetic_expression(0);
			State = 33; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_valueContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(LanguageParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public Return_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterReturn_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitReturn_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_valueContext return_value() {
		Return_valueContext _localctx = new Return_valueContext(Context, State);
		EnterRule(_localctx, 6, RULE_return_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35; Match(RETURN);
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 36; Match(IDENTIFIER);
				}
			}

			State = 39; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arithmetic_expressionContext : ParserRuleContext {
		public Arithmetic_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic_expression; } }
	 
		public Arithmetic_expressionContext() { }
		public virtual void CopyFrom(Arithmetic_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PlusExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(LanguageParser.PLUS, 0); }
		public PlusExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterPlusExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitPlusExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EntityExpressionContext : Arithmetic_expressionContext {
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public EntityExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterEntityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitEntityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetic_expressionContext arithmetic_expression() {
		return arithmetic_expression(0);
	}

	private Arithmetic_expressionContext arithmetic_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Arithmetic_expressionContext _localctx = new Arithmetic_expressionContext(Context, _parentState);
		Arithmetic_expressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_arithmetic_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new EntityExpressionContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 42; entity();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 49;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PlusExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
					State = 44;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 45; Match(PLUS);
					State = 46; arithmetic_expression(3);
					}
					} 
				}
				State = 51;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EntityContext : ParserRuleContext {
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
	 
		public EntityContext() { }
		public virtual void CopyFrom(EntityContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolEntityContext : EntityContext {
		public ITerminalNode TRUE() { return GetToken(LanguageParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(LanguageParser.FALSE, 0); }
		public BoolEntityContext(EntityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterBoolEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitBoolEntity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullEntityContext : EntityContext {
		public ITerminalNode NULL() { return GetToken(LanguageParser.NULL, 0); }
		public NullEntityContext(EntityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterNullEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitNullEntity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableEntityContext : EntityContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public VariableEntityContext(EntityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterVariableEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitVariableEntity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberEntityContext : EntityContext {
		public ITerminalNode DECIMAL() { return GetToken(LanguageParser.DECIMAL, 0); }
		public NumberEntityContext(EntityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterNumberEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitNumberEntity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringEntityContext : EntityContext {
		public ITerminalNode[] QUOTE() { return GetTokens(LanguageParser.QUOTE); }
		public ITerminalNode QUOTE(int i) {
			return GetToken(LanguageParser.QUOTE, i);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public StringEntityContext(EntityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterStringEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitStringEntity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateEntityContext : EntityContext {
		public ITerminalNode DATE() { return GetToken(LanguageParser.DATE, 0); }
		public DateEntityContext(EntityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterDateEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitDateEntity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		EntityContext _localctx = new EntityContext(Context, State);
		EnterRule(_localctx, 10, RULE_entity);
		int _la;
		try {
			State = 60;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
				_localctx = new BoolEntityContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 52;
				_la = TokenStream.LA(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case DECIMAL:
				_localctx = new NumberEntityContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 53; Match(DECIMAL);
				}
				break;
			case DATE:
				_localctx = new DateEntityContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 54; Match(DATE);
				}
				break;
			case QUOTE:
				_localctx = new StringEntityContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 55; Match(QUOTE);
				State = 56; Match(IDENTIFIER);
				State = 57; Match(QUOTE);
				}
				break;
			case IDENTIFIER:
				_localctx = new VariableEntityContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 58; Match(IDENTIFIER);
				}
				break;
			case NULL:
				_localctx = new NullEntityContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 59; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return arithmetic_expression_sempred((Arithmetic_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool arithmetic_expression_sempred(Arithmetic_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '>', '\x41', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\a', '\x2', 
		'\x10', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x13', '\v', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x19', 
		'\n', '\x3', '\x3', '\x4', '\x5', '\x4', '\x1C', '\n', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\x1F', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '(', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 
		'\x32', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x35', '\v', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '?', '\n', '\a', '\x3', '\a', '\x2', 
		'\x3', '\n', '\b', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\x2', '\x3', 
		'\x3', '\x2', '\n', '\v', '\x2', '\x45', '\x2', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x18', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\b', '%', '\x3', '\x2', '\x2', '\x2', '\n', 
		'+', '\x3', '\x2', '\x2', '\x2', '\f', '>', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x10', '\x5', '\x4', '\x3', '\x2', '\xF', '\xE', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x13', '\x3', '\x2', '\x2', '\x2', '\x11', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x11', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x14', '\x3', '\x2', '\x2', '\x2', '\x13', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x15', '\x5', '\b', '\x5', '\x2', '\x15', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x19', '\x5', '\x6', '\x4', '\x2', 
		'\x17', '\x19', '\x5', '\n', '\x6', '\x2', '\x18', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x17', '\x3', '\x2', '\x2', '\x2', '\x19', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x1C', '\a', '\x34', '\x2', '\x2', 
		'\x1B', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1F', 
		'\a', '\x33', '\x2', '\x2', '\x1E', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', '\x2', 
		'\x2', '\x2', ' ', '!', '\a', ':', '\x2', '\x2', '!', '\"', '\a', '\x32', 
		'\x2', '\x2', '\"', '#', '\x5', '\n', '\x6', '\x2', '#', '$', '\a', ';', 
		'\x2', '\x2', '$', '\a', '\x3', '\x2', '\x2', '\x2', '%', '\'', '\a', 
		'\x35', '\x2', '\x2', '&', '(', '\a', ':', '\x2', '\x2', '\'', '&', '\x3', 
		'\x2', '\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', ')', 
		'\x3', '\x2', '\x2', '\x2', ')', '*', '\a', ';', '\x2', '\x2', '*', '\t', 
		'\x3', '\x2', '\x2', '\x2', '+', ',', '\b', '\x6', '\x1', '\x2', ',', 
		'-', '\x5', '\f', '\a', '\x2', '-', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'.', '/', '\f', '\x4', '\x2', '\x2', '/', '\x30', '\a', '*', '\x2', '\x2', 
		'\x30', '\x32', '\x5', '\n', '\x6', '\x5', '\x31', '.', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x35', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\v', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '?', '\t', '\x2', '\x2', '\x2', '\x37', '?', '\a', 
		'\x38', '\x2', '\x2', '\x38', '?', '\a', '\x39', '\x2', '\x2', '\x39', 
		':', '\a', '\x37', '\x2', '\x2', ':', ';', '\a', ':', '\x2', '\x2', ';', 
		'?', '\a', '\x37', '\x2', '\x2', '<', '?', '\a', ':', '\x2', '\x2', '=', 
		'?', '\a', '\f', '\x2', '\x2', '>', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x37', '\x3', '\x2', '\x2', '\x2', '>', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x39', '\x3', '\x2', '\x2', '\x2', '>', '<', '\x3', '\x2', 
		'\x2', '\x2', '>', '=', '\x3', '\x2', '\x2', '\x2', '?', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\t', '\x11', '\x18', '\x1B', '\x1E', '\'', '\x33', 
		'>',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
