//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Language.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class LanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IF=1, ELSE=2, SWITCH=3, CASE=4, DEFAULT=5, AND=6, OR=7, TRUE=8, FALSE=9, 
		NULL=10, MARKER=11, SUM=12, MAX=13, MIN=14, AVERAGE=15, LENGTH=16, COALESCE=17, 
		CARACTERISTICA_TABELA=18, CARACTERISTICA=19, PARAMETRO=20, PARAMETRO_CODIGO=21, 
		PARAMETRO_INTERVALO=22, ROUND=23, LOOKUP_FUNC=24, BASE_FUNC=25, TOTAL_PAYMENTS=26, 
		TOTAL_DISCOUNTS=27, DIRECT_RECALCULATION=28, PROPORTIONAL_RECALCULATION=29, 
		CLEAR_VALUES_FUNCTION=30, CLEAR_DISCOUNTS_FUNCTION=31, CLEAR_PAYMENTS_FUNCTION=32, 
		GET_DAY=33, GET_MONTH=34, GET_YEAR=35, ADD_DAY=36, ADD_MONTH=37, ADD_YEAR=38, 
		GET_DAY_DIFF=39, GET_MONTH_DIFF=40, GET_YEAR_DIFF=41, GET_DATE=42, LAST_DAY_PROCESS=43, 
		DESPREZAR=44, WHILE=45, LBRACKET=46, RBRACKET=47, LBRACES=48, RBRACES=49, 
		LPAREN=50, RPAREN=51, MULT=52, DIV=53, PLUS=54, MINUS=55, GT=56, GE=57, 
		LT=58, LE=59, EQ=60, NEQ=61, ATRIB=62, VAR=63, CONST=64, RETURN=65, COMMA=66, 
		DOT=67, QUOTE=68, NUMBER=69, DECIMAL=70, DATE=71, IDENTIFIER=72, TEXT=73, 
		VAR_PRIMARY=74, VAR_OBJECT=75, VAR_ARRAY=76, SEMI=77, COLON=78, COMMENT=79, 
		WS=80;
	public const int
		RULE_rule_set = 0, RULE_rule_block = 1, RULE_assignment = 2, RULE_return_value = 3, 
		RULE_conditional = 4, RULE_then_block = 5, RULE_else_block = 6, RULE_if_expression = 7, 
		RULE_comparison_expression = 8, RULE_comparison_operator = 9, RULE_loop = 10, 
		RULE_function_signature = 11, RULE_arithmetic_expression = 12, RULE_tabela_caracteristica = 13, 
		RULE_descricao_caracteristica = 14, RULE_valor_fator_caracteristica = 15, 
		RULE_codigo_caracteristica = 16, RULE_exercicio_caracteristica = 17, RULE_coluna_caracteristica = 18, 
		RULE_coluna_valor_caracteristica = 19, RULE_entity = 20, RULE_text = 21, 
		RULE_number_integer = 22, RULE_number_decimal = 23;
	public static readonly string[] ruleNames = {
		"rule_set", "rule_block", "assignment", "return_value", "conditional", 
		"then_block", "else_block", "if_expression", "comparison_expression", 
		"comparison_operator", "loop", "function_signature", "arithmetic_expression", 
		"tabela_caracteristica", "descricao_caracteristica", "valor_fator_caracteristica", 
		"codigo_caracteristica", "exercicio_caracteristica", "coluna_caracteristica", 
		"coluna_valor_caracteristica", "entity", "text", "number_integer", "number_decimal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'se'", "'senao'", "'switch'", "'case'", "'default'", "'&&'", "'||'", 
		"'true'", "'false'", "'null'", "'marker'", "'_SOMA'", "'_MAXIMO'", "'_MINIMO'", 
		"'_MEDIA'", "'_TAMANHO'", "'_COALESCE'", "'_CARACTERISTICATABELA'", "'_CARACTERISTICA'", 
		"'_PARAMETRO'", "'_PARAMETROCODIGO'", "'_PARAMETROINTERVALO'", "'_ARREDONDAR'", 
		"'lookupFunction'", "'baseFunction'", "'totalPayments'", "'totalDiscounts'", 
		"'directRecalculation'", "'proportionalRecalculation'", "'clearValuesFunction'", 
		"'clearDiscountsFunction'", "'clearPaymentsFunction'", "'getDay'", "'getMonth'", 
		"'getYear'", "'addDay'", "'addMonth'", "'addYear'", "'getDayDiff'", "'getMonthDiff'", 
		"'getYearDiff'", "'getDate'", "'lastDayProcess'", "'desprezar'", "'enquanto'", 
		"'['", "']'", "'{'", "'}'", "'('", "')'", "'*'", "'/'", "'+'", "'-'", 
		"'>'", "'>='", "'<'", "'<='", "'=='", "'!='", "'='", "'var'", "'const'", 
		"'retorno'", "','", "'.'", "'\"'", null, null, null, null, null, null, 
		null, null, "';'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IF", "ELSE", "SWITCH", "CASE", "DEFAULT", "AND", "OR", "TRUE", 
		"FALSE", "NULL", "MARKER", "SUM", "MAX", "MIN", "AVERAGE", "LENGTH", "COALESCE", 
		"CARACTERISTICA_TABELA", "CARACTERISTICA", "PARAMETRO", "PARAMETRO_CODIGO", 
		"PARAMETRO_INTERVALO", "ROUND", "LOOKUP_FUNC", "BASE_FUNC", "TOTAL_PAYMENTS", 
		"TOTAL_DISCOUNTS", "DIRECT_RECALCULATION", "PROPORTIONAL_RECALCULATION", 
		"CLEAR_VALUES_FUNCTION", "CLEAR_DISCOUNTS_FUNCTION", "CLEAR_PAYMENTS_FUNCTION", 
		"GET_DAY", "GET_MONTH", "GET_YEAR", "ADD_DAY", "ADD_MONTH", "ADD_YEAR", 
		"GET_DAY_DIFF", "GET_MONTH_DIFF", "GET_YEAR_DIFF", "GET_DATE", "LAST_DAY_PROCESS", 
		"DESPREZAR", "WHILE", "LBRACKET", "RBRACKET", "LBRACES", "RBRACES", "LPAREN", 
		"RPAREN", "MULT", "DIV", "PLUS", "MINUS", "GT", "GE", "LT", "LE", "EQ", 
		"NEQ", "ATRIB", "VAR", "CONST", "RETURN", "COMMA", "DOT", "QUOTE", "NUMBER", 
		"DECIMAL", "DATE", "IDENTIFIER", "TEXT", "VAR_PRIMARY", "VAR_OBJECT", 
		"VAR_ARRAY", "SEMI", "COLON", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Rule_setContext : ParserRuleContext {
		public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public Return_valueContext return_value() {
			return GetRuleContext<Return_valueContext>(0);
		}
		public Rule_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_set; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_setContext rule_set() {
		Rule_setContext _localctx = new Rule_setContext(Context, State);
		EnterRule(_localctx, 0, RULE_rule_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << SUM) | (1L << MAX) | (1L << MIN) | (1L << AVERAGE) | (1L << LENGTH) | (1L << COALESCE) | (1L << CARACTERISTICA_TABELA) | (1L << CARACTERISTICA) | (1L << PARAMETRO) | (1L << PARAMETRO_CODIGO) | (1L << PARAMETRO_INTERVALO) | (1L << ROUND) | (1L << WHILE) | (1L << LPAREN) | (1L << VAR))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (NUMBER - 69)) | (1L << (DECIMAL - 69)) | (1L << (DATE - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (VAR_PRIMARY - 69)) | (1L << (VAR_OBJECT - 69)) | (1L << (VAR_ARRAY - 69)))) != 0)) {
				{
				{
				State = 48; rule_block();
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURN) {
				{
				State = 54; return_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_blockContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ConditionalContext conditional() {
			return GetRuleContext<ConditionalContext>(0);
		}
		public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public Rule_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_blockContext rule_block() {
		Rule_blockContext _localctx = new Rule_blockContext(Context, State);
		EnterRule(_localctx, 2, RULE_rule_block);
		try {
			State = 61;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 57; assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 58; arithmetic_expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 59; conditional();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 60; loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	 
		public AssignmentContext() { }
		public virtual void CopyFrom(AssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ComparisonAssignmentContext : AssignmentContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public ITerminalNode ATRIB() { return GetToken(LanguageParser.ATRIB, 0); }
		public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public ITerminalNode VAR() { return GetToken(LanguageParser.VAR, 0); }
		public ComparisonAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticAssignmentContext : AssignmentContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public ITerminalNode ATRIB() { return GetToken(LanguageParser.ATRIB, 0); }
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public ITerminalNode VAR() { return GetToken(LanguageParser.VAR, 0); }
		public ArithmeticAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 4, RULE_assignment);
		int _la;
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new ArithmeticAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VAR) {
					{
					State = 63; Match(VAR);
					}
				}

				State = 66; Match(IDENTIFIER);
				State = 67; Match(ATRIB);
				State = 68; arithmetic_expression(0);
				State = 69; Match(SEMI);
				}
				break;
			case 2:
				_localctx = new ComparisonAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VAR) {
					{
					State = 71; Match(VAR);
					}
				}

				State = 74; Match(IDENTIFIER);
				State = 75; Match(ATRIB);
				State = 76; comparison_expression();
				State = 77; Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_valueContext : ParserRuleContext {
		public Return_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_value; } }
	 
		public Return_valueContext() { }
		public virtual void CopyFrom(Return_valueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ReturnValueContext : Return_valueContext {
		public ITerminalNode RETURN() { return GetToken(LanguageParser.RETURN, 0); }
		public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ReturnValueContext(Return_valueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_valueContext return_value() {
		Return_valueContext _localctx = new Return_valueContext(Context, State);
		EnterRule(_localctx, 6, RULE_return_value);
		int _la;
		try {
			_localctx = new ReturnValueContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(RETURN);
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << SUM) | (1L << MAX) | (1L << MIN) | (1L << AVERAGE) | (1L << LENGTH) | (1L << COALESCE) | (1L << CARACTERISTICA_TABELA) | (1L << CARACTERISTICA) | (1L << PARAMETRO) | (1L << PARAMETRO_CODIGO) | (1L << PARAMETRO_INTERVALO) | (1L << ROUND) | (1L << LPAREN))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (NUMBER - 69)) | (1L << (DECIMAL - 69)) | (1L << (DATE - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (VAR_PRIMARY - 69)) | (1L << (VAR_OBJECT - 69)) | (1L << (VAR_ARRAY - 69)))) != 0)) {
				{
				State = 82; arithmetic_expression(0);
				}
			}

			State = 85; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(LanguageParser.IF, 0); }
		public If_expressionContext if_expression() {
			return GetRuleContext<If_expressionContext>(0);
		}
		public ITerminalNode[] LBRACES() { return GetTokens(LanguageParser.LBRACES); }
		public ITerminalNode LBRACES(int i) {
			return GetToken(LanguageParser.LBRACES, i);
		}
		public Then_blockContext then_block() {
			return GetRuleContext<Then_blockContext>(0);
		}
		public ITerminalNode[] RBRACES() { return GetTokens(LanguageParser.RBRACES); }
		public ITerminalNode RBRACES(int i) {
			return GetToken(LanguageParser.RBRACES, i);
		}
		public ITerminalNode ELSE() { return GetToken(LanguageParser.ELSE, 0); }
		public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		public ConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalContext conditional() {
		ConditionalContext _localctx = new ConditionalContext(Context, State);
		EnterRule(_localctx, 8, RULE_conditional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; Match(IF);
			State = 88; if_expression(0);
			State = 89; Match(LBRACES);
			State = 90; then_block();
			State = 91; Match(RBRACES);
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 92; Match(ELSE);
				State = 93; Match(LBRACES);
				State = 94; else_block();
				State = 95; Match(RBRACES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Then_blockContext : ParserRuleContext {
		public Then_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_then_block; } }
	 
		public Then_blockContext() { }
		public virtual void CopyFrom(Then_blockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ThenBlockContext : Then_blockContext {
		public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public ThenBlockContext(Then_blockContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThenBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Then_blockContext then_block() {
		Then_blockContext _localctx = new Then_blockContext(Context, State);
		EnterRule(_localctx, 10, RULE_then_block);
		int _la;
		try {
			_localctx = new ThenBlockContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << SUM) | (1L << MAX) | (1L << MIN) | (1L << AVERAGE) | (1L << LENGTH) | (1L << COALESCE) | (1L << CARACTERISTICA_TABELA) | (1L << CARACTERISTICA) | (1L << PARAMETRO) | (1L << PARAMETRO_CODIGO) | (1L << PARAMETRO_INTERVALO) | (1L << ROUND) | (1L << WHILE) | (1L << LPAREN) | (1L << VAR))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (NUMBER - 69)) | (1L << (DECIMAL - 69)) | (1L << (DATE - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (VAR_PRIMARY - 69)) | (1L << (VAR_OBJECT - 69)) | (1L << (VAR_ARRAY - 69)))) != 0)) {
				{
				{
				State = 99; rule_block();
				}
				}
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_blockContext : ParserRuleContext {
		public Else_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_block; } }
	 
		public Else_blockContext() { }
		public virtual void CopyFrom(Else_blockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ElseBlockContext : Else_blockContext {
		public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public ElseBlockContext(Else_blockContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_blockContext else_block() {
		Else_blockContext _localctx = new Else_blockContext(Context, State);
		EnterRule(_localctx, 12, RULE_else_block);
		int _la;
		try {
			_localctx = new ElseBlockContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << SUM) | (1L << MAX) | (1L << MIN) | (1L << AVERAGE) | (1L << LENGTH) | (1L << COALESCE) | (1L << CARACTERISTICA_TABELA) | (1L << CARACTERISTICA) | (1L << PARAMETRO) | (1L << PARAMETRO_CODIGO) | (1L << PARAMETRO_INTERVALO) | (1L << ROUND) | (1L << WHILE) | (1L << LPAREN) | (1L << VAR))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (NUMBER - 69)) | (1L << (DECIMAL - 69)) | (1L << (DATE - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (VAR_PRIMARY - 69)) | (1L << (VAR_OBJECT - 69)) | (1L << (VAR_ARRAY - 69)))) != 0)) {
				{
				{
				State = 105; rule_block();
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_expressionContext : ParserRuleContext {
		public If_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_expression; } }
	 
		public If_expressionContext() { }
		public virtual void CopyFrom(If_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OrExpressionContext : If_expressionContext {
		public If_expressionContext[] if_expression() {
			return GetRuleContexts<If_expressionContext>();
		}
		public If_expressionContext if_expression(int i) {
			return GetRuleContext<If_expressionContext>(i);
		}
		public ITerminalNode OR() { return GetToken(LanguageParser.OR, 0); }
		public OrExpressionContext(If_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfComparisonExpressionContext : If_expressionContext {
		public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public IfComparisonExpressionContext(If_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : If_expressionContext {
		public If_expressionContext[] if_expression() {
			return GetRuleContexts<If_expressionContext>();
		}
		public If_expressionContext if_expression(int i) {
			return GetRuleContext<If_expressionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(LanguageParser.AND, 0); }
		public AndExpressionContext(If_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisIfExpressionContext : If_expressionContext {
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public If_expressionContext if_expression() {
			return GetRuleContext<If_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ParenthesisIfExpressionContext(If_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfEntityContext : If_expressionContext {
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public IfEntityContext(If_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_expressionContext if_expression() {
		return if_expression(0);
	}

	private If_expressionContext if_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		If_expressionContext _localctx = new If_expressionContext(Context, _parentState);
		If_expressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_if_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				_localctx = new IfComparisonExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 112; comparison_expression();
				}
				break;
			case 2:
				{
				_localctx = new ParenthesisIfExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 113; Match(LPAREN);
				State = 114; if_expression(0);
				State = 115; Match(RPAREN);
				}
				break;
			case 3:
				{
				_localctx = new IfEntityContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 117; entity();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 128;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 126;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new AndExpressionContext(new If_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_if_expression);
						State = 120;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 121; Match(AND);
						State = 122; if_expression(6);
						}
						break;
					case 2:
						{
						_localctx = new OrExpressionContext(new If_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_if_expression);
						State = 123;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 124; Match(OR);
						State = 125; if_expression(5);
						}
						break;
					}
					} 
				}
				State = 130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Comparison_expressionContext : ParserRuleContext {
		public Comparison_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_expression; } }
	 
		public Comparison_expressionContext() { }
		public virtual void CopyFrom(Comparison_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesisComparisonExpressionContext : Comparison_expressionContext {
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ParenthesisComparisonExpressionContext(Comparison_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : Comparison_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public ComparisonExpressionContext(Comparison_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_expressionContext comparison_expression() {
		Comparison_expressionContext _localctx = new Comparison_expressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_comparison_expression);
		try {
			State = 139;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				_localctx = new ComparisonExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 131; arithmetic_expression(0);
				State = 132; comparison_operator();
				State = 133; arithmetic_expression(0);
				}
				break;
			case 2:
				_localctx = new ParenthesisComparisonExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 135; Match(LPAREN);
				State = 136; comparison_expression();
				State = 137; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		public ITerminalNode GT() { return GetToken(LanguageParser.GT, 0); }
		public ITerminalNode GE() { return GetToken(LanguageParser.GE, 0); }
		public ITerminalNode LT() { return GetToken(LanguageParser.LT, 0); }
		public ITerminalNode LE() { return GetToken(LanguageParser.LE, 0); }
		public ITerminalNode EQ() { return GetToken(LanguageParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(LanguageParser.NEQ, 0); }
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(Context, State);
		EnterRule(_localctx, 18, RULE_comparison_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << GE) | (1L << LT) | (1L << LE) | (1L << EQ) | (1L << NEQ))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
	 
		public LoopContext() { }
		public virtual void CopyFrom(LoopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhileExpressionContext : LoopContext {
		public ITerminalNode WHILE() { return GetToken(LanguageParser.WHILE, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public If_expressionContext if_expression() {
			return GetRuleContext<If_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ITerminalNode LBRACES() { return GetToken(LanguageParser.LBRACES, 0); }
		public ITerminalNode RBRACES() { return GetToken(LanguageParser.RBRACES, 0); }
		public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public WhileExpressionContext(LoopContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 20, RULE_loop);
		int _la;
		try {
			_localctx = new WhileExpressionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(WHILE);
			State = 144; Match(LPAREN);
			State = 145; if_expression(0);
			State = 146; Match(RPAREN);
			State = 147; Match(LBRACES);
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << SUM) | (1L << MAX) | (1L << MIN) | (1L << AVERAGE) | (1L << LENGTH) | (1L << COALESCE) | (1L << CARACTERISTICA_TABELA) | (1L << CARACTERISTICA) | (1L << PARAMETRO) | (1L << PARAMETRO_CODIGO) | (1L << PARAMETRO_INTERVALO) | (1L << ROUND) | (1L << WHILE) | (1L << LPAREN) | (1L << VAR))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (NUMBER - 69)) | (1L << (DECIMAL - 69)) | (1L << (DATE - 69)) | (1L << (IDENTIFIER - 69)) | (1L << (VAR_PRIMARY - 69)) | (1L << (VAR_OBJECT - 69)) | (1L << (VAR_ARRAY - 69)))) != 0)) {
				{
				{
				State = 148; rule_block();
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 154; Match(RBRACES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_signatureContext : ParserRuleContext {
		public Function_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_signature; } }
	 
		public Function_signatureContext() { }
		public virtual void CopyFrom(Function_signatureContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParametroFunctionContext : Function_signatureContext {
		public ITerminalNode PARAMETRO() { return GetToken(LanguageParser.PARAMETRO, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(LanguageParser.COMMA, 0); }
		public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public ParametroFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametroFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceFunctionContext : Function_signatureContext {
		public ITerminalNode COALESCE() { return GetToken(LanguageParser.COALESCE, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public CoalesceFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParametroCodigoFunctionContext : Function_signatureContext {
		public ITerminalNode PARAMETRO_CODIGO() { return GetToken(LanguageParser.PARAMETRO_CODIGO, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public ParametroCodigoFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametroCodigoFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaracteristicaContext : Function_signatureContext {
		public ITerminalNode CARACTERISTICA() { return GetToken(LanguageParser.CARACTERISTICA, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public Descricao_caracteristicaContext descricao_caracteristica() {
			return GetRuleContext<Descricao_caracteristicaContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public Codigo_caracteristicaContext codigo_caracteristica() {
			return GetRuleContext<Codigo_caracteristicaContext>(0);
		}
		public Valor_fator_caracteristicaContext valor_fator_caracteristica() {
			return GetRuleContext<Valor_fator_caracteristicaContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public Exercicio_caracteristicaContext exercicio_caracteristica() {
			return GetRuleContext<Exercicio_caracteristicaContext>(0);
		}
		public CaracteristicaContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParametroIntervaloFunctionContext : Function_signatureContext {
		public ITerminalNode PARAMETRO_INTERVALO() { return GetToken(LanguageParser.PARAMETRO_INTERVALO, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public ParametroIntervaloFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametroIntervaloFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LengthFunctionContext : Function_signatureContext {
		public ITerminalNode LENGTH() { return GetToken(LanguageParser.LENGTH, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public LengthFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaracteristicaTabelaContext : Function_signatureContext {
		public ITerminalNode CARACTERISTICA_TABELA() { return GetToken(LanguageParser.CARACTERISTICA_TABELA, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public Tabela_caracteristicaContext tabela_caracteristica() {
			return GetRuleContext<Tabela_caracteristicaContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public Descricao_caracteristicaContext descricao_caracteristica() {
			return GetRuleContext<Descricao_caracteristicaContext>(0);
		}
		public Coluna_caracteristicaContext coluna_caracteristica() {
			return GetRuleContext<Coluna_caracteristicaContext>(0);
		}
		public Exercicio_caracteristicaContext exercicio_caracteristica() {
			return GetRuleContext<Exercicio_caracteristicaContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public Valor_fator_caracteristicaContext valor_fator_caracteristica() {
			return GetRuleContext<Valor_fator_caracteristicaContext>(0);
		}
		public CaracteristicaTabelaContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaracteristicaTabela(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumFunctionContext : Function_signatureContext {
		public ITerminalNode SUM() { return GetToken(LanguageParser.SUM, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode VAR_OBJECT() { return GetToken(LanguageParser.VAR_OBJECT, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public SumFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinFunctionContext : Function_signatureContext {
		public ITerminalNode MIN() { return GetToken(LanguageParser.MIN, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode VAR_OBJECT() { return GetToken(LanguageParser.VAR_OBJECT, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public MinFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AverageFunctionContext : Function_signatureContext {
		public ITerminalNode AVERAGE() { return GetToken(LanguageParser.AVERAGE, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode VAR_OBJECT() { return GetToken(LanguageParser.VAR_OBJECT, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public AverageFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAverageFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaxFunctionContext : Function_signatureContext {
		public ITerminalNode MAX() { return GetToken(LanguageParser.MAX, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public ITerminalNode VAR_OBJECT() { return GetToken(LanguageParser.VAR_OBJECT, 0); }
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public MaxFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoundFunctionContext : Function_signatureContext {
		public ITerminalNode ROUND() { return GetToken(LanguageParser.ROUND, 0); }
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public Number_decimalContext number_decimal() {
			return GetRuleContext<Number_decimalContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(LanguageParser.COMMA, 0); }
		public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public RoundFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoundFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_signatureContext function_signature() {
		Function_signatureContext _localctx = new Function_signatureContext(Context, State);
		EnterRule(_localctx, 22, RULE_function_signature);
		int _la;
		try {
			State = 256;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CARACTERISTICA_TABELA:
				_localctx = new CaracteristicaTabelaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 156; Match(CARACTERISTICA_TABELA);
				State = 157; Match(LPAREN);
				State = 158; tabela_caracteristica();
				State = 159; Match(COMMA);
				State = 160; descricao_caracteristica();
				State = 161; Match(COMMA);
				State = 162; coluna_caracteristica();
				State = 163; Match(COMMA);
				State = 164; exercicio_caracteristica();
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 165; Match(COMMA);
					State = 166; valor_fator_caracteristica();
					}
				}

				State = 169; Match(RPAREN);
				}
				break;
			case CARACTERISTICA:
				_localctx = new CaracteristicaContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 171; Match(CARACTERISTICA);
				State = 172; Match(LPAREN);
				State = 173; descricao_caracteristica();
				State = 174; Match(COMMA);
				State = 175; codigo_caracteristica();
				State = 176; Match(COMMA);
				State = 177; valor_fator_caracteristica();
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 178; Match(COMMA);
					State = 179; exercicio_caracteristica();
					}
				}

				State = 182; Match(RPAREN);
				}
				break;
			case PARAMETRO:
				_localctx = new ParametroFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 184; Match(PARAMETRO);
				State = 185; Match(LPAREN);
				State = 186; text();
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 187; Match(COMMA);
					State = 188; number_integer();
					}
				}

				State = 191; Match(RPAREN);
				}
				break;
			case PARAMETRO_CODIGO:
				_localctx = new ParametroCodigoFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 193; Match(PARAMETRO_CODIGO);
				State = 194; Match(LPAREN);
				State = 195; text();
				State = 196; Match(COMMA);
				State = 197; text();
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 198; Match(COMMA);
					State = 199; number_integer();
					}
				}

				State = 202; Match(RPAREN);
				}
				break;
			case PARAMETRO_INTERVALO:
				_localctx = new ParametroIntervaloFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 204; Match(PARAMETRO_INTERVALO);
				State = 205; Match(LPAREN);
				State = 206; text();
				State = 207; Match(COMMA);
				State = 208; text();
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 209; Match(COMMA);
					State = 210; number_integer();
					}
				}

				State = 213; Match(RPAREN);
				}
				break;
			case SUM:
				_localctx = new SumFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 215; Match(SUM);
				State = 216; Match(LPAREN);
				State = 217; Match(VAR_OBJECT);
				State = 218; Match(RPAREN);
				}
				break;
			case MAX:
				_localctx = new MaxFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 219; Match(MAX);
				State = 220; Match(LPAREN);
				State = 221; Match(VAR_OBJECT);
				State = 222; Match(RPAREN);
				}
				break;
			case MIN:
				_localctx = new MinFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 223; Match(MIN);
				State = 224; Match(LPAREN);
				State = 225; Match(VAR_OBJECT);
				State = 226; Match(RPAREN);
				}
				break;
			case AVERAGE:
				_localctx = new AverageFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 227; Match(AVERAGE);
				State = 228; Match(LPAREN);
				State = 229; Match(VAR_OBJECT);
				State = 230; Match(RPAREN);
				}
				break;
			case LENGTH:
				_localctx = new LengthFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 231; Match(LENGTH);
				State = 232; Match(LPAREN);
				State = 233; Match(VAR_PRIMARY);
				State = 234; Match(RPAREN);
				}
				break;
			case ROUND:
				_localctx = new RoundFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 235; Match(ROUND);
				State = 236; Match(LPAREN);
				State = 237; number_decimal();
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 238; Match(COMMA);
					State = 239; number_integer();
					}
				}

				State = 242; Match(RPAREN);
				}
				break;
			case COALESCE:
				_localctx = new CoalesceFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 244; Match(COALESCE);
				State = 245; Match(LPAREN);
				State = 246; entity();
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 247; Match(COMMA);
					State = 248; entity();
					}
					}
					State = 253;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 254; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arithmetic_expressionContext : ParserRuleContext {
		public Arithmetic_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic_expression; } }
	 
		public Arithmetic_expressionContext() { }
		public virtual void CopyFrom(Arithmetic_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MinusExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(LanguageParser.MINUS, 0); }
		public MinusExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpressionContext : Arithmetic_expressionContext {
		public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ParenthesisExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode MULT() { return GetToken(LanguageParser.MULT, 0); }
		public MultExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(LanguageParser.DIV, 0); }
		public DivExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusExpressionContext : Arithmetic_expressionContext {
		public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(LanguageParser.PLUS, 0); }
		public PlusExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfFunctionSignatureContext : Arithmetic_expressionContext {
		public Function_signatureContext function_signature() {
			return GetRuleContext<Function_signatureContext>(0);
		}
		public IfFunctionSignatureContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EntityExpressionContext : Arithmetic_expressionContext {
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public EntityExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetic_expressionContext arithmetic_expression() {
		return arithmetic_expression(0);
	}

	private Arithmetic_expressionContext arithmetic_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Arithmetic_expressionContext _localctx = new Arithmetic_expressionContext(Context, _parentState);
		Arithmetic_expressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_arithmetic_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				_localctx = new ParenthesisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 259; Match(LPAREN);
				State = 260; arithmetic_expression(0);
				State = 261; Match(RPAREN);
				}
				break;
			case SUM:
			case MAX:
			case MIN:
			case AVERAGE:
			case LENGTH:
			case COALESCE:
			case CARACTERISTICA_TABELA:
			case CARACTERISTICA:
			case PARAMETRO:
			case PARAMETRO_CODIGO:
			case PARAMETRO_INTERVALO:
			case ROUND:
				{
				_localctx = new IfFunctionSignatureContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 263; function_signature();
				}
				break;
			case TRUE:
			case FALSE:
			case NULL:
			case NUMBER:
			case DECIMAL:
			case DATE:
			case IDENTIFIER:
			case VAR_PRIMARY:
			case VAR_OBJECT:
			case VAR_ARRAY:
				{
				_localctx = new EntityExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 264; entity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 281;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 279;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
					case 1:
						{
						_localctx = new MultExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 267;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 268; Match(MULT);
						State = 269; arithmetic_expression(8);
						}
						break;
					case 2:
						{
						_localctx = new DivExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 270;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 271; Match(DIV);
						State = 272; arithmetic_expression(7);
						}
						break;
					case 3:
						{
						_localctx = new PlusExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 273;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 274; Match(PLUS);
						State = 275; arithmetic_expression(6);
						}
						break;
					case 4:
						{
						_localctx = new MinusExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 276;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 277; Match(MINUS);
						State = 278; arithmetic_expression(5);
						}
						break;
					}
					} 
				}
				State = 283;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Tabela_caracteristicaContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public Tabela_caracteristicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabela_caracteristica; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabela_caracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tabela_caracteristicaContext tabela_caracteristica() {
		Tabela_caracteristicaContext _localctx = new Tabela_caracteristicaContext(Context, State);
		EnterRule(_localctx, 26, RULE_tabela_caracteristica);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Descricao_caracteristicaContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public Descricao_caracteristicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_descricao_caracteristica; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescricao_caracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Descricao_caracteristicaContext descricao_caracteristica() {
		Descricao_caracteristicaContext _localctx = new Descricao_caracteristicaContext(Context, State);
		EnterRule(_localctx, 28, RULE_descricao_caracteristica);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Valor_fator_caracteristicaContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public Valor_fator_caracteristicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valor_fator_caracteristica; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValor_fator_caracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Valor_fator_caracteristicaContext valor_fator_caracteristica() {
		Valor_fator_caracteristicaContext _localctx = new Valor_fator_caracteristicaContext(Context, State);
		EnterRule(_localctx, 30, RULE_valor_fator_caracteristica);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Codigo_caracteristicaContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public Codigo_caracteristicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codigo_caracteristica; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodigo_caracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Codigo_caracteristicaContext codigo_caracteristica() {
		Codigo_caracteristicaContext _localctx = new Codigo_caracteristicaContext(Context, State);
		EnterRule(_localctx, 32, RULE_codigo_caracteristica);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exercicio_caracteristicaContext : ParserRuleContext {
		public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public Exercicio_caracteristicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exercicio_caracteristica; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExercicio_caracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exercicio_caracteristicaContext exercicio_caracteristica() {
		Exercicio_caracteristicaContext _localctx = new Exercicio_caracteristicaContext(Context, State);
		EnterRule(_localctx, 34, RULE_exercicio_caracteristica);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292; number_integer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Coluna_caracteristicaContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public Coluna_caracteristicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coluna_caracteristica; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColuna_caracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Coluna_caracteristicaContext coluna_caracteristica() {
		Coluna_caracteristicaContext _localctx = new Coluna_caracteristicaContext(Context, State);
		EnterRule(_localctx, 36, RULE_coluna_caracteristica);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Coluna_valor_caracteristicaContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public Coluna_valor_caracteristicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_coluna_valor_caracteristica; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColuna_valor_caracteristica(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Coluna_valor_caracteristicaContext coluna_valor_caracteristica() {
		Coluna_valor_caracteristicaContext _localctx = new Coluna_valor_caracteristicaContext(Context, State);
		EnterRule(_localctx, 38, RULE_coluna_valor_caracteristica);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : ParserRuleContext {
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
	 
		public EntityContext() { }
		public virtual void CopyFrom(EntityContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolEntityContext : EntityContext {
		public ITerminalNode TRUE() { return GetToken(LanguageParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(LanguageParser.FALSE, 0); }
		public BoolEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarPrimaryEntityContext : EntityContext {
		public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		public VarPrimaryEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarPrimaryEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullEntityContext : EntityContext {
		public ITerminalNode NULL() { return GetToken(LanguageParser.NULL, 0); }
		public NullEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberDecimalEntityContext : EntityContext {
		public Number_decimalContext number_decimal() {
			return GetRuleContext<Number_decimalContext>(0);
		}
		public NumberDecimalEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberDecimalEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarArrayEntityContext : EntityContext {
		public ITerminalNode VAR_ARRAY() { return GetToken(LanguageParser.VAR_ARRAY, 0); }
		public VarArrayEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarArrayEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableEntityContext : EntityContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public VariableEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberIntegerEntityContext : EntityContext {
		public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public NumberIntegerEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberIntegerEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateEntityContext : EntityContext {
		public ITerminalNode DATE() { return GetToken(LanguageParser.DATE, 0); }
		public DateEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarObjectEntityContext : EntityContext {
		public ITerminalNode VAR_OBJECT() { return GetToken(LanguageParser.VAR_OBJECT, 0); }
		public VarObjectEntityContext(EntityContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarObjectEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		EntityContext _localctx = new EntityContext(Context, State);
		EnterRule(_localctx, 40, RULE_entity);
		int _la;
		try {
			State = 307;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
				_localctx = new BoolEntityContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 298;
				_la = TokenStream.LA(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case DECIMAL:
				_localctx = new NumberDecimalEntityContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 299; number_decimal();
				}
				break;
			case NUMBER:
				_localctx = new NumberIntegerEntityContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 300; number_integer();
				}
				break;
			case DATE:
				_localctx = new DateEntityContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 301; Match(DATE);
				}
				break;
			case IDENTIFIER:
				_localctx = new VariableEntityContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 302; Match(IDENTIFIER);
				}
				break;
			case VAR_PRIMARY:
				_localctx = new VarPrimaryEntityContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 303; Match(VAR_PRIMARY);
				}
				break;
			case VAR_ARRAY:
				_localctx = new VarArrayEntityContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 304; Match(VAR_ARRAY);
				}
				break;
			case VAR_OBJECT:
				_localctx = new VarObjectEntityContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 305; Match(VAR_OBJECT);
				}
				break;
			case NULL:
				_localctx = new NullEntityContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 306; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
	 
		public TextContext() { }
		public virtual void CopyFrom(TextContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringEntityContext : TextContext {
		public ITerminalNode TEXT() { return GetToken(LanguageParser.TEXT, 0); }
		public StringEntityContext(TextContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 42, RULE_text);
		try {
			_localctx = new StringEntityContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 309; Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_integerContext : ParserRuleContext {
		public Number_integerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_integer; } }
	 
		public Number_integerContext() { }
		public virtual void CopyFrom(Number_integerContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberIntegerContext : Number_integerContext {
		public ITerminalNode NUMBER() { return GetToken(LanguageParser.NUMBER, 0); }
		public NumberIntegerContext(Number_integerContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Number_integerContext number_integer() {
		Number_integerContext _localctx = new Number_integerContext(Context, State);
		EnterRule(_localctx, 44, RULE_number_integer);
		try {
			_localctx = new NumberIntegerContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_decimalContext : ParserRuleContext {
		public Number_decimalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_decimal; } }
	 
		public Number_decimalContext() { }
		public virtual void CopyFrom(Number_decimalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberDecimalContext : Number_decimalContext {
		public ITerminalNode DECIMAL() { return GetToken(LanguageParser.DECIMAL, 0); }
		public NumberDecimalContext(Number_decimalContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Number_decimalContext number_decimal() {
		Number_decimalContext _localctx = new Number_decimalContext(Context, State);
		EnterRule(_localctx, 46, RULE_number_decimal);
		try {
			_localctx = new NumberDecimalContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 313; Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return if_expression_sempred((If_expressionContext)_localctx, predIndex);
		case 12: return arithmetic_expression_sempred((Arithmetic_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool if_expression_sempred(If_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}
	private bool arithmetic_expression_sempred(Arithmetic_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'R', '\x13E', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x3', '\x2', '\a', '\x2', '\x34', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x37', '\v', '\x2', '\x3', '\x2', 
		'\x5', '\x2', ':', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '@', '\n', '\x3', '\x3', '\x4', '\x5', '\x4', 
		'\x43', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'K', '\n', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', 'R', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'V', 
		'\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x64', '\n', '\x6', 
		'\x3', '\a', '\a', '\a', 'g', '\n', '\a', '\f', '\a', '\xE', '\a', 'j', 
		'\v', '\a', '\x3', '\b', '\a', '\b', 'm', '\n', '\b', '\f', '\b', '\xE', 
		'\b', 'p', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'y', '\n', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\a', '\t', '\x81', '\n', '\t', '\f', '\t', '\xE', '\t', '\x84', '\v', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x8E', '\n', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x98', '\n', '\f', '\f', 
		'\f', '\xE', '\f', '\x9B', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\xAA', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x5', '\r', '\xB7', '\n', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\xC0', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', '\xCB', '\n', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\xD6', '\n', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xF3', '\n', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\a', '\r', '\xFC', '\n', '\r', '\f', '\r', 
		'\xE', '\r', '\xFF', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\x103', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x10C', 
		'\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x11A', '\n', '\xE', 
		'\f', '\xE', '\xE', '\xE', '\x11D', '\v', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x5', '\x16', '\x136', '\n', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x2', '\x4', '\x10', '\x1A', '\x1A', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x2', 
		'\x4', '\x3', '\x2', ':', '?', '\x3', '\x2', '\n', '\v', '\x2', '\x157', 
		'\x2', '\x35', '\x3', '\x2', '\x2', '\x2', '\x4', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x6', 'Q', '\x3', '\x2', '\x2', '\x2', '\b', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'Y', '\x3', '\x2', '\x2', '\x2', '\f', 'h', '\x3', 
		'\x2', '\x2', '\x2', '\xE', 'n', '\x3', '\x2', '\x2', '\x2', '\x10', 'x', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x16', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x102', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x11E', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x120', '\x3', '\x2', '\x2', '\x2', ' ', '\x122', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\x124', '\x3', '\x2', '\x2', '\x2', '$', '\x126', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x128', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x12A', '\x3', '\x2', '\x2', '\x2', '*', '\x135', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x137', '\x3', '\x2', '\x2', '\x2', '.', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x13B', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x34', '\x5', '\x4', '\x3', '\x2', '\x33', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x37', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x39', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x38', ':', '\x5', '\b', '\x5', '\x2', '\x39', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', 
		'\x3', '\x3', '\x2', '\x2', '\x2', ';', '@', '\x5', '\x6', '\x4', '\x2', 
		'<', '@', '\x5', '\x1A', '\xE', '\x2', '=', '@', '\x5', '\n', '\x6', '\x2', 
		'>', '@', '\x5', '\x16', '\f', '\x2', '?', ';', '\x3', '\x2', '\x2', '\x2', 
		'?', '<', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', 
		'?', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x43', '\a', '\x41', '\x2', '\x2', '\x42', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\a', 'J', '\x2', 
		'\x2', '\x45', '\x46', '\a', '@', '\x2', '\x2', '\x46', 'G', '\x5', '\x1A', 
		'\xE', '\x2', 'G', 'H', '\a', 'O', '\x2', '\x2', 'H', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'K', '\a', '\x41', '\x2', '\x2', 'J', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'M', '\a', 'J', '\x2', '\x2', 'M', 'N', '\a', '@', 
		'\x2', '\x2', 'N', 'O', '\x5', '\x12', '\n', '\x2', 'O', 'P', '\a', 'O', 
		'\x2', '\x2', 'P', 'R', '\x3', '\x2', '\x2', '\x2', 'Q', '\x42', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'J', '\x3', '\x2', '\x2', '\x2', 'R', '\a', 
		'\x3', '\x2', '\x2', '\x2', 'S', 'U', '\a', '\x43', '\x2', '\x2', 'T', 
		'V', '\x5', '\x1A', '\xE', '\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 
		'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 
		'W', 'X', '\a', 'O', '\x2', '\x2', 'X', '\t', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'Z', '\a', '\x3', '\x2', '\x2', 'Z', '[', '\x5', '\x10', '\t', '\x2', 
		'[', '\\', '\a', '\x32', '\x2', '\x2', '\\', ']', '\x5', '\f', '\a', '\x2', 
		']', '\x63', '\a', '\x33', '\x2', '\x2', '^', '_', '\a', '\x4', '\x2', 
		'\x2', '_', '`', '\a', '\x32', '\x2', '\x2', '`', '\x61', '\x5', '\xE', 
		'\b', '\x2', '\x61', '\x62', '\a', '\x33', '\x2', '\x2', '\x62', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\x63', '^', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x64', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x65', 'g', '\x5', '\x4', '\x3', '\x2', '\x66', '\x65', '\x3', 
		'\x2', '\x2', '\x2', 'g', 'j', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', 
		'\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 
		'\r', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 
		'k', 'm', '\x5', '\x4', '\x3', '\x2', 'l', 'k', '\x3', '\x2', '\x2', '\x2', 
		'm', 'p', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 
		'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\b', '\t', '\x1', 
		'\x2', 'r', 'y', '\x5', '\x12', '\n', '\x2', 's', 't', '\a', '\x34', '\x2', 
		'\x2', 't', 'u', '\x5', '\x10', '\t', '\x2', 'u', 'v', '\a', '\x35', '\x2', 
		'\x2', 'v', 'y', '\x3', '\x2', '\x2', '\x2', 'w', 'y', '\x5', '*', '\x16', 
		'\x2', 'x', 'q', '\x3', '\x2', '\x2', '\x2', 'x', 's', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'w', '\x3', '\x2', '\x2', '\x2', 'y', '\x82', '\x3', '\x2', 
		'\x2', '\x2', 'z', '{', '\f', '\a', '\x2', '\x2', '{', '|', '\a', '\b', 
		'\x2', '\x2', '|', '\x81', '\x5', '\x10', '\t', '\b', '}', '~', '\f', 
		'\x6', '\x2', '\x2', '~', '\x7F', '\a', '\t', '\x2', '\x2', '\x7F', '\x81', 
		'\x5', '\x10', '\t', '\a', '\x80', 'z', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x81', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x11', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x5', '\x1A', '\xE', 
		'\x2', '\x86', '\x87', '\x5', '\x14', '\v', '\x2', '\x87', '\x88', '\x5', 
		'\x1A', '\xE', '\x2', '\x88', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x8A', '\a', '\x34', '\x2', '\x2', '\x8A', '\x8B', '\x5', '\x12', '\n', 
		'\x2', '\x8B', '\x8C', '\a', '\x35', '\x2', '\x2', '\x8C', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x85', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x90', '\t', '\x2', '\x2', '\x2', '\x90', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x92', '\a', '/', '\x2', '\x2', '\x92', 
		'\x93', '\a', '\x34', '\x2', '\x2', '\x93', '\x94', '\x5', '\x10', '\t', 
		'\x2', '\x94', '\x95', '\a', '\x35', '\x2', '\x2', '\x95', '\x99', '\a', 
		'\x32', '\x2', '\x2', '\x96', '\x98', '\x5', '\x4', '\x3', '\x2', '\x97', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\a', '\x33', '\x2', 
		'\x2', '\x9D', '\x17', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\a', 
		'\x14', '\x2', '\x2', '\x9F', '\xA0', '\a', '\x34', '\x2', '\x2', '\xA0', 
		'\xA1', '\x5', '\x1C', '\xF', '\x2', '\xA1', '\xA2', '\a', '\x44', '\x2', 
		'\x2', '\xA2', '\xA3', '\x5', '\x1E', '\x10', '\x2', '\xA3', '\xA4', '\a', 
		'\x44', '\x2', '\x2', '\xA4', '\xA5', '\x5', '&', '\x14', '\x2', '\xA5', 
		'\xA6', '\a', '\x44', '\x2', '\x2', '\xA6', '\xA9', '\x5', '$', '\x13', 
		'\x2', '\xA7', '\xA8', '\a', '\x44', '\x2', '\x2', '\xA8', '\xAA', '\x5', 
		' ', '\x11', '\x2', '\xA9', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\xAC', '\a', '\x35', '\x2', '\x2', '\xAC', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x15', '\x2', '\x2', '\xAE', 
		'\xAF', '\a', '\x34', '\x2', '\x2', '\xAF', '\xB0', '\x5', '\x1E', '\x10', 
		'\x2', '\xB0', '\xB1', '\a', '\x44', '\x2', '\x2', '\xB1', '\xB2', '\x5', 
		'\"', '\x12', '\x2', '\xB2', '\xB3', '\a', '\x44', '\x2', '\x2', '\xB3', 
		'\xB6', '\x5', ' ', '\x11', '\x2', '\xB4', '\xB5', '\a', '\x44', '\x2', 
		'\x2', '\xB5', '\xB7', '\x5', '$', '\x13', '\x2', '\xB6', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', '\x35', '\x2', 
		'\x2', '\xB9', '\x103', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\a', 
		'\x16', '\x2', '\x2', '\xBB', '\xBC', '\a', '\x34', '\x2', '\x2', '\xBC', 
		'\xBF', '\x5', ',', '\x17', '\x2', '\xBD', '\xBE', '\a', '\x44', '\x2', 
		'\x2', '\xBE', '\xC0', '\x5', '.', '\x18', '\x2', '\xBF', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\a', '\x35', '\x2', 
		'\x2', '\xC2', '\x103', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\a', 
		'\x17', '\x2', '\x2', '\xC4', '\xC5', '\a', '\x34', '\x2', '\x2', '\xC5', 
		'\xC6', '\x5', ',', '\x17', '\x2', '\xC6', '\xC7', '\a', '\x44', '\x2', 
		'\x2', '\xC7', '\xCA', '\x5', ',', '\x17', '\x2', '\xC8', '\xC9', '\a', 
		'\x44', '\x2', '\x2', '\xC9', '\xCB', '\x5', '.', '\x18', '\x2', '\xCA', 
		'\xC8', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\a', 
		'\x35', '\x2', '\x2', '\xCD', '\x103', '\x3', '\x2', '\x2', '\x2', '\xCE', 
		'\xCF', '\a', '\x18', '\x2', '\x2', '\xCF', '\xD0', '\a', '\x34', '\x2', 
		'\x2', '\xD0', '\xD1', '\x5', ',', '\x17', '\x2', '\xD1', '\xD2', '\a', 
		'\x44', '\x2', '\x2', '\xD2', '\xD5', '\x5', ',', '\x17', '\x2', '\xD3', 
		'\xD4', '\a', '\x44', '\x2', '\x2', '\xD4', '\xD6', '\x5', '.', '\x18', 
		'\x2', '\xD5', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\xD8', '\a', '\x35', '\x2', '\x2', '\xD8', '\x103', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '\xDA', '\a', '\xE', '\x2', '\x2', '\xDA', '\xDB', '\a', 
		'\x34', '\x2', '\x2', '\xDB', '\xDC', '\a', 'M', '\x2', '\x2', '\xDC', 
		'\x103', '\a', '\x35', '\x2', '\x2', '\xDD', '\xDE', '\a', '\xF', '\x2', 
		'\x2', '\xDE', '\xDF', '\a', '\x34', '\x2', '\x2', '\xDF', '\xE0', '\a', 
		'M', '\x2', '\x2', '\xE0', '\x103', '\a', '\x35', '\x2', '\x2', '\xE1', 
		'\xE2', '\a', '\x10', '\x2', '\x2', '\xE2', '\xE3', '\a', '\x34', '\x2', 
		'\x2', '\xE3', '\xE4', '\a', 'M', '\x2', '\x2', '\xE4', '\x103', '\a', 
		'\x35', '\x2', '\x2', '\xE5', '\xE6', '\a', '\x11', '\x2', '\x2', '\xE6', 
		'\xE7', '\a', '\x34', '\x2', '\x2', '\xE7', '\xE8', '\a', 'M', '\x2', 
		'\x2', '\xE8', '\x103', '\a', '\x35', '\x2', '\x2', '\xE9', '\xEA', '\a', 
		'\x12', '\x2', '\x2', '\xEA', '\xEB', '\a', '\x34', '\x2', '\x2', '\xEB', 
		'\xEC', '\a', 'L', '\x2', '\x2', '\xEC', '\x103', '\a', '\x35', '\x2', 
		'\x2', '\xED', '\xEE', '\a', '\x19', '\x2', '\x2', '\xEE', '\xEF', '\a', 
		'\x34', '\x2', '\x2', '\xEF', '\xF2', '\x5', '\x30', '\x19', '\x2', '\xF0', 
		'\xF1', '\a', '\x44', '\x2', '\x2', '\xF1', '\xF3', '\x5', '.', '\x18', 
		'\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xF5', '\a', '\x35', '\x2', '\x2', '\xF5', '\x103', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xF7', '\a', '\x13', '\x2', '\x2', '\xF7', '\xF8', '\a', 
		'\x34', '\x2', '\x2', '\xF8', '\xFD', '\x5', '*', '\x16', '\x2', '\xF9', 
		'\xFA', '\a', '\x44', '\x2', '\x2', '\xFA', '\xFC', '\x5', '*', '\x16', 
		'\x2', '\xFB', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\xFD', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xFE', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', '\a', 
		'\x35', '\x2', '\x2', '\x101', '\x103', '\x3', '\x2', '\x2', '\x2', '\x102', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\x102', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\x102', '\xBA', '\x3', '\x2', '\x2', '\x2', '\x102', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\xCE', '\x3', '\x2', '\x2', '\x2', '\x102', 
		'\xD9', '\x3', '\x2', '\x2', '\x2', '\x102', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\x102', '\xE1', '\x3', '\x2', '\x2', '\x2', '\x102', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\xE9', '\x3', '\x2', '\x2', '\x2', '\x102', 
		'\xED', '\x3', '\x2', '\x2', '\x2', '\x102', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x19', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', 
		'\b', '\xE', '\x1', '\x2', '\x105', '\x106', '\a', '\x34', '\x2', '\x2', 
		'\x106', '\x107', '\x5', '\x1A', '\xE', '\x2', '\x107', '\x108', '\a', 
		'\x35', '\x2', '\x2', '\x108', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x109', 
		'\x10C', '\x5', '\x18', '\r', '\x2', '\x10A', '\x10C', '\x5', '*', '\x16', 
		'\x2', '\x10B', '\x104', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x10A', '\x3', '\x2', '\x2', '\x2', 
		'\x10C', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\f', 
		'\t', '\x2', '\x2', '\x10E', '\x10F', '\a', '\x36', '\x2', '\x2', '\x10F', 
		'\x11A', '\x5', '\x1A', '\xE', '\n', '\x110', '\x111', '\f', '\b', '\x2', 
		'\x2', '\x111', '\x112', '\a', '\x37', '\x2', '\x2', '\x112', '\x11A', 
		'\x5', '\x1A', '\xE', '\t', '\x113', '\x114', '\f', '\a', '\x2', '\x2', 
		'\x114', '\x115', '\a', '\x38', '\x2', '\x2', '\x115', '\x11A', '\x5', 
		'\x1A', '\xE', '\b', '\x116', '\x117', '\f', '\x6', '\x2', '\x2', '\x117', 
		'\x118', '\a', '\x39', '\x2', '\x2', '\x118', '\x11A', '\x5', '\x1A', 
		'\xE', '\a', '\x119', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x119', '\x110', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x113', '\x3', '\x2', '\x2', '\x2', 
		'\x119', '\x116', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11D', '\x3', 
		'\x2', '\x2', '\x2', '\x11B', '\x119', '\x3', '\x2', '\x2', '\x2', '\x11B', 
		'\x11C', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x11D', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', 
		'\x5', ',', '\x17', '\x2', '\x11F', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x121', '\x5', ',', '\x17', '\x2', '\x121', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x122', '\x123', '\x5', ',', '\x17', '\x2', '\x123', '!', 
		'\x3', '\x2', '\x2', '\x2', '\x124', '\x125', '\x5', ',', '\x17', '\x2', 
		'\x125', '#', '\x3', '\x2', '\x2', '\x2', '\x126', '\x127', '\x5', '.', 
		'\x18', '\x2', '\x127', '%', '\x3', '\x2', '\x2', '\x2', '\x128', '\x129', 
		'\x5', ',', '\x17', '\x2', '\x129', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\x12A', '\x12B', '\x5', ',', '\x17', '\x2', '\x12B', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x12C', '\x136', '\t', '\x3', '\x2', '\x2', '\x12D', '\x136', 
		'\x5', '\x30', '\x19', '\x2', '\x12E', '\x136', '\x5', '.', '\x18', '\x2', 
		'\x12F', '\x136', '\a', 'I', '\x2', '\x2', '\x130', '\x136', '\a', 'J', 
		'\x2', '\x2', '\x131', '\x136', '\a', 'L', '\x2', '\x2', '\x132', '\x136', 
		'\a', 'N', '\x2', '\x2', '\x133', '\x136', '\a', 'M', '\x2', '\x2', '\x134', 
		'\x136', '\a', '\f', '\x2', '\x2', '\x135', '\x12C', '\x3', '\x2', '\x2', 
		'\x2', '\x135', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x135', '\x12E', 
		'\x3', '\x2', '\x2', '\x2', '\x135', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x135', '\x130', '\x3', '\x2', '\x2', '\x2', '\x135', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x135', '\x132', '\x3', '\x2', '\x2', '\x2', '\x135', 
		'\x133', '\x3', '\x2', '\x2', '\x2', '\x135', '\x134', '\x3', '\x2', '\x2', 
		'\x2', '\x136', '+', '\x3', '\x2', '\x2', '\x2', '\x137', '\x138', '\a', 
		'K', '\x2', '\x2', '\x138', '-', '\x3', '\x2', '\x2', '\x2', '\x139', 
		'\x13A', '\a', 'G', '\x2', '\x2', '\x13A', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x13B', '\x13C', '\a', 'H', '\x2', '\x2', '\x13C', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', '\x35', '\x39', '?', '\x42', 'J', 'Q', 'U', '\x63', 
		'h', 'n', 'x', '\x80', '\x82', '\x8D', '\x99', '\xA9', '\xB6', '\xBF', 
		'\xCA', '\xD5', '\xF2', '\xFD', '\x102', '\x10B', '\x119', '\x11B', '\x135',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
