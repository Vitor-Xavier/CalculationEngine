//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Language.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System;
using System.IO;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
public partial class LanguageParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, WS=2, IF=3, ELSE=4, SWITCH=5, CASE=6, DEFAULT=7, WHILE=8, BREAK=9, 
		AND=10, OR=11, NOT=12, TRUE=13, FALSE=14, NULL=15, MARKER=16, ISNULL=17, 
		SUM_IF=18, COUNT_IF=19, ABS=20, SQRT=21, SUM=22, MAX=23, MIN=24, AVERAGE=25, 
		LENGTH=26, COALESCE=27, ROUND=28, DATE_FUNCTION=29, TODAY=30, NOW=31, 
		DATE_DIF=32, GET_YEAR=33, GET_MONTH=34, GET_DAY=35, GET_HOUR=36, GET_MINUTE=37, 
		ADD_DAY=38, ADD_MONTH=39, ADD_YEAR=40, TRIM=41, LBRACKET=42, RBRACKET=43, 
		LBRACE=44, RBRACE=45, LPAREN=46, RPAREN=47, MULT=48, DIV=49, PLUS=50, 
		MINUS=51, POW=52, GT=53, GE=54, LT=55, LE=56, EQ=57, NEQ=58, YEAR=59, 
		MONTH=60, DAY=61, ATRIB=62, PLUS_ASSIGNMENT=63, MINUS_ASSIGNMENT=64, MULT_ASSIGNMENT=65, 
		DIV_ASSIGNMENT=66, POW_ASSIGNMENT=67, VAR=68, LISTA=69, RETURN=70, COMMA=71, 
		DOT=72, QUOTE=73, NUMBER=74, DECIMAL=75, DATE=76, IDENTIFIER=77, TEXT=78, 
		VAR_PRIMARY=79, SEMI=80, COLON=81, ERRORCHAR=82;
	public const int
		RULE_rule_set = 0, RULE_rule_block = 1, RULE_variable_declaration = 2, 
		RULE_assignment = 3, RULE_return_value = 4, RULE_conditional = 5, RULE_then_block = 6, 
		RULE_else_block = 7, RULE_if_expression = 8, RULE_switch_expression = 9, 
		RULE_case_statement = 10, RULE_default_statement = 11, RULE_comparison_expression = 12, 
		RULE_comparison_operator = 13, RULE_assignment_operator = 14, RULE_loop = 15, 
		RULE_break_statement = 16, RULE_function_signature = 17, RULE_arithmetic_expression = 18, 
		RULE_entity = 19, RULE_varMemory = 20, RULE_listMemoryGlobal = 21, RULE_listMemory = 22, 
		RULE_list = 23, RULE_text = 24, RULE_number_integer = 25, RULE_number_decimal = 26, 
		RULE_date_unit = 27;
	public static readonly string[] ruleNames = {
		"rule_set", "rule_block", "variable_declaration", "assignment", "return_value", 
		"conditional", "then_block", "else_block", "if_expression", "switch_expression", 
		"case_statement", "default_statement", "comparison_expression", "comparison_operator", 
		"assignment_operator", "loop", "break_statement", "function_signature", 
		"arithmetic_expression", "entity", "varMemory", "listMemoryGlobal", "listMemory", 
		"list", "text", "number_integer", "number_decimal", "date_unit"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'se'", "'senao'", "'parametro'", "'caso'", "'padrao'", 
		"'enquanto'", "'parar'", "'&&'", "'||'", "'!'", "'true'", "'false'", "'nulo'", 
		"'marker'", "'_NULO'", "'_SOMASE'", "'_CONTSE'", "'_ABS'", "'_RAIZ'", 
		"'_SOMA'", "'_MAXIMO'", "'_MINIMO'", "'_MEDIA'", "'_CONT'", "'_COALESCE'", 
		"'_ARREDONDAR'", "'_DATA'", "'_HOJE'", "'_AGORA'", "'_DATADIF'", "'_ANO'", 
		"'_MES'", "'_DIA'", "'_HORA'", "'_MINUTO'", "'_DIA_ADICIONAR'", "'_MES_ADICIONAR'", 
		"'_ANO_ADICIONAR'", "'_ARRUMAR'", "'['", "']'", "'{'", "'}'", "'('", "')'", 
		"'*'", "'/'", "'+'", "'-'", "'^'", "'>'", "'>='", "'<'", "'<='", "'=='", 
		"'!='", "'ANO'", "'MES'", "'DIA'", "'='", "'+='", "'-='", "'*='", "'/='", 
		"'^='", "'var'", "'lista'", "'retorno'", "','", "'.'", "'\"'", null, null, 
		null, null, null, null, "';'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "WS", "IF", "ELSE", "SWITCH", "CASE", "DEFAULT", "WHILE", 
		"BREAK", "AND", "OR", "NOT", "TRUE", "FALSE", "NULL", "MARKER", "ISNULL", 
		"SUM_IF", "COUNT_IF", "ABS", "SQRT", "SUM", "MAX", "MIN", "AVERAGE", "LENGTH", 
		"COALESCE", "ROUND", "DATE_FUNCTION", "TODAY", "NOW", "DATE_DIF", "GET_YEAR", 
		"GET_MONTH", "GET_DAY", "GET_HOUR", "GET_MINUTE", "ADD_DAY", "ADD_MONTH", 
		"ADD_YEAR", "TRIM", "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", "LPAREN", 
		"RPAREN", "MULT", "DIV", "PLUS", "MINUS", "POW", "GT", "GE", "LT", "LE", 
		"EQ", "NEQ", "YEAR", "MONTH", "DAY", "ATRIB", "PLUS_ASSIGNMENT", "MINUS_ASSIGNMENT", 
		"MULT_ASSIGNMENT", "DIV_ASSIGNMENT", "POW_ASSIGNMENT", "VAR", "LISTA", 
		"RETURN", "COMMA", "DOT", "QUOTE", "NUMBER", "DECIMAL", "DATE", "IDENTIFIER", 
		"TEXT", "VAR_PRIMARY", "SEMI", "COLON", "ERRORCHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LanguageParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LanguageParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LanguageParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Rule_setContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_valueContext return_value() {
			return GetRuleContext<Return_valueContext>(0);
		}
		public Rule_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_setContext rule_set() {
		Rule_setContext _localctx = new Rule_setContext(Context, State);
		EnterRule(_localctx, 0, RULE_rule_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << SWITCH) | (1L << WHILE) | (1L << BREAK) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << ISNULL) | (1L << SUM_IF) | (1L << COUNT_IF) | (1L << ABS) | (1L << SQRT) | (1L << SUM) | (1L << MAX) | (1L << MIN) | (1L << AVERAGE) | (1L << LENGTH) | (1L << COALESCE) | (1L << ROUND) | (1L << DATE_FUNCTION) | (1L << TODAY) | (1L << NOW) | (1L << DATE_DIF) | (1L << GET_YEAR) | (1L << GET_MONTH) | (1L << GET_DAY) | (1L << GET_HOUR) | (1L << GET_MINUTE) | (1L << ADD_DAY) | (1L << ADD_MONTH) | (1L << ADD_YEAR) | (1L << TRIM) | (1L << LPAREN))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (VAR - 68)) | (1L << (LISTA - 68)) | (1L << (NUMBER - 68)) | (1L << (DECIMAL - 68)) | (1L << (DATE - 68)) | (1L << (IDENTIFIER - 68)) | (1L << (TEXT - 68)) | (1L << (VAR_PRIMARY - 68)))) != 0)) {
				{
				{
				State = 56;
				rule_block();
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURN) {
				{
				State = 62;
				return_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_expressionContext switch_expression() {
			return GetRuleContext<Switch_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalContext conditional() {
			return GetRuleContext<ConditionalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Break_statementContext break_statement() {
			return GetRuleContext<Break_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public Rule_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_blockContext rule_block() {
		Rule_blockContext _localctx = new Rule_blockContext(Context, State);
		EnterRule(_localctx, 2, RULE_rule_block);
		try {
			State = 72;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65;
				variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66;
				switch_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 67;
				arithmetic_expression(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 68;
				conditional();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 69;
				loop();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 70;
				break_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 71;
				assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
	 
		public Variable_declarationContext() { }
		public virtual void CopyFrom(Variable_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArithmeticDeclarationContext : Variable_declarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LanguageParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATRIB() { return GetToken(LanguageParser.ATRIB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public ArithmeticDeclarationContext(Variable_declarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclareListContext : Variable_declarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LISTA() { return GetToken(LanguageParser.LISTA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATRIB() { return GetToken(LanguageParser.ATRIB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public DeclareListContext(Variable_declarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonDeclarationContext : Variable_declarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(LanguageParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATRIB() { return GetToken(LanguageParser.ATRIB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public ComparisonDeclarationContext(Variable_declarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclareListAllContext : Variable_declarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LISTA() { return GetToken(LanguageParser.LISTA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATRIB() { return GetToken(LanguageParser.ATRIB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(LanguageParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(LanguageParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public DeclareListAllContext(Variable_declarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareListAll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_variable_declaration);
		try {
			State = 98;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new ArithmeticDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 74;
				Match(VAR);
				State = 75;
				Match(IDENTIFIER);
				State = 76;
				Match(ATRIB);
				State = 77;
				arithmetic_expression(0);
				State = 78;
				Match(SEMI);
				}
				break;
			case 2:
				_localctx = new ComparisonDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 80;
				Match(VAR);
				State = 81;
				Match(IDENTIFIER);
				State = 82;
				Match(ATRIB);
				State = 83;
				comparison_expression();
				State = 84;
				Match(SEMI);
				}
				break;
			case 3:
				_localctx = new DeclareListContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 86;
				Match(LISTA);
				State = 87;
				Match(IDENTIFIER);
				State = 88;
				Match(ATRIB);
				State = 89;
				arithmetic_expression(0);
				State = 90;
				Match(SEMI);
				}
				break;
			case 4:
				_localctx = new DeclareListAllContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 92;
				Match(LISTA);
				State = 93;
				Match(IDENTIFIER);
				State = 94;
				Match(ATRIB);
				State = 95;
				Match(LBRACKET);
				State = 96;
				Match(RBRACKET);
				State = 97;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	 
		public AssignmentContext() { }
		public virtual void CopyFrom(AssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListAssignmentContext : AssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(LanguageParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(LanguageParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public ListAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListMemoryGlobalValueAssignmentContext : AssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(LanguageParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(LanguageParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public ListMemoryGlobalValueAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListMemoryGlobalValueAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarMemoryValueAssignmentContext : AssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public VarMemoryValueAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarMemoryValueAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonAssignmentContext : AssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATRIB() { return GetToken(LanguageParser.ATRIB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public ComparisonAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticAssignmentContext : AssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public ArithmeticAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListMemoryValueAssignmentContext : AssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(LanguageParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(LanguageParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(LanguageParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(LanguageParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_operatorContext assignment_operator() {
			return GetRuleContext<Assignment_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public ListMemoryValueAssignmentContext(AssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListMemoryValueAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignment);
		try {
			State = 158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new ComparisonAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 100;
				Match(IDENTIFIER);
				State = 101;
				Match(ATRIB);
				State = 102;
				comparison_expression();
				State = 103;
				Match(SEMI);
				}
				break;
			case 2:
				_localctx = new ArithmeticAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 105;
				Match(IDENTIFIER);
				State = 106;
				assignment_operator();
				State = 107;
				arithmetic_expression(0);
				State = 108;
				Match(SEMI);
				}
				break;
			case 3:
				_localctx = new ListAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 110;
				Match(IDENTIFIER);
				State = 111;
				Match(LBRACKET);
				State = 114;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTIFIER:
					{
					State = 112;
					Match(IDENTIFIER);
					}
					break;
				case NUMBER:
					{
					State = 113;
					number_integer();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 116;
				Match(RBRACKET);
				State = 117;
				Match(DOT);
				State = 118;
				Match(IDENTIFIER);
				State = 119;
				assignment_operator();
				State = 120;
				arithmetic_expression(0);
				State = 121;
				Match(SEMI);
				}
				break;
			case 4:
				_localctx = new VarMemoryValueAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 123;
				Match(VAR_PRIMARY);
				State = 124;
				Match(DOT);
				State = 125;
				Match(IDENTIFIER);
				State = 126;
				assignment_operator();
				State = 127;
				arithmetic_expression(0);
				State = 128;
				Match(SEMI);
				}
				break;
			case 5:
				_localctx = new ListMemoryGlobalValueAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 130;
				Match(VAR_PRIMARY);
				State = 131;
				Match(LBRACKET);
				State = 134;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTIFIER:
					{
					State = 132;
					Match(IDENTIFIER);
					}
					break;
				case NUMBER:
					{
					State = 133;
					number_integer();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 136;
				Match(RBRACKET);
				State = 137;
				Match(DOT);
				State = 138;
				Match(IDENTIFIER);
				State = 139;
				assignment_operator();
				State = 140;
				arithmetic_expression(0);
				State = 141;
				Match(SEMI);
				}
				break;
			case 6:
				_localctx = new ListMemoryValueAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 143;
				Match(VAR_PRIMARY);
				State = 144;
				Match(DOT);
				State = 145;
				Match(IDENTIFIER);
				State = 146;
				Match(LBRACKET);
				State = 149;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTIFIER:
					{
					State = 147;
					Match(IDENTIFIER);
					}
					break;
				case NUMBER:
					{
					State = 148;
					number_integer();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 151;
				Match(RBRACKET);
				State = 152;
				Match(DOT);
				State = 153;
				Match(IDENTIFIER);
				State = 154;
				assignment_operator();
				State = 155;
				arithmetic_expression(0);
				State = 156;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_valueContext : ParserRuleContext {
		public Return_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_value; } }
	 
		public Return_valueContext() { }
		public virtual void CopyFrom(Return_valueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ReturnValueContext : Return_valueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(LanguageParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		public ReturnValueContext(Return_valueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_valueContext return_value() {
		Return_valueContext _localctx = new Return_valueContext(Context, State);
		EnterRule(_localctx, 8, RULE_return_value);
		int _la;
		try {
			_localctx = new ReturnValueContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(RETURN);
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << ISNULL) | (1L << SUM_IF) | (1L << COUNT_IF) | (1L << ABS) | (1L << SQRT) | (1L << SUM) | (1L << MAX) | (1L << MIN) | (1L << AVERAGE) | (1L << LENGTH) | (1L << COALESCE) | (1L << ROUND) | (1L << DATE_FUNCTION) | (1L << TODAY) | (1L << NOW) | (1L << DATE_DIF) | (1L << GET_YEAR) | (1L << GET_MONTH) | (1L << GET_DAY) | (1L << GET_HOUR) | (1L << GET_MINUTE) | (1L << ADD_DAY) | (1L << ADD_MONTH) | (1L << ADD_YEAR) | (1L << TRIM) | (1L << LPAREN))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (NUMBER - 74)) | (1L << (DECIMAL - 74)) | (1L << (DATE - 74)) | (1L << (IDENTIFIER - 74)) | (1L << (TEXT - 74)) | (1L << (VAR_PRIMARY - 74)))) != 0)) {
				{
				State = 161;
				arithmetic_expression(0);
				}
			}

			State = 164;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(LanguageParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public If_expressionContext if_expression() {
			return GetRuleContext<If_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACE() { return GetTokens(LanguageParser.LBRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE(int i) {
			return GetToken(LanguageParser.LBRACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Then_blockContext then_block() {
			return GetRuleContext<Then_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACE() { return GetTokens(LanguageParser.RBRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE(int i) {
			return GetToken(LanguageParser.RBRACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(LanguageParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		public ConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalContext conditional() {
		ConditionalContext _localctx = new ConditionalContext(Context, State);
		EnterRule(_localctx, 10, RULE_conditional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(IF);
			State = 167;
			if_expression(0);
			State = 168;
			Match(LBRACE);
			State = 169;
			then_block();
			State = 170;
			Match(RBRACE);
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 171;
				Match(ELSE);
				State = 172;
				Match(LBRACE);
				State = 173;
				else_block();
				State = 174;
				Match(RBRACE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Then_blockContext : ParserRuleContext {
		public Then_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_then_block; } }
	 
		public Then_blockContext() { }
		public virtual void CopyFrom(Then_blockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ThenBlockContext : Then_blockContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public ThenBlockContext(Then_blockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThenBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Then_blockContext then_block() {
		Then_blockContext _localctx = new Then_blockContext(Context, State);
		EnterRule(_localctx, 12, RULE_then_block);
		int _la;
		try {
			_localctx = new ThenBlockContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << SWITCH) | (1L << WHILE) | (1L << BREAK) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << ISNULL) | (1L << SUM_IF) | (1L << COUNT_IF) | (1L << ABS) | (1L << SQRT) | (1L << SUM) | (1L << MAX) | (1L << MIN) | (1L << AVERAGE) | (1L << LENGTH) | (1L << COALESCE) | (1L << ROUND) | (1L << DATE_FUNCTION) | (1L << TODAY) | (1L << NOW) | (1L << DATE_DIF) | (1L << GET_YEAR) | (1L << GET_MONTH) | (1L << GET_DAY) | (1L << GET_HOUR) | (1L << GET_MINUTE) | (1L << ADD_DAY) | (1L << ADD_MONTH) | (1L << ADD_YEAR) | (1L << TRIM) | (1L << LPAREN))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (VAR - 68)) | (1L << (LISTA - 68)) | (1L << (NUMBER - 68)) | (1L << (DECIMAL - 68)) | (1L << (DATE - 68)) | (1L << (IDENTIFIER - 68)) | (1L << (TEXT - 68)) | (1L << (VAR_PRIMARY - 68)))) != 0)) {
				{
				{
				State = 178;
				rule_block();
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_blockContext : ParserRuleContext {
		public Else_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_block; } }
	 
		public Else_blockContext() { }
		public virtual void CopyFrom(Else_blockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ElseBlockContext : Else_blockContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public ElseBlockContext(Else_blockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_blockContext else_block() {
		Else_blockContext _localctx = new Else_blockContext(Context, State);
		EnterRule(_localctx, 14, RULE_else_block);
		int _la;
		try {
			_localctx = new ElseBlockContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << SWITCH) | (1L << WHILE) | (1L << BREAK) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << ISNULL) | (1L << SUM_IF) | (1L << COUNT_IF) | (1L << ABS) | (1L << SQRT) | (1L << SUM) | (1L << MAX) | (1L << MIN) | (1L << AVERAGE) | (1L << LENGTH) | (1L << COALESCE) | (1L << ROUND) | (1L << DATE_FUNCTION) | (1L << TODAY) | (1L << NOW) | (1L << DATE_DIF) | (1L << GET_YEAR) | (1L << GET_MONTH) | (1L << GET_DAY) | (1L << GET_HOUR) | (1L << GET_MINUTE) | (1L << ADD_DAY) | (1L << ADD_MONTH) | (1L << ADD_YEAR) | (1L << TRIM) | (1L << LPAREN))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (VAR - 68)) | (1L << (LISTA - 68)) | (1L << (NUMBER - 68)) | (1L << (DECIMAL - 68)) | (1L << (DATE - 68)) | (1L << (IDENTIFIER - 68)) | (1L << (TEXT - 68)) | (1L << (VAR_PRIMARY - 68)))) != 0)) {
				{
				{
				State = 184;
				rule_block();
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_expressionContext : ParserRuleContext {
		public If_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_expression; } }
	 
		public If_expressionContext() { }
		public virtual void CopyFrom(If_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NotIfEntityContext : If_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(LanguageParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public NotIfEntityContext(If_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotIfEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : If_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_expressionContext[] if_expression() {
			return GetRuleContexts<If_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_expressionContext if_expression(int i) {
			return GetRuleContext<If_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(LanguageParser.OR, 0); }
		public OrExpressionContext(If_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfComparisonExpressionContext : If_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		public IfComparisonExpressionContext(If_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : If_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_expressionContext[] if_expression() {
			return GetRuleContexts<If_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_expressionContext if_expression(int i) {
			return GetRuleContext<If_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(LanguageParser.AND, 0); }
		public AndExpressionContext(If_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisIfExpressionContext : If_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public If_expressionContext if_expression() {
			return GetRuleContext<If_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ParenthesisIfExpressionContext(If_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfEntityContext : If_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public IfEntityContext(If_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotParenthesisIfExpressionContext : If_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(LanguageParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public If_expressionContext if_expression() {
			return GetRuleContext<If_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public NotParenthesisIfExpressionContext(If_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotParenthesisIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_expressionContext if_expression() {
		return if_expression(0);
	}

	private If_expressionContext if_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		If_expressionContext _localctx = new If_expressionContext(Context, _parentState);
		If_expressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_if_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				_localctx = new IfComparisonExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 191;
				comparison_expression();
				}
				break;
			case 2:
				{
				_localctx = new NotParenthesisIfExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 192;
				Match(NOT);
				State = 193;
				Match(LPAREN);
				State = 194;
				if_expression(0);
				State = 195;
				Match(RPAREN);
				}
				break;
			case 3:
				{
				_localctx = new ParenthesisIfExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 197;
				Match(LPAREN);
				State = 198;
				if_expression(0);
				State = 199;
				Match(RPAREN);
				}
				break;
			case 4:
				{
				_localctx = new NotIfEntityContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 201;
				Match(NOT);
				State = 202;
				entity();
				}
				break;
			case 5:
				{
				_localctx = new IfEntityContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 203;
				entity();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 214;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 212;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new AndExpressionContext(new If_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_if_expression);
						State = 206;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 207;
						Match(AND);
						State = 208;
						if_expression(8);
						}
						break;
					case 2:
						{
						_localctx = new OrExpressionContext(new If_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_if_expression);
						State = 209;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 210;
						Match(OR);
						State = 211;
						if_expression(7);
						}
						break;
					}
					} 
				}
				State = 216;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Switch_expressionContext : ParserRuleContext {
		public Switch_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_expression; } }
	 
		public Switch_expressionContext() { }
		public virtual void CopyFrom(Switch_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SwitchExpressionContext : Switch_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(LanguageParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(LanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(LanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Case_statementContext[] case_statement() {
			return GetRuleContexts<Case_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_statementContext case_statement(int i) {
			return GetRuleContext<Case_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_statementContext default_statement() {
			return GetRuleContext<Default_statementContext>(0);
		}
		public SwitchExpressionContext(Switch_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_expressionContext switch_expression() {
		Switch_expressionContext _localctx = new Switch_expressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_switch_expression);
		int _la;
		try {
			_localctx = new SwitchExpressionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			Match(SWITCH);
			State = 218;
			arithmetic_expression(0);
			State = 219;
			Match(LBRACE);
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 220;
				case_statement();
				}
				}
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE );
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 225;
				default_statement();
				}
			}

			State = 228;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_statementContext : ParserRuleContext {
		public Case_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_statement; } }
	 
		public Case_statementContext() { }
		public virtual void CopyFrom(Case_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseStatementContext : Case_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(LanguageParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LanguageParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(LanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(LanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public CaseStatementContext(Case_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_statementContext case_statement() {
		Case_statementContext _localctx = new Case_statementContext(Context, State);
		EnterRule(_localctx, 20, RULE_case_statement);
		int _la;
		try {
			_localctx = new CaseStatementContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(CASE);
			State = 231;
			arithmetic_expression(0);
			State = 232;
			Match(COLON);
			State = 242;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				{
				State = 233;
				Match(LBRACE);
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 234;
					rule_block();
					}
					}
					State = 237;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << SWITCH) | (1L << WHILE) | (1L << BREAK) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << ISNULL) | (1L << SUM_IF) | (1L << COUNT_IF) | (1L << ABS) | (1L << SQRT) | (1L << SUM) | (1L << MAX) | (1L << MIN) | (1L << AVERAGE) | (1L << LENGTH) | (1L << COALESCE) | (1L << ROUND) | (1L << DATE_FUNCTION) | (1L << TODAY) | (1L << NOW) | (1L << DATE_DIF) | (1L << GET_YEAR) | (1L << GET_MONTH) | (1L << GET_DAY) | (1L << GET_HOUR) | (1L << GET_MINUTE) | (1L << ADD_DAY) | (1L << ADD_MONTH) | (1L << ADD_YEAR) | (1L << TRIM) | (1L << LPAREN))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (VAR - 68)) | (1L << (LISTA - 68)) | (1L << (NUMBER - 68)) | (1L << (DECIMAL - 68)) | (1L << (DATE - 68)) | (1L << (IDENTIFIER - 68)) | (1L << (TEXT - 68)) | (1L << (VAR_PRIMARY - 68)))) != 0) );
				State = 239;
				Match(RBRACE);
				}
				break;
			case IF:
			case SWITCH:
			case WHILE:
			case BREAK:
			case TRUE:
			case FALSE:
			case NULL:
			case ISNULL:
			case SUM_IF:
			case COUNT_IF:
			case ABS:
			case SQRT:
			case SUM:
			case MAX:
			case MIN:
			case AVERAGE:
			case LENGTH:
			case COALESCE:
			case ROUND:
			case DATE_FUNCTION:
			case TODAY:
			case NOW:
			case DATE_DIF:
			case GET_YEAR:
			case GET_MONTH:
			case GET_DAY:
			case GET_HOUR:
			case GET_MINUTE:
			case ADD_DAY:
			case ADD_MONTH:
			case ADD_YEAR:
			case TRIM:
			case LPAREN:
			case VAR:
			case LISTA:
			case NUMBER:
			case DECIMAL:
			case DATE:
			case IDENTIFIER:
			case TEXT:
			case VAR_PRIMARY:
				{
				State = 241;
				rule_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_statementContext : ParserRuleContext {
		public Default_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_statement; } }
	 
		public Default_statementContext() { }
		public virtual void CopyFrom(Default_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DefaultStatementContext : Default_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(LanguageParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LanguageParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(LanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(LanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public DefaultStatementContext(Default_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_statementContext default_statement() {
		Default_statementContext _localctx = new Default_statementContext(Context, State);
		EnterRule(_localctx, 22, RULE_default_statement);
		int _la;
		try {
			_localctx = new DefaultStatementContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(DEFAULT);
			State = 245;
			Match(COLON);
			State = 255;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				{
				State = 246;
				Match(LBRACE);
				State = 248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 247;
					rule_block();
					}
					}
					State = 250;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << SWITCH) | (1L << WHILE) | (1L << BREAK) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << ISNULL) | (1L << SUM_IF) | (1L << COUNT_IF) | (1L << ABS) | (1L << SQRT) | (1L << SUM) | (1L << MAX) | (1L << MIN) | (1L << AVERAGE) | (1L << LENGTH) | (1L << COALESCE) | (1L << ROUND) | (1L << DATE_FUNCTION) | (1L << TODAY) | (1L << NOW) | (1L << DATE_DIF) | (1L << GET_YEAR) | (1L << GET_MONTH) | (1L << GET_DAY) | (1L << GET_HOUR) | (1L << GET_MINUTE) | (1L << ADD_DAY) | (1L << ADD_MONTH) | (1L << ADD_YEAR) | (1L << TRIM) | (1L << LPAREN))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (VAR - 68)) | (1L << (LISTA - 68)) | (1L << (NUMBER - 68)) | (1L << (DECIMAL - 68)) | (1L << (DATE - 68)) | (1L << (IDENTIFIER - 68)) | (1L << (TEXT - 68)) | (1L << (VAR_PRIMARY - 68)))) != 0) );
				State = 252;
				Match(RBRACE);
				}
				break;
			case IF:
			case SWITCH:
			case WHILE:
			case BREAK:
			case TRUE:
			case FALSE:
			case NULL:
			case ISNULL:
			case SUM_IF:
			case COUNT_IF:
			case ABS:
			case SQRT:
			case SUM:
			case MAX:
			case MIN:
			case AVERAGE:
			case LENGTH:
			case COALESCE:
			case ROUND:
			case DATE_FUNCTION:
			case TODAY:
			case NOW:
			case DATE_DIF:
			case GET_YEAR:
			case GET_MONTH:
			case GET_DAY:
			case GET_HOUR:
			case GET_MINUTE:
			case ADD_DAY:
			case ADD_MONTH:
			case ADD_YEAR:
			case TRIM:
			case LPAREN:
			case VAR:
			case LISTA:
			case NUMBER:
			case DECIMAL:
			case DATE:
			case IDENTIFIER:
			case TEXT:
			case VAR_PRIMARY:
				{
				State = 254;
				rule_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_expressionContext : ParserRuleContext {
		public Comparison_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_expression; } }
	 
		public Comparison_expressionContext() { }
		public virtual void CopyFrom(Comparison_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesisComparisonExpressionContext : Comparison_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_expressionContext comparison_expression() {
			return GetRuleContext<Comparison_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ParenthesisComparisonExpressionContext(Comparison_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : Comparison_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		public ComparisonExpressionContext(Comparison_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_expressionContext comparison_expression() {
		Comparison_expressionContext _localctx = new Comparison_expressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_comparison_expression);
		try {
			State = 265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				_localctx = new ComparisonExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 257;
				arithmetic_expression(0);
				State = 258;
				comparison_operator();
				State = 259;
				arithmetic_expression(0);
				}
				break;
			case 2:
				_localctx = new ParenthesisComparisonExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 261;
				Match(LPAREN);
				State = 262;
				comparison_expression();
				State = 263;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(LanguageParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(LanguageParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(LanguageParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(LanguageParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(LanguageParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(LanguageParser.NEQ, 0); }
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operatorContext comparison_operator() {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(Context, State);
		EnterRule(_localctx, 26, RULE_comparison_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << GE) | (1L << LT) | (1L << LE) | (1L << EQ) | (1L << NEQ))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATRIB() { return GetToken(LanguageParser.ATRIB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_ASSIGNMENT() { return GetToken(LanguageParser.PLUS_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_ASSIGNMENT() { return GetToken(LanguageParser.MINUS_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_ASSIGNMENT() { return GetToken(LanguageParser.MULT_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGNMENT() { return GetToken(LanguageParser.DIV_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW_ASSIGNMENT() { return GetToken(LanguageParser.POW_ASSIGNMENT, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_operatorContext assignment_operator() {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(Context, State);
		EnterRule(_localctx, 28, RULE_assignment_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & ((1L << (ATRIB - 62)) | (1L << (PLUS_ASSIGNMENT - 62)) | (1L << (MINUS_ASSIGNMENT - 62)) | (1L << (MULT_ASSIGNMENT - 62)) | (1L << (DIV_ASSIGNMENT - 62)) | (1L << (POW_ASSIGNMENT - 62)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
	 
		public LoopContext() { }
		public virtual void CopyFrom(LoopContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhileExpressionContext : LoopContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(LanguageParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public If_expressionContext if_expression() {
			return GetRuleContext<If_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(LanguageParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(LanguageParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rule_blockContext[] rule_block() {
			return GetRuleContexts<Rule_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_blockContext rule_block(int i) {
			return GetRuleContext<Rule_blockContext>(i);
		}
		public WhileExpressionContext(LoopContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 30, RULE_loop);
		int _la;
		try {
			_localctx = new WhileExpressionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			Match(WHILE);
			State = 272;
			Match(LPAREN);
			State = 273;
			if_expression(0);
			State = 274;
			Match(RPAREN);
			State = 275;
			Match(LBRACE);
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << SWITCH) | (1L << WHILE) | (1L << BREAK) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << ISNULL) | (1L << SUM_IF) | (1L << COUNT_IF) | (1L << ABS) | (1L << SQRT) | (1L << SUM) | (1L << MAX) | (1L << MIN) | (1L << AVERAGE) | (1L << LENGTH) | (1L << COALESCE) | (1L << ROUND) | (1L << DATE_FUNCTION) | (1L << TODAY) | (1L << NOW) | (1L << DATE_DIF) | (1L << GET_YEAR) | (1L << GET_MONTH) | (1L << GET_DAY) | (1L << GET_HOUR) | (1L << GET_MINUTE) | (1L << ADD_DAY) | (1L << ADD_MONTH) | (1L << ADD_YEAR) | (1L << TRIM) | (1L << LPAREN))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (VAR - 68)) | (1L << (LISTA - 68)) | (1L << (NUMBER - 68)) | (1L << (DECIMAL - 68)) | (1L << (DATE - 68)) | (1L << (IDENTIFIER - 68)) | (1L << (TEXT - 68)) | (1L << (VAR_PRIMARY - 68)))) != 0)) {
				{
				{
				State = 276;
				rule_block();
				}
				}
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 282;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(LanguageParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(LanguageParser.SEMI, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Break_statementContext break_statement() {
		Break_statementContext _localctx = new Break_statementContext(Context, State);
		EnterRule(_localctx, 32, RULE_break_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			Match(BREAK);
			State = 285;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_signatureContext : ParserRuleContext {
		public Function_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_signature; } }
	 
		public Function_signatureContext() { }
		public virtual void CopyFrom(Function_signatureContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddDayFunctionContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_DAY() { return GetToken(LanguageParser.ADD_DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LanguageParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public AddDayFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddDayFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AbsFunctionContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(LanguageParser.ABS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public AbsFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbsFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinDatabaseContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(LanguageParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(LanguageParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(LanguageParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public MinDatabaseContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AverageVariableContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVERAGE() { return GetToken(LanguageParser.AVERAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public AverageVariableContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAverageVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumIfListLocalContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM_IF() { return GetToken(LanguageParser.SUM_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LanguageParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public SumIfListLocalContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumIfListLocal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumIfFunctionContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM_IF() { return GetToken(LanguageParser.SUM_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(LanguageParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(LanguageParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LanguageParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public SumIfFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumIfFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LengthVariableContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LENGTH() { return GetToken(LanguageParser.LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public LengthVariableContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetMinuteFunctionContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_MINUTE() { return GetToken(LanguageParser.GET_MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public GetMinuteFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetMinuteFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaxListLocalContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(LanguageParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public MaxListLocalContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxListLocal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumDatabaseContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(LanguageParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(LanguageParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(LanguageParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public SumDatabaseContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinListLocalContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(LanguageParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public MinListLocalContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinListLocal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NowFunctionContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW() { return GetToken(LanguageParser.NOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public NowFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNowFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddMonthFunctionContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_MONTH() { return GetToken(LanguageParser.ADD_MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LanguageParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public AddMonthFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddMonthFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrimFunctionContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(LanguageParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public TrimFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrimFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AverageDatabaseContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVERAGE() { return GetToken(LanguageParser.AVERAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(LanguageParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(LanguageParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public AverageDatabaseContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAverageDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateFunctionContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_FUNCTION() { return GetToken(LanguageParser.DATE_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public DateFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetDayFunctionContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_DAY() { return GetToken(LanguageParser.GET_DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public GetDayFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetDayFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CountIfListLocalContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT_IF() { return GetToken(LanguageParser.COUNT_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LanguageParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public CountIfListLocalContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountIfListLocal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddYearFunctionContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_YEAR() { return GetToken(LanguageParser.ADD_YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LanguageParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public AddYearFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddYearFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoundFunctionContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND() { return GetToken(LanguageParser.ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LanguageParser.COMMA, 0); }
		public RoundFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoundFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CoalesceFunctionContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(LanguageParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		public CoalesceFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCoalesceFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumListLocalContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(LanguageParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public SumListLocalContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumListLocal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaxVariableContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(LanguageParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public MaxVariableContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumVariableContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(LanguageParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public SumVariableContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinVariableContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(LanguageParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public MinVariableContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TodayFunctionContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TODAY() { return GetToken(LanguageParser.TODAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public TodayFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTodayFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetHourFunctionContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_HOUR() { return GetToken(LanguageParser.GET_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public GetHourFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetHourFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateDifFunctionContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_DIF() { return GetToken(LanguageParser.DATE_DIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LanguageParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LanguageParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Date_unitContext date_unit() {
			return GetRuleContext<Date_unitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public DateDifFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateDifFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AverageListLocalContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVERAGE() { return GetToken(LanguageParser.AVERAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public AverageListLocalContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAverageListLocal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetYearFunctionContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_YEAR() { return GetToken(LanguageParser.GET_YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public GetYearFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetYearFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetMonthFunctionContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_MONTH() { return GetToken(LanguageParser.GET_MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public GetMonthFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetMonthFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LengthDatabaseContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LENGTH() { return GetToken(LanguageParser.LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public LengthDatabaseContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaxDatabaseContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(LanguageParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(LanguageParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(LanguageParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public MaxDatabaseContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsNullFunctionContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL() { return GetToken(LanguageParser.ISNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public IsNullFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsNullFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SqrtFunctionContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQRT() { return GetToken(LanguageParser.SQRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public SqrtFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqrtFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CountIfFunctionContext : Function_signatureContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT_IF() { return GetToken(LanguageParser.COUNT_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LanguageParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comparison_operatorContext comparison_operator() {
			return GetRuleContext<Comparison_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public CountIfFunctionContext(Function_signatureContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCountIfFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_signatureContext function_signature() {
		Function_signatureContext _localctx = new Function_signatureContext(Context, State);
		EnterRule(_localctx, 34, RULE_function_signature);
		int _la;
		try {
			State = 537;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				_localctx = new SumDatabaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 287;
				Match(SUM);
				State = 288;
				Match(LPAREN);
				State = 289;
				Match(VAR_PRIMARY);
				State = 290;
				Match(DOT);
				State = 291;
				Match(IDENTIFIER);
				State = 294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 292;
					Match(DOT);
					State = 293;
					Match(IDENTIFIER);
					}
				}

				State = 296;
				Match(RPAREN);
				}
				break;
			case 2:
				_localctx = new SumListLocalContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 297;
				Match(SUM);
				State = 298;
				Match(LPAREN);
				State = 299;
				Match(IDENTIFIER);
				State = 300;
				Match(DOT);
				State = 301;
				Match(IDENTIFIER);
				State = 302;
				Match(RPAREN);
				}
				break;
			case 3:
				_localctx = new SumVariableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 303;
				Match(SUM);
				State = 304;
				Match(LPAREN);
				State = 305;
				Match(IDENTIFIER);
				State = 306;
				Match(RPAREN);
				}
				break;
			case 4:
				_localctx = new MaxDatabaseContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 307;
				Match(MAX);
				State = 308;
				Match(LPAREN);
				State = 309;
				Match(VAR_PRIMARY);
				State = 310;
				Match(DOT);
				State = 311;
				Match(IDENTIFIER);
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 312;
					Match(DOT);
					State = 313;
					Match(IDENTIFIER);
					}
				}

				State = 316;
				Match(RPAREN);
				}
				break;
			case 5:
				_localctx = new MaxListLocalContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 317;
				Match(MAX);
				State = 318;
				Match(LPAREN);
				State = 319;
				Match(IDENTIFIER);
				State = 320;
				Match(DOT);
				State = 321;
				Match(IDENTIFIER);
				State = 322;
				Match(RPAREN);
				}
				break;
			case 6:
				_localctx = new MaxVariableContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 323;
				Match(MAX);
				State = 324;
				Match(LPAREN);
				State = 325;
				Match(IDENTIFIER);
				State = 326;
				Match(RPAREN);
				}
				break;
			case 7:
				_localctx = new MinDatabaseContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 327;
				Match(MIN);
				State = 328;
				Match(LPAREN);
				State = 329;
				Match(VAR_PRIMARY);
				State = 330;
				Match(DOT);
				State = 331;
				Match(IDENTIFIER);
				State = 334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 332;
					Match(DOT);
					State = 333;
					Match(IDENTIFIER);
					}
				}

				State = 336;
				Match(RPAREN);
				}
				break;
			case 8:
				_localctx = new MinListLocalContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 337;
				Match(MIN);
				State = 338;
				Match(LPAREN);
				State = 339;
				Match(IDENTIFIER);
				State = 340;
				Match(DOT);
				State = 341;
				Match(IDENTIFIER);
				State = 342;
				Match(RPAREN);
				}
				break;
			case 9:
				_localctx = new MinVariableContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 343;
				Match(MIN);
				State = 344;
				Match(LPAREN);
				State = 345;
				Match(IDENTIFIER);
				State = 346;
				Match(RPAREN);
				}
				break;
			case 10:
				_localctx = new AverageDatabaseContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 347;
				Match(AVERAGE);
				State = 348;
				Match(LPAREN);
				State = 349;
				Match(VAR_PRIMARY);
				State = 350;
				Match(DOT);
				State = 351;
				Match(IDENTIFIER);
				State = 354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 352;
					Match(DOT);
					State = 353;
					Match(IDENTIFIER);
					}
				}

				State = 356;
				Match(RPAREN);
				}
				break;
			case 11:
				_localctx = new AverageListLocalContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 357;
				Match(AVERAGE);
				State = 358;
				Match(LPAREN);
				State = 359;
				Match(IDENTIFIER);
				State = 360;
				Match(DOT);
				State = 361;
				Match(IDENTIFIER);
				State = 362;
				Match(RPAREN);
				}
				break;
			case 12:
				_localctx = new AverageVariableContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 363;
				Match(AVERAGE);
				State = 364;
				Match(LPAREN);
				State = 365;
				Match(IDENTIFIER);
				State = 366;
				Match(RPAREN);
				}
				break;
			case 13:
				_localctx = new LengthDatabaseContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 367;
				Match(LENGTH);
				State = 368;
				Match(LPAREN);
				State = 369;
				Match(VAR_PRIMARY);
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 370;
					Match(DOT);
					State = 371;
					Match(IDENTIFIER);
					}
				}

				State = 374;
				Match(RPAREN);
				}
				break;
			case 14:
				_localctx = new LengthVariableContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 375;
				Match(LENGTH);
				State = 376;
				Match(LPAREN);
				State = 377;
				Match(IDENTIFIER);
				State = 378;
				Match(RPAREN);
				}
				break;
			case 15:
				_localctx = new RoundFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 379;
				Match(ROUND);
				State = 380;
				Match(LPAREN);
				State = 381;
				arithmetic_expression(0);
				State = 384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 382;
					Match(COMMA);
					State = 383;
					arithmetic_expression(0);
					}
				}

				State = 386;
				Match(RPAREN);
				}
				break;
			case 16:
				_localctx = new CoalesceFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 388;
				Match(COALESCE);
				State = 389;
				Match(LPAREN);
				State = 390;
				entity();
				State = 393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 391;
					Match(COMMA);
					State = 392;
					entity();
					}
					}
					State = 395;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				State = 397;
				Match(RPAREN);
				}
				break;
			case 17:
				_localctx = new SqrtFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 399;
				Match(SQRT);
				State = 400;
				Match(LPAREN);
				State = 401;
				arithmetic_expression(0);
				State = 402;
				Match(RPAREN);
				}
				break;
			case 18:
				_localctx = new AbsFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 404;
				Match(ABS);
				State = 405;
				Match(LPAREN);
				State = 406;
				arithmetic_expression(0);
				State = 407;
				Match(RPAREN);
				}
				break;
			case 19:
				_localctx = new SumIfFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 409;
				Match(SUM_IF);
				State = 410;
				Match(LPAREN);
				State = 411;
				Match(VAR_PRIMARY);
				State = 412;
				Match(DOT);
				State = 413;
				Match(IDENTIFIER);
				State = 416;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 414;
					Match(DOT);
					State = 415;
					Match(IDENTIFIER);
					}
				}

				State = 418;
				Match(COMMA);
				State = 419;
				arithmetic_expression(0);
				State = 420;
				comparison_operator();
				State = 421;
				arithmetic_expression(0);
				State = 422;
				Match(RPAREN);
				}
				break;
			case 20:
				_localctx = new SumIfListLocalContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 424;
				Match(SUM_IF);
				State = 425;
				Match(LPAREN);
				State = 426;
				Match(IDENTIFIER);
				State = 427;
				Match(DOT);
				State = 428;
				Match(IDENTIFIER);
				State = 429;
				Match(COMMA);
				State = 430;
				arithmetic_expression(0);
				State = 431;
				comparison_operator();
				State = 432;
				arithmetic_expression(0);
				State = 433;
				Match(RPAREN);
				}
				break;
			case 21:
				_localctx = new CountIfFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 435;
				Match(COUNT_IF);
				State = 436;
				Match(LPAREN);
				State = 437;
				Match(VAR_PRIMARY);
				State = 440;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 438;
					Match(DOT);
					State = 439;
					Match(IDENTIFIER);
					}
				}

				State = 442;
				Match(COMMA);
				State = 443;
				arithmetic_expression(0);
				State = 444;
				comparison_operator();
				State = 445;
				arithmetic_expression(0);
				State = 446;
				Match(RPAREN);
				}
				break;
			case 22:
				_localctx = new CountIfListLocalContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 448;
				Match(COUNT_IF);
				State = 449;
				Match(LPAREN);
				State = 450;
				Match(IDENTIFIER);
				State = 451;
				Match(COMMA);
				State = 452;
				arithmetic_expression(0);
				State = 453;
				comparison_operator();
				State = 454;
				arithmetic_expression(0);
				State = 455;
				Match(RPAREN);
				}
				break;
			case 23:
				_localctx = new IsNullFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 457;
				Match(ISNULL);
				State = 458;
				Match(LPAREN);
				State = 459;
				arithmetic_expression(0);
				State = 460;
				Match(RPAREN);
				}
				break;
			case 24:
				_localctx = new DateFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 462;
				Match(DATE_FUNCTION);
				State = 463;
				Match(LPAREN);
				State = 464;
				arithmetic_expression(0);
				State = 465;
				Match(COMMA);
				State = 466;
				arithmetic_expression(0);
				State = 467;
				Match(COMMA);
				State = 468;
				arithmetic_expression(0);
				State = 469;
				Match(RPAREN);
				}
				break;
			case 25:
				_localctx = new TodayFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 471;
				Match(TODAY);
				State = 472;
				Match(LPAREN);
				State = 473;
				Match(RPAREN);
				}
				break;
			case 26:
				_localctx = new NowFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 474;
				Match(NOW);
				State = 475;
				Match(LPAREN);
				State = 476;
				Match(RPAREN);
				}
				break;
			case 27:
				_localctx = new DateDifFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 477;
				Match(DATE_DIF);
				State = 478;
				Match(LPAREN);
				State = 479;
				arithmetic_expression(0);
				State = 480;
				Match(COMMA);
				State = 481;
				arithmetic_expression(0);
				State = 482;
				Match(COMMA);
				State = 483;
				date_unit();
				State = 484;
				Match(RPAREN);
				}
				break;
			case 28:
				_localctx = new GetYearFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 486;
				Match(GET_YEAR);
				State = 487;
				Match(LPAREN);
				State = 488;
				arithmetic_expression(0);
				State = 489;
				Match(RPAREN);
				}
				break;
			case 29:
				_localctx = new GetMonthFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 491;
				Match(GET_MONTH);
				State = 492;
				Match(LPAREN);
				State = 493;
				arithmetic_expression(0);
				State = 494;
				Match(RPAREN);
				}
				break;
			case 30:
				_localctx = new GetDayFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 496;
				Match(GET_DAY);
				State = 497;
				Match(LPAREN);
				State = 498;
				arithmetic_expression(0);
				State = 499;
				Match(RPAREN);
				}
				break;
			case 31:
				_localctx = new GetHourFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 501;
				Match(GET_HOUR);
				State = 502;
				Match(LPAREN);
				State = 503;
				arithmetic_expression(0);
				State = 504;
				Match(RPAREN);
				}
				break;
			case 32:
				_localctx = new GetMinuteFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 506;
				Match(GET_MINUTE);
				State = 507;
				Match(LPAREN);
				State = 508;
				arithmetic_expression(0);
				State = 509;
				Match(RPAREN);
				}
				break;
			case 33:
				_localctx = new AddYearFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 511;
				Match(ADD_YEAR);
				State = 512;
				Match(LPAREN);
				State = 513;
				arithmetic_expression(0);
				State = 514;
				Match(COMMA);
				State = 515;
				arithmetic_expression(0);
				State = 516;
				Match(RPAREN);
				}
				break;
			case 34:
				_localctx = new AddMonthFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 518;
				Match(ADD_MONTH);
				State = 519;
				Match(LPAREN);
				State = 520;
				arithmetic_expression(0);
				State = 521;
				Match(COMMA);
				State = 522;
				arithmetic_expression(0);
				State = 523;
				Match(RPAREN);
				}
				break;
			case 35:
				_localctx = new AddDayFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 35);
				{
				State = 525;
				Match(ADD_DAY);
				State = 526;
				Match(LPAREN);
				State = 527;
				arithmetic_expression(0);
				State = 528;
				Match(COMMA);
				State = 529;
				arithmetic_expression(0);
				State = 530;
				Match(RPAREN);
				}
				break;
			case 36:
				_localctx = new TrimFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 36);
				{
				State = 532;
				Match(TRIM);
				State = 533;
				Match(LPAREN);
				State = 534;
				arithmetic_expression(0);
				State = 535;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arithmetic_expressionContext : ParserRuleContext {
		public Arithmetic_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic_expression; } }
	 
		public Arithmetic_expressionContext() { }
		public virtual void CopyFrom(Arithmetic_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MinusExpressionContext : Arithmetic_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LanguageParser.MINUS, 0); }
		public MinusExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowExpressionContext : Arithmetic_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(LanguageParser.POW, 0); }
		public PowExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpressionContext : Arithmetic_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LanguageParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression() {
			return GetRuleContext<Arithmetic_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LanguageParser.RPAREN, 0); }
		public ParenthesisExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultExpressionContext : Arithmetic_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(LanguageParser.MULT, 0); }
		public MultExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivExpressionContext : Arithmetic_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(LanguageParser.DIV, 0); }
		public DivExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusExpressionContext : Arithmetic_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext[] arithmetic_expression() {
			return GetRuleContexts<Arithmetic_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Arithmetic_expressionContext arithmetic_expression(int i) {
			return GetRuleContext<Arithmetic_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(LanguageParser.PLUS, 0); }
		public PlusExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfFunctionSignatureContext : Arithmetic_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_signatureContext function_signature() {
			return GetRuleContext<Function_signatureContext>(0);
		}
		public IfFunctionSignatureContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EntityExpressionContext : Arithmetic_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public EntityExpressionContext(Arithmetic_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetic_expressionContext arithmetic_expression() {
		return arithmetic_expression(0);
	}

	private Arithmetic_expressionContext arithmetic_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Arithmetic_expressionContext _localctx = new Arithmetic_expressionContext(Context, _parentState);
		Arithmetic_expressionContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_arithmetic_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 546;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				_localctx = new ParenthesisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 540;
				Match(LPAREN);
				State = 541;
				arithmetic_expression(0);
				State = 542;
				Match(RPAREN);
				}
				break;
			case ISNULL:
			case SUM_IF:
			case COUNT_IF:
			case ABS:
			case SQRT:
			case SUM:
			case MAX:
			case MIN:
			case AVERAGE:
			case LENGTH:
			case COALESCE:
			case ROUND:
			case DATE_FUNCTION:
			case TODAY:
			case NOW:
			case DATE_DIF:
			case GET_YEAR:
			case GET_MONTH:
			case GET_DAY:
			case GET_HOUR:
			case GET_MINUTE:
			case ADD_DAY:
			case ADD_MONTH:
			case ADD_YEAR:
			case TRIM:
				{
				_localctx = new IfFunctionSignatureContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 544;
				function_signature();
				}
				break;
			case TRUE:
			case FALSE:
			case NULL:
			case NUMBER:
			case DECIMAL:
			case DATE:
			case IDENTIFIER:
			case TEXT:
			case VAR_PRIMARY:
				{
				_localctx = new EntityExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 545;
				entity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 565;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 563;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
					case 1:
						{
						_localctx = new MultExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 548;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 549;
						Match(MULT);
						State = 550;
						arithmetic_expression(9);
						}
						break;
					case 2:
						{
						_localctx = new DivExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 551;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 552;
						Match(DIV);
						State = 553;
						arithmetic_expression(8);
						}
						break;
					case 3:
						{
						_localctx = new PlusExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 554;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 555;
						Match(PLUS);
						State = 556;
						arithmetic_expression(7);
						}
						break;
					case 4:
						{
						_localctx = new MinusExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 557;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 558;
						Match(MINUS);
						State = 559;
						arithmetic_expression(6);
						}
						break;
					case 5:
						{
						_localctx = new PowExpressionContext(new Arithmetic_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expression);
						State = 560;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 561;
						Match(POW);
						State = 562;
						arithmetic_expression(5);
						}
						break;
					}
					} 
				}
				State = 567;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EntityContext : ParserRuleContext {
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
	 
		public EntityContext() { }
		public virtual void CopyFrom(EntityContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListMemoryGlobalEntityContext : EntityContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListMemoryGlobalContext listMemoryGlobal() {
			return GetRuleContext<ListMemoryGlobalContext>(0);
		}
		public ListMemoryGlobalEntityContext(EntityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListMemoryGlobalEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarMemoryEntityContext : EntityContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarMemoryContext varMemory() {
			return GetRuleContext<VarMemoryContext>(0);
		}
		public VarMemoryEntityContext(EntityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarMemoryEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolEntityContext : EntityContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(LanguageParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(LanguageParser.FALSE, 0); }
		public BoolEntityContext(EntityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarPrimaryEntityContext : EntityContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		public VarPrimaryEntityContext(EntityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarPrimaryEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullEntityContext : EntityContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(LanguageParser.NULL, 0); }
		public NullEntityContext(EntityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberDecimalEntityContext : EntityContext {
		[System.Diagnostics.DebuggerNonUserCode] public Number_decimalContext number_decimal() {
			return GetRuleContext<Number_decimalContext>(0);
		}
		public NumberDecimalEntityContext(EntityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberDecimalEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableEntityContext : EntityContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public VariableEntityContext(EntityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListEntityContext : EntityContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public ListEntityContext(EntityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListMemoryEntityContext : EntityContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListMemoryContext listMemory() {
			return GetRuleContext<ListMemoryContext>(0);
		}
		public ListMemoryEntityContext(EntityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListMemoryEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberIntegerEntityContext : EntityContext {
		[System.Diagnostics.DebuggerNonUserCode] public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public NumberIntegerEntityContext(EntityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberIntegerEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringEntityContext : EntityContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public StringEntityContext(EntityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateEntityContext : EntityContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(LanguageParser.DATE, 0); }
		public DateEntityContext(EntityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		EntityContext _localctx = new EntityContext(Context, State);
		EnterRule(_localctx, 38, RULE_entity);
		int _la;
		try {
			State = 580;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				_localctx = new BoolEntityContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 568;
				_la = TokenStream.LA(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				_localctx = new NumberDecimalEntityContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 569;
				number_decimal();
				}
				break;
			case 3:
				_localctx = new NumberIntegerEntityContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 570;
				number_integer();
				}
				break;
			case 4:
				_localctx = new StringEntityContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 571;
				text();
				}
				break;
			case 5:
				_localctx = new DateEntityContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 572;
				Match(DATE);
				}
				break;
			case 6:
				_localctx = new VariableEntityContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 573;
				Match(IDENTIFIER);
				}
				break;
			case 7:
				_localctx = new ListEntityContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 574;
				list();
				}
				break;
			case 8:
				_localctx = new VarPrimaryEntityContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 575;
				Match(VAR_PRIMARY);
				}
				break;
			case 9:
				_localctx = new VarMemoryEntityContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 576;
				varMemory();
				}
				break;
			case 10:
				_localctx = new ListMemoryEntityContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 577;
				listMemory();
				}
				break;
			case 11:
				_localctx = new ListMemoryGlobalEntityContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 578;
				listMemoryGlobal();
				}
				break;
			case 12:
				_localctx = new NullEntityContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 579;
				Match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarMemoryContext : ParserRuleContext {
		public VarMemoryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varMemory; } }
	 
		public VarMemoryContext() { }
		public virtual void CopyFrom(VarMemoryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VarMemoryValueContext : VarMemoryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LanguageParser.IDENTIFIER, 0); }
		public VarMemoryValueContext(VarMemoryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarMemoryValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarMemoryContext varMemory() {
		VarMemoryContext _localctx = new VarMemoryContext(Context, State);
		EnterRule(_localctx, 40, RULE_varMemory);
		try {
			_localctx = new VarMemoryValueContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			Match(VAR_PRIMARY);
			State = 583;
			Match(DOT);
			State = 584;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListMemoryGlobalContext : ParserRuleContext {
		public ListMemoryGlobalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listMemoryGlobal; } }
	 
		public ListMemoryGlobalContext() { }
		public virtual void CopyFrom(ListMemoryGlobalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListMemoryGlobalValueContext : ListMemoryGlobalContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(LanguageParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(LanguageParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public ListMemoryGlobalValueContext(ListMemoryGlobalContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListMemoryGlobalValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListMemoryGlobalContext listMemoryGlobal() {
		ListMemoryGlobalContext _localctx = new ListMemoryGlobalContext(Context, State);
		EnterRule(_localctx, 42, RULE_listMemoryGlobal);
		try {
			_localctx = new ListMemoryGlobalValueContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 586;
			Match(VAR_PRIMARY);
			State = 587;
			Match(LBRACKET);
			State = 590;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 588;
				Match(IDENTIFIER);
				}
				break;
			case NUMBER:
				{
				State = 589;
				number_integer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 592;
			Match(RBRACKET);
			State = 593;
			Match(DOT);
			State = 594;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListMemoryContext : ParserRuleContext {
		public ListMemoryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listMemory; } }
	 
		public ListMemoryContext() { }
		public virtual void CopyFrom(ListMemoryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListMemoryValueContext : ListMemoryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_PRIMARY() { return GetToken(LanguageParser.VAR_PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(LanguageParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(LanguageParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(LanguageParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(LanguageParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		public ListMemoryValueContext(ListMemoryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListMemoryValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListMemoryContext listMemory() {
		ListMemoryContext _localctx = new ListMemoryContext(Context, State);
		EnterRule(_localctx, 44, RULE_listMemory);
		try {
			_localctx = new ListMemoryValueContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			Match(VAR_PRIMARY);
			State = 597;
			Match(DOT);
			State = 598;
			Match(IDENTIFIER);
			State = 599;
			Match(LBRACKET);
			State = 602;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 600;
				Match(IDENTIFIER);
				}
				break;
			case NUMBER:
				{
				State = 601;
				number_integer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 604;
			Match(RBRACKET);
			State = 605;
			Match(DOT);
			State = 606;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
	 
		public ListContext() { }
		public virtual void CopyFrom(ListContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListValueContext : ListContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LanguageParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LanguageParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(LanguageParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(LanguageParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Number_integerContext number_integer() {
			return GetRuleContext<Number_integerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LanguageParser.DOT, 0); }
		public ListValueContext(ListContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 46, RULE_list);
		try {
			_localctx = new ListValueContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 608;
			Match(IDENTIFIER);
			State = 609;
			Match(LBRACKET);
			State = 612;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 610;
				Match(IDENTIFIER);
				}
				break;
			case NUMBER:
				{
				State = 611;
				number_integer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 614;
			Match(RBRACKET);
			State = 617;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 615;
				Match(DOT);
				State = 616;
				Match(IDENTIFIER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
	 
		public TextContext() { }
		public virtual void CopyFrom(TextContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringContext : TextContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(LanguageParser.TEXT, 0); }
		public StringContext(TextContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 48, RULE_text);
		try {
			_localctx = new StringContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_integerContext : ParserRuleContext {
		public Number_integerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_integer; } }
	 
		public Number_integerContext() { }
		public virtual void CopyFrom(Number_integerContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberIntegerContext : Number_integerContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(LanguageParser.NUMBER, 0); }
		public NumberIntegerContext(Number_integerContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Number_integerContext number_integer() {
		Number_integerContext _localctx = new Number_integerContext(Context, State);
		EnterRule(_localctx, 50, RULE_number_integer);
		try {
			_localctx = new NumberIntegerContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 621;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_decimalContext : ParserRuleContext {
		public Number_decimalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_decimal; } }
	 
		public Number_decimalContext() { }
		public virtual void CopyFrom(Number_decimalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumberDecimalContext : Number_decimalContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(LanguageParser.DECIMAL, 0); }
		public NumberDecimalContext(Number_decimalContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Number_decimalContext number_decimal() {
		Number_decimalContext _localctx = new Number_decimalContext(Context, State);
		EnterRule(_localctx, 52, RULE_number_decimal);
		try {
			_localctx = new NumberDecimalContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 623;
			Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Date_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(LanguageParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(LanguageParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(LanguageParser.DAY, 0); }
		public Date_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Date_unitContext date_unit() {
		Date_unitContext _localctx = new Date_unitContext(Context, State);
		EnterRule(_localctx, 54, RULE_date_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << YEAR) | (1L << MONTH) | (1L << DAY))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return if_expression_sempred((If_expressionContext)_localctx, predIndex);
		case 18: return arithmetic_expression_sempred((Arithmetic_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool if_expression_sempred(If_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		}
		return true;
	}
	private bool arithmetic_expression_sempred(Arithmetic_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 6);
		case 5: return Precpred(Context, 5);
		case 6: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'T', '\x276', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x3', '\x2', '\a', '\x2', '<', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '?', '\v', '\x2', '\x3', '\x2', '\x5', '\x2', '\x42', '\n', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'K', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x65', '\n', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', 'u', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x89', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x98', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\xA1', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'\xA5', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xB3', '\n', '\a', '\x3', 
		'\b', '\a', '\b', '\xB6', '\n', '\b', '\f', '\b', '\xE', '\b', '\xB9', 
		'\v', '\b', '\x3', '\t', '\a', '\t', '\xBC', '\n', '\t', '\f', '\t', '\xE', 
		'\t', '\xBF', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', '\xCF', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\xD7', '\n', '\n', '\f', 
		'\n', '\xE', '\n', '\xDA', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x6', '\v', '\xE0', '\n', '\v', '\r', '\v', '\xE', 
		'\v', '\xE1', '\x3', '\v', '\x5', '\v', '\xE5', '\n', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x6', '\f', '\xEE', '\n', '\f', '\r', '\f', '\xE', '\f', '\xEF', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xF5', '\n', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x6', '\r', '\xFB', 
		'\n', '\r', '\r', '\r', '\xE', '\r', '\xFC', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', '\x102', '\n', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\x10C', '\n', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x118', 
		'\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x11B', '\v', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\x129', '\n', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x13D', '\n', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x151', '\n', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x165', '\n', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\x177', '\n', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\x183', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x6', '\x13', '\x18C', 
		'\n', '\x13', '\r', '\x13', '\xE', '\x13', '\x18D', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x1A3', '\n', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x1BB', '\n', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x21C', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\x225', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\a', '\x14', '\x236', '\n', '\x14', '\f', '\x14', 
		'\xE', '\x14', '\x239', '\v', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\x247', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x251', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x25D', '\n', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x267', '\n', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x26C', 
		'\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x2', '\x4', '\x12', '&', '\x1E', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', '\x2', '\x6', '\x3', '\x2', '\x37', '<', '\x3', '\x2', '@', '\x45', 
		'\x3', '\x2', '\xF', '\x10', '\x3', '\x2', '=', '?', '\x2', '\x2C0', '\x2', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x4', 'J', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x64', '\x3', '\x2', '\x2', '\x2', '\b', '\xA0', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\xA2', '\x3', '\x2', '\x2', '\x2', '\f', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x12', '\xCE', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xDB', '\x3', '\x2', '\x2', '\x2', '\x16', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xF6', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x10D', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x10F', '\x3', '\x2', '\x2', '\x2', ' ', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x11E', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x21B', '\x3', '\x2', '\x2', '\x2', '&', '\x224', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x246', '\x3', '\x2', '\x2', '\x2', '*', '\x248', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x24C', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x256', '\x3', '\x2', '\x2', '\x2', '\x30', '\x262', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x34', '\x26F', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x271', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x273', '\x3', '\x2', '\x2', '\x2', ':', '<', '\x5', '\x4', '\x3', 
		'\x2', ';', ':', '\x3', '\x2', '\x2', '\x2', '<', '?', '\x3', '\x2', '\x2', 
		'\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x41', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x42', '\x5', '\n', '\x6', '\x2', '\x41', '@', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x43', 'K', '\x5', '\x6', '\x4', '\x2', 
		'\x44', 'K', '\x5', '\x14', '\v', '\x2', '\x45', 'K', '\x5', '&', '\x14', 
		'\x2', '\x46', 'K', '\x5', '\f', '\a', '\x2', 'G', 'K', '\x5', ' ', '\x11', 
		'\x2', 'H', 'K', '\x5', '\"', '\x12', '\x2', 'I', 'K', '\x5', '\b', '\x5', 
		'\x2', 'J', '\x43', '\x3', '\x2', '\x2', '\x2', 'J', '\x44', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x45', '\x3', '\x2', '\x2', '\x2', 'J', '\x46', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'G', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'I', '\x3', '\x2', '\x2', '\x2', 'K', '\x5', 
		'\x3', '\x2', '\x2', '\x2', 'L', 'M', '\a', '\x46', '\x2', '\x2', 'M', 
		'N', '\a', 'O', '\x2', '\x2', 'N', 'O', '\a', '@', '\x2', '\x2', 'O', 
		'P', '\x5', '&', '\x14', '\x2', 'P', 'Q', '\a', 'R', '\x2', '\x2', 'Q', 
		'\x65', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\x46', '\x2', '\x2', 
		'S', 'T', '\a', 'O', '\x2', '\x2', 'T', 'U', '\a', '@', '\x2', '\x2', 
		'U', 'V', '\x5', '\x1A', '\xE', '\x2', 'V', 'W', '\a', 'R', '\x2', '\x2', 
		'W', '\x65', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', 'G', '\x2', '\x2', 
		'Y', 'Z', '\a', 'O', '\x2', '\x2', 'Z', '[', '\a', '@', '\x2', '\x2', 
		'[', '\\', '\x5', '&', '\x14', '\x2', '\\', ']', '\a', 'R', '\x2', '\x2', 
		']', '\x65', '\x3', '\x2', '\x2', '\x2', '^', '_', '\a', 'G', '\x2', '\x2', 
		'_', '`', '\a', 'O', '\x2', '\x2', '`', '\x61', '\a', '@', '\x2', '\x2', 
		'\x61', '\x62', '\a', ',', '\x2', '\x2', '\x62', '\x63', '\a', '-', '\x2', 
		'\x2', '\x63', '\x65', '\a', 'R', '\x2', '\x2', '\x64', 'L', '\x3', '\x2', 
		'\x2', '\x2', '\x64', 'R', '\x3', '\x2', '\x2', '\x2', '\x64', 'X', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '^', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\a', 'O', '\x2', '\x2', 
		'g', 'h', '\a', '@', '\x2', '\x2', 'h', 'i', '\x5', '\x1A', '\xE', '\x2', 
		'i', 'j', '\a', 'R', '\x2', '\x2', 'j', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'k', 'l', '\a', 'O', '\x2', '\x2', 'l', 'm', '\x5', '\x1E', '\x10', '\x2', 
		'm', 'n', '\x5', '&', '\x14', '\x2', 'n', 'o', '\a', 'R', '\x2', '\x2', 
		'o', '\xA1', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', 'O', '\x2', '\x2', 
		'q', 't', '\a', ',', '\x2', '\x2', 'r', 'u', '\a', 'O', '\x2', '\x2', 
		's', 'u', '\x5', '\x34', '\x1B', '\x2', 't', 'r', '\x3', '\x2', '\x2', 
		'\x2', 't', 's', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'w', '\a', '-', '\x2', '\x2', 'w', 'x', '\a', 'J', '\x2', 
		'\x2', 'x', 'y', '\a', 'O', '\x2', '\x2', 'y', 'z', '\x5', '\x1E', '\x10', 
		'\x2', 'z', '{', '\x5', '&', '\x14', '\x2', '{', '|', '\a', 'R', '\x2', 
		'\x2', '|', '\xA1', '\x3', '\x2', '\x2', '\x2', '}', '~', '\a', 'Q', '\x2', 
		'\x2', '~', '\x7F', '\a', 'J', '\x2', '\x2', '\x7F', '\x80', '\a', 'O', 
		'\x2', '\x2', '\x80', '\x81', '\x5', '\x1E', '\x10', '\x2', '\x81', '\x82', 
		'\x5', '&', '\x14', '\x2', '\x82', '\x83', '\a', 'R', '\x2', '\x2', '\x83', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\a', 'Q', '\x2', 
		'\x2', '\x85', '\x88', '\a', ',', '\x2', '\x2', '\x86', '\x89', '\a', 
		'O', '\x2', '\x2', '\x87', '\x89', '\x5', '\x34', '\x1B', '\x2', '\x88', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x88', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\a', 
		'-', '\x2', '\x2', '\x8B', '\x8C', '\a', 'J', '\x2', '\x2', '\x8C', '\x8D', 
		'\a', 'O', '\x2', '\x2', '\x8D', '\x8E', '\x5', '\x1E', '\x10', '\x2', 
		'\x8E', '\x8F', '\x5', '&', '\x14', '\x2', '\x8F', '\x90', '\a', 'R', 
		'\x2', '\x2', '\x90', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', 
		'\a', 'Q', '\x2', '\x2', '\x92', '\x93', '\a', 'J', '\x2', '\x2', '\x93', 
		'\x94', '\a', 'O', '\x2', '\x2', '\x94', '\x97', '\a', ',', '\x2', '\x2', 
		'\x95', '\x98', '\a', 'O', '\x2', '\x2', '\x96', '\x98', '\x5', '\x34', 
		'\x1B', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x99', '\x9A', '\a', '-', '\x2', '\x2', '\x9A', '\x9B', '\a', 'J', '\x2', 
		'\x2', '\x9B', '\x9C', '\a', 'O', '\x2', '\x2', '\x9C', '\x9D', '\x5', 
		'\x1E', '\x10', '\x2', '\x9D', '\x9E', '\x5', '&', '\x14', '\x2', '\x9E', 
		'\x9F', '\a', 'R', '\x2', '\x2', '\x9F', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\x66', '\x3', '\x2', '\x2', '\x2', '\xA0', 'k', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', 'p', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'}', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\x91', '\x3', '\x2', '\x2', '\x2', '\xA1', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA4', '\a', 'H', '\x2', '\x2', '\xA3', 
		'\xA5', '\x5', '&', '\x14', '\x2', '\xA4', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA7', '\a', 'R', '\x2', '\x2', '\xA7', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', '\a', '\x5', '\x2', 
		'\x2', '\xA9', '\xAA', '\x5', '\x12', '\n', '\x2', '\xAA', '\xAB', '\a', 
		'.', '\x2', '\x2', '\xAB', '\xAC', '\x5', '\xE', '\b', '\x2', '\xAC', 
		'\xB2', '\a', '/', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x6', '\x2', '\x2', 
		'\xAE', '\xAF', '\a', '.', '\x2', '\x2', '\xAF', '\xB0', '\x5', '\x10', 
		'\t', '\x2', '\xB0', '\xB1', '\a', '/', '\x2', '\x2', '\xB1', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB3', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\xB6', '\x5', '\x4', '\x3', '\x2', '\xB5', '\xB4', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB9', '\x3', '\x2', '\x2', '\x2', 
		'\xB7', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\xF', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\xBC', '\x5', '\x4', '\x3', '\x2', 
		'\xBB', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBF', '\x3', '\x2', 
		'\x2', '\x2', '\xBD', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\xBF', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\b', '\n', 
		'\x1', '\x2', '\xC1', '\xCF', '\x5', '\x1A', '\xE', '\x2', '\xC2', '\xC3', 
		'\a', '\xE', '\x2', '\x2', '\xC3', '\xC4', '\a', '\x30', '\x2', '\x2', 
		'\xC4', '\xC5', '\x5', '\x12', '\n', '\x2', '\xC5', '\xC6', '\a', '\x31', 
		'\x2', '\x2', '\xC6', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', 
		'\a', '\x30', '\x2', '\x2', '\xC8', '\xC9', '\x5', '\x12', '\n', '\x2', 
		'\xC9', '\xCA', '\a', '\x31', '\x2', '\x2', '\xCA', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\xCB', '\xCC', '\a', '\xE', '\x2', '\x2', '\xCC', '\xCF', 
		'\x5', '(', '\x15', '\x2', '\xCD', '\xCF', '\x5', '(', '\x15', '\x2', 
		'\xCE', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xC2', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCB', 
		'\x3', '\x2', '\x2', '\x2', '\xCE', '\xCD', '\x3', '\x2', '\x2', '\x2', 
		'\xCF', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\f', '\t', 
		'\x2', '\x2', '\xD1', '\xD2', '\a', '\f', '\x2', '\x2', '\xD2', '\xD7', 
		'\x5', '\x12', '\n', '\n', '\xD3', '\xD4', '\f', '\b', '\x2', '\x2', '\xD4', 
		'\xD5', '\a', '\r', '\x2', '\x2', '\xD5', '\xD7', '\x5', '\x12', '\n', 
		'\t', '\xD6', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\xD7', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xD8', 
		'\xD6', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '\x13', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD8', '\x3', 
		'\x2', '\x2', '\x2', '\xDB', '\xDC', '\a', '\a', '\x2', '\x2', '\xDC', 
		'\xDD', '\x5', '&', '\x14', '\x2', '\xDD', '\xDF', '\a', '.', '\x2', '\x2', 
		'\xDE', '\xE0', '\x5', '\x16', '\f', '\x2', '\xDF', '\xDE', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xDF', 
		'\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE5', '\x5', '\x18', 
		'\r', '\x2', '\xE4', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', 
		'\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\x3', '\x2', '\x2', '\x2', 
		'\xE6', '\xE7', '\a', '/', '\x2', '\x2', '\xE7', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\xE9', '\a', '\b', '\x2', '\x2', '\xE9', '\xEA', 
		'\x5', '&', '\x14', '\x2', '\xEA', '\xF4', '\a', 'S', '\x2', '\x2', '\xEB', 
		'\xED', '\a', '.', '\x2', '\x2', '\xEC', '\xEE', '\x5', '\x4', '\x3', 
		'\x2', '\xED', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', 
		'\x2', '\xF1', '\xF2', '\a', '/', '\x2', '\x2', '\xF2', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '\xF5', '\x5', '\x4', '\x3', '\x2', '\xF4', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF3', '\x3', '\x2', '\x2', 
		'\x2', '\xF5', '\x17', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\a', 
		'\t', '\x2', '\x2', '\xF7', '\x101', '\a', 'S', '\x2', '\x2', '\xF8', 
		'\xFA', '\a', '.', '\x2', '\x2', '\xF9', '\xFB', '\x5', '\x4', '\x3', 
		'\x2', '\xFA', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\xFC', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFC', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', '\x3', '\x2', '\x2', 
		'\x2', '\xFE', '\xFF', '\a', '/', '\x2', '\x2', '\xFF', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\x102', '\x5', '\x4', '\x3', '\x2', '\x101', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\x101', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\x102', '\x19', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', 
		'\x5', '&', '\x14', '\x2', '\x104', '\x105', '\x5', '\x1C', '\xF', '\x2', 
		'\x105', '\x106', '\x5', '&', '\x14', '\x2', '\x106', '\x10C', '\x3', 
		'\x2', '\x2', '\x2', '\x107', '\x108', '\a', '\x30', '\x2', '\x2', '\x108', 
		'\x109', '\x5', '\x1A', '\xE', '\x2', '\x109', '\x10A', '\a', '\x31', 
		'\x2', '\x2', '\x10A', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\x10C', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\t', '\x2', 
		'\x2', '\x2', '\x10E', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', 
		'\t', '\x3', '\x2', '\x2', '\x110', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x111', '\x112', '\a', '\n', '\x2', '\x2', '\x112', '\x113', '\a', '\x30', 
		'\x2', '\x2', '\x113', '\x114', '\x5', '\x12', '\n', '\x2', '\x114', '\x115', 
		'\a', '\x31', '\x2', '\x2', '\x115', '\x119', '\a', '.', '\x2', '\x2', 
		'\x116', '\x118', '\x5', '\x4', '\x3', '\x2', '\x117', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x119', 
		'\x117', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\a', '/', '\x2', '\x2', 
		'\x11D', '!', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', '\a', '\v', 
		'\x2', '\x2', '\x11F', '\x120', '\a', 'R', '\x2', '\x2', '\x120', '#', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\x122', '\a', '\x18', '\x2', '\x2', 
		'\x122', '\x123', '\a', '\x30', '\x2', '\x2', '\x123', '\x124', '\a', 
		'Q', '\x2', '\x2', '\x124', '\x125', '\a', 'J', '\x2', '\x2', '\x125', 
		'\x128', '\a', 'O', '\x2', '\x2', '\x126', '\x127', '\a', 'J', '\x2', 
		'\x2', '\x127', '\x129', '\a', 'O', '\x2', '\x2', '\x128', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x129', '\x3', '\x2', '\x2', '\x2', '\x129', 
		'\x12A', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x21C', '\a', '\x31', '\x2', 
		'\x2', '\x12B', '\x12C', '\a', '\x18', '\x2', '\x2', '\x12C', '\x12D', 
		'\a', '\x30', '\x2', '\x2', '\x12D', '\x12E', '\a', 'O', '\x2', '\x2', 
		'\x12E', '\x12F', '\a', 'J', '\x2', '\x2', '\x12F', '\x130', '\a', 'O', 
		'\x2', '\x2', '\x130', '\x21C', '\a', '\x31', '\x2', '\x2', '\x131', '\x132', 
		'\a', '\x18', '\x2', '\x2', '\x132', '\x133', '\a', '\x30', '\x2', '\x2', 
		'\x133', '\x134', '\a', 'O', '\x2', '\x2', '\x134', '\x21C', '\a', '\x31', 
		'\x2', '\x2', '\x135', '\x136', '\a', '\x19', '\x2', '\x2', '\x136', '\x137', 
		'\a', '\x30', '\x2', '\x2', '\x137', '\x138', '\a', 'Q', '\x2', '\x2', 
		'\x138', '\x139', '\a', 'J', '\x2', '\x2', '\x139', '\x13C', '\a', 'O', 
		'\x2', '\x2', '\x13A', '\x13B', '\a', 'J', '\x2', '\x2', '\x13B', '\x13D', 
		'\a', 'O', '\x2', '\x2', '\x13C', '\x13A', '\x3', '\x2', '\x2', '\x2', 
		'\x13C', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13E', '\x3', 
		'\x2', '\x2', '\x2', '\x13E', '\x21C', '\a', '\x31', '\x2', '\x2', '\x13F', 
		'\x140', '\a', '\x19', '\x2', '\x2', '\x140', '\x141', '\a', '\x30', '\x2', 
		'\x2', '\x141', '\x142', '\a', 'O', '\x2', '\x2', '\x142', '\x143', '\a', 
		'J', '\x2', '\x2', '\x143', '\x144', '\a', 'O', '\x2', '\x2', '\x144', 
		'\x21C', '\a', '\x31', '\x2', '\x2', '\x145', '\x146', '\a', '\x19', '\x2', 
		'\x2', '\x146', '\x147', '\a', '\x30', '\x2', '\x2', '\x147', '\x148', 
		'\a', 'O', '\x2', '\x2', '\x148', '\x21C', '\a', '\x31', '\x2', '\x2', 
		'\x149', '\x14A', '\a', '\x1A', '\x2', '\x2', '\x14A', '\x14B', '\a', 
		'\x30', '\x2', '\x2', '\x14B', '\x14C', '\a', 'Q', '\x2', '\x2', '\x14C', 
		'\x14D', '\a', 'J', '\x2', '\x2', '\x14D', '\x150', '\a', 'O', '\x2', 
		'\x2', '\x14E', '\x14F', '\a', 'J', '\x2', '\x2', '\x14F', '\x151', '\a', 
		'O', '\x2', '\x2', '\x150', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x150', 
		'\x151', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\x3', '\x2', '\x2', 
		'\x2', '\x152', '\x21C', '\a', '\x31', '\x2', '\x2', '\x153', '\x154', 
		'\a', '\x1A', '\x2', '\x2', '\x154', '\x155', '\a', '\x30', '\x2', '\x2', 
		'\x155', '\x156', '\a', 'O', '\x2', '\x2', '\x156', '\x157', '\a', 'J', 
		'\x2', '\x2', '\x157', '\x158', '\a', 'O', '\x2', '\x2', '\x158', '\x21C', 
		'\a', '\x31', '\x2', '\x2', '\x159', '\x15A', '\a', '\x1A', '\x2', '\x2', 
		'\x15A', '\x15B', '\a', '\x30', '\x2', '\x2', '\x15B', '\x15C', '\a', 
		'O', '\x2', '\x2', '\x15C', '\x21C', '\a', '\x31', '\x2', '\x2', '\x15D', 
		'\x15E', '\a', '\x1B', '\x2', '\x2', '\x15E', '\x15F', '\a', '\x30', '\x2', 
		'\x2', '\x15F', '\x160', '\a', 'Q', '\x2', '\x2', '\x160', '\x161', '\a', 
		'J', '\x2', '\x2', '\x161', '\x164', '\a', 'O', '\x2', '\x2', '\x162', 
		'\x163', '\a', 'J', '\x2', '\x2', '\x163', '\x165', '\a', 'O', '\x2', 
		'\x2', '\x164', '\x162', '\x3', '\x2', '\x2', '\x2', '\x164', '\x165', 
		'\x3', '\x2', '\x2', '\x2', '\x165', '\x166', '\x3', '\x2', '\x2', '\x2', 
		'\x166', '\x21C', '\a', '\x31', '\x2', '\x2', '\x167', '\x168', '\a', 
		'\x1B', '\x2', '\x2', '\x168', '\x169', '\a', '\x30', '\x2', '\x2', '\x169', 
		'\x16A', '\a', 'O', '\x2', '\x2', '\x16A', '\x16B', '\a', 'J', '\x2', 
		'\x2', '\x16B', '\x16C', '\a', 'O', '\x2', '\x2', '\x16C', '\x21C', '\a', 
		'\x31', '\x2', '\x2', '\x16D', '\x16E', '\a', '\x1B', '\x2', '\x2', '\x16E', 
		'\x16F', '\a', '\x30', '\x2', '\x2', '\x16F', '\x170', '\a', 'O', '\x2', 
		'\x2', '\x170', '\x21C', '\a', '\x31', '\x2', '\x2', '\x171', '\x172', 
		'\a', '\x1C', '\x2', '\x2', '\x172', '\x173', '\a', '\x30', '\x2', '\x2', 
		'\x173', '\x176', '\a', 'Q', '\x2', '\x2', '\x174', '\x175', '\a', 'J', 
		'\x2', '\x2', '\x175', '\x177', '\a', 'O', '\x2', '\x2', '\x176', '\x174', 
		'\x3', '\x2', '\x2', '\x2', '\x176', '\x177', '\x3', '\x2', '\x2', '\x2', 
		'\x177', '\x178', '\x3', '\x2', '\x2', '\x2', '\x178', '\x21C', '\a', 
		'\x31', '\x2', '\x2', '\x179', '\x17A', '\a', '\x1C', '\x2', '\x2', '\x17A', 
		'\x17B', '\a', '\x30', '\x2', '\x2', '\x17B', '\x17C', '\a', 'O', '\x2', 
		'\x2', '\x17C', '\x21C', '\a', '\x31', '\x2', '\x2', '\x17D', '\x17E', 
		'\a', '\x1E', '\x2', '\x2', '\x17E', '\x17F', '\a', '\x30', '\x2', '\x2', 
		'\x17F', '\x182', '\x5', '&', '\x14', '\x2', '\x180', '\x181', '\a', 'I', 
		'\x2', '\x2', '\x181', '\x183', '\x5', '&', '\x14', '\x2', '\x182', '\x180', 
		'\x3', '\x2', '\x2', '\x2', '\x182', '\x183', '\x3', '\x2', '\x2', '\x2', 
		'\x183', '\x184', '\x3', '\x2', '\x2', '\x2', '\x184', '\x185', '\a', 
		'\x31', '\x2', '\x2', '\x185', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x186', 
		'\x187', '\a', '\x1D', '\x2', '\x2', '\x187', '\x188', '\a', '\x30', '\x2', 
		'\x2', '\x188', '\x18B', '\x5', '(', '\x15', '\x2', '\x189', '\x18A', 
		'\a', 'I', '\x2', '\x2', '\x18A', '\x18C', '\x5', '(', '\x15', '\x2', 
		'\x18B', '\x189', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18D', '\x3', 
		'\x2', '\x2', '\x2', '\x18D', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18D', 
		'\x18E', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18F', '\x3', '\x2', '\x2', 
		'\x2', '\x18F', '\x190', '\a', '\x31', '\x2', '\x2', '\x190', '\x21C', 
		'\x3', '\x2', '\x2', '\x2', '\x191', '\x192', '\a', '\x17', '\x2', '\x2', 
		'\x192', '\x193', '\a', '\x30', '\x2', '\x2', '\x193', '\x194', '\x5', 
		'&', '\x14', '\x2', '\x194', '\x195', '\a', '\x31', '\x2', '\x2', '\x195', 
		'\x21C', '\x3', '\x2', '\x2', '\x2', '\x196', '\x197', '\a', '\x16', '\x2', 
		'\x2', '\x197', '\x198', '\a', '\x30', '\x2', '\x2', '\x198', '\x199', 
		'\x5', '&', '\x14', '\x2', '\x199', '\x19A', '\a', '\x31', '\x2', '\x2', 
		'\x19A', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x19C', '\a', 
		'\x14', '\x2', '\x2', '\x19C', '\x19D', '\a', '\x30', '\x2', '\x2', '\x19D', 
		'\x19E', '\a', 'Q', '\x2', '\x2', '\x19E', '\x19F', '\a', 'J', '\x2', 
		'\x2', '\x19F', '\x1A2', '\a', 'O', '\x2', '\x2', '\x1A0', '\x1A1', '\a', 
		'J', '\x2', '\x2', '\x1A1', '\x1A3', '\a', 'O', '\x2', '\x2', '\x1A2', 
		'\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3', '\x3', '\x2', '\x2', 
		'\x2', '\x1A3', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A5', 
		'\a', 'I', '\x2', '\x2', '\x1A5', '\x1A6', '\x5', '&', '\x14', '\x2', 
		'\x1A6', '\x1A7', '\x5', '\x1C', '\xF', '\x2', '\x1A7', '\x1A8', '\x5', 
		'&', '\x14', '\x2', '\x1A8', '\x1A9', '\a', '\x31', '\x2', '\x2', '\x1A9', 
		'\x21C', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\a', '\x14', '\x2', 
		'\x2', '\x1AB', '\x1AC', '\a', '\x30', '\x2', '\x2', '\x1AC', '\x1AD', 
		'\a', 'O', '\x2', '\x2', '\x1AD', '\x1AE', '\a', 'J', '\x2', '\x2', '\x1AE', 
		'\x1AF', '\a', 'O', '\x2', '\x2', '\x1AF', '\x1B0', '\a', 'I', '\x2', 
		'\x2', '\x1B0', '\x1B1', '\x5', '&', '\x14', '\x2', '\x1B1', '\x1B2', 
		'\x5', '\x1C', '\xF', '\x2', '\x1B2', '\x1B3', '\x5', '&', '\x14', '\x2', 
		'\x1B3', '\x1B4', '\a', '\x31', '\x2', '\x2', '\x1B4', '\x21C', '\x3', 
		'\x2', '\x2', '\x2', '\x1B5', '\x1B6', '\a', '\x15', '\x2', '\x2', '\x1B6', 
		'\x1B7', '\a', '\x30', '\x2', '\x2', '\x1B7', '\x1BA', '\a', 'Q', '\x2', 
		'\x2', '\x1B8', '\x1B9', '\a', 'J', '\x2', '\x2', '\x1B9', '\x1BB', '\a', 
		'O', '\x2', '\x2', '\x1BA', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1BA', 
		'\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BC', '\x3', '\x2', '\x2', 
		'\x2', '\x1BC', '\x1BD', '\a', 'I', '\x2', '\x2', '\x1BD', '\x1BE', '\x5', 
		'&', '\x14', '\x2', '\x1BE', '\x1BF', '\x5', '\x1C', '\xF', '\x2', '\x1BF', 
		'\x1C0', '\x5', '&', '\x14', '\x2', '\x1C0', '\x1C1', '\a', '\x31', '\x2', 
		'\x2', '\x1C1', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C3', 
		'\a', '\x15', '\x2', '\x2', '\x1C3', '\x1C4', '\a', '\x30', '\x2', '\x2', 
		'\x1C4', '\x1C5', '\a', 'O', '\x2', '\x2', '\x1C5', '\x1C6', '\a', 'I', 
		'\x2', '\x2', '\x1C6', '\x1C7', '\x5', '&', '\x14', '\x2', '\x1C7', '\x1C8', 
		'\x5', '\x1C', '\xF', '\x2', '\x1C8', '\x1C9', '\x5', '&', '\x14', '\x2', 
		'\x1C9', '\x1CA', '\a', '\x31', '\x2', '\x2', '\x1CA', '\x21C', '\x3', 
		'\x2', '\x2', '\x2', '\x1CB', '\x1CC', '\a', '\x13', '\x2', '\x2', '\x1CC', 
		'\x1CD', '\a', '\x30', '\x2', '\x2', '\x1CD', '\x1CE', '\x5', '&', '\x14', 
		'\x2', '\x1CE', '\x1CF', '\a', '\x31', '\x2', '\x2', '\x1CF', '\x21C', 
		'\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D1', '\a', '\x1F', '\x2', '\x2', 
		'\x1D1', '\x1D2', '\a', '\x30', '\x2', '\x2', '\x1D2', '\x1D3', '\x5', 
		'&', '\x14', '\x2', '\x1D3', '\x1D4', '\a', 'I', '\x2', '\x2', '\x1D4', 
		'\x1D5', '\x5', '&', '\x14', '\x2', '\x1D5', '\x1D6', '\a', 'I', '\x2', 
		'\x2', '\x1D6', '\x1D7', '\x5', '&', '\x14', '\x2', '\x1D7', '\x1D8', 
		'\a', '\x31', '\x2', '\x2', '\x1D8', '\x21C', '\x3', '\x2', '\x2', '\x2', 
		'\x1D9', '\x1DA', '\a', ' ', '\x2', '\x2', '\x1DA', '\x1DB', '\a', '\x30', 
		'\x2', '\x2', '\x1DB', '\x21C', '\a', '\x31', '\x2', '\x2', '\x1DC', '\x1DD', 
		'\a', '!', '\x2', '\x2', '\x1DD', '\x1DE', '\a', '\x30', '\x2', '\x2', 
		'\x1DE', '\x21C', '\a', '\x31', '\x2', '\x2', '\x1DF', '\x1E0', '\a', 
		'\"', '\x2', '\x2', '\x1E0', '\x1E1', '\a', '\x30', '\x2', '\x2', '\x1E1', 
		'\x1E2', '\x5', '&', '\x14', '\x2', '\x1E2', '\x1E3', '\a', 'I', '\x2', 
		'\x2', '\x1E3', '\x1E4', '\x5', '&', '\x14', '\x2', '\x1E4', '\x1E5', 
		'\a', 'I', '\x2', '\x2', '\x1E5', '\x1E6', '\x5', '\x38', '\x1D', '\x2', 
		'\x1E6', '\x1E7', '\a', '\x31', '\x2', '\x2', '\x1E7', '\x21C', '\x3', 
		'\x2', '\x2', '\x2', '\x1E8', '\x1E9', '\a', '#', '\x2', '\x2', '\x1E9', 
		'\x1EA', '\a', '\x30', '\x2', '\x2', '\x1EA', '\x1EB', '\x5', '&', '\x14', 
		'\x2', '\x1EB', '\x1EC', '\a', '\x31', '\x2', '\x2', '\x1EC', '\x21C', 
		'\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EE', '\a', '$', '\x2', '\x2', 
		'\x1EE', '\x1EF', '\a', '\x30', '\x2', '\x2', '\x1EF', '\x1F0', '\x5', 
		'&', '\x14', '\x2', '\x1F0', '\x1F1', '\a', '\x31', '\x2', '\x2', '\x1F1', 
		'\x21C', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F3', '\a', '%', '\x2', 
		'\x2', '\x1F3', '\x1F4', '\a', '\x30', '\x2', '\x2', '\x1F4', '\x1F5', 
		'\x5', '&', '\x14', '\x2', '\x1F5', '\x1F6', '\a', '\x31', '\x2', '\x2', 
		'\x1F6', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F8', '\a', 
		'&', '\x2', '\x2', '\x1F8', '\x1F9', '\a', '\x30', '\x2', '\x2', '\x1F9', 
		'\x1FA', '\x5', '&', '\x14', '\x2', '\x1FA', '\x1FB', '\a', '\x31', '\x2', 
		'\x2', '\x1FB', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\x1FD', 
		'\a', '\'', '\x2', '\x2', '\x1FD', '\x1FE', '\a', '\x30', '\x2', '\x2', 
		'\x1FE', '\x1FF', '\x5', '&', '\x14', '\x2', '\x1FF', '\x200', '\a', '\x31', 
		'\x2', '\x2', '\x200', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x201', '\x202', 
		'\a', '*', '\x2', '\x2', '\x202', '\x203', '\a', '\x30', '\x2', '\x2', 
		'\x203', '\x204', '\x5', '&', '\x14', '\x2', '\x204', '\x205', '\a', 'I', 
		'\x2', '\x2', '\x205', '\x206', '\x5', '&', '\x14', '\x2', '\x206', '\x207', 
		'\a', '\x31', '\x2', '\x2', '\x207', '\x21C', '\x3', '\x2', '\x2', '\x2', 
		'\x208', '\x209', '\a', ')', '\x2', '\x2', '\x209', '\x20A', '\a', '\x30', 
		'\x2', '\x2', '\x20A', '\x20B', '\x5', '&', '\x14', '\x2', '\x20B', '\x20C', 
		'\a', 'I', '\x2', '\x2', '\x20C', '\x20D', '\x5', '&', '\x14', '\x2', 
		'\x20D', '\x20E', '\a', '\x31', '\x2', '\x2', '\x20E', '\x21C', '\x3', 
		'\x2', '\x2', '\x2', '\x20F', '\x210', '\a', '(', '\x2', '\x2', '\x210', 
		'\x211', '\a', '\x30', '\x2', '\x2', '\x211', '\x212', '\x5', '&', '\x14', 
		'\x2', '\x212', '\x213', '\a', 'I', '\x2', '\x2', '\x213', '\x214', '\x5', 
		'&', '\x14', '\x2', '\x214', '\x215', '\a', '\x31', '\x2', '\x2', '\x215', 
		'\x21C', '\x3', '\x2', '\x2', '\x2', '\x216', '\x217', '\a', '+', '\x2', 
		'\x2', '\x217', '\x218', '\a', '\x30', '\x2', '\x2', '\x218', '\x219', 
		'\x5', '&', '\x14', '\x2', '\x219', '\x21A', '\a', '\x31', '\x2', '\x2', 
		'\x21A', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x21B', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x21B', 
		'\x131', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x135', '\x3', '\x2', '\x2', 
		'\x2', '\x21B', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x145', 
		'\x3', '\x2', '\x2', '\x2', '\x21B', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'\x21B', '\x153', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x159', '\x3', 
		'\x2', '\x2', '\x2', '\x21B', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x21B', 
		'\x167', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x16D', '\x3', '\x2', '\x2', 
		'\x2', '\x21B', '\x171', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x179', 
		'\x3', '\x2', '\x2', '\x2', '\x21B', '\x17D', '\x3', '\x2', '\x2', '\x2', 
		'\x21B', '\x186', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x191', '\x3', 
		'\x2', '\x2', '\x2', '\x21B', '\x196', '\x3', '\x2', '\x2', '\x2', '\x21B', 
		'\x19B', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x1AA', '\x3', '\x2', '\x2', 
		'\x2', '\x21B', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x1C2', 
		'\x3', '\x2', '\x2', '\x2', '\x21B', '\x1CB', '\x3', '\x2', '\x2', '\x2', 
		'\x21B', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x1D9', '\x3', 
		'\x2', '\x2', '\x2', '\x21B', '\x1DC', '\x3', '\x2', '\x2', '\x2', '\x21B', 
		'\x1DF', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x1E8', '\x3', '\x2', '\x2', 
		'\x2', '\x21B', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x1F2', 
		'\x3', '\x2', '\x2', '\x2', '\x21B', '\x1F7', '\x3', '\x2', '\x2', '\x2', 
		'\x21B', '\x1FC', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x201', '\x3', 
		'\x2', '\x2', '\x2', '\x21B', '\x208', '\x3', '\x2', '\x2', '\x2', '\x21B', 
		'\x20F', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x216', '\x3', '\x2', '\x2', 
		'\x2', '\x21C', '%', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x21E', '\b', 
		'\x14', '\x1', '\x2', '\x21E', '\x21F', '\a', '\x30', '\x2', '\x2', '\x21F', 
		'\x220', '\x5', '&', '\x14', '\x2', '\x220', '\x221', '\a', '\x31', '\x2', 
		'\x2', '\x221', '\x225', '\x3', '\x2', '\x2', '\x2', '\x222', '\x225', 
		'\x5', '$', '\x13', '\x2', '\x223', '\x225', '\x5', '(', '\x15', '\x2', 
		'\x224', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x224', '\x222', '\x3', 
		'\x2', '\x2', '\x2', '\x224', '\x223', '\x3', '\x2', '\x2', '\x2', '\x225', 
		'\x237', '\x3', '\x2', '\x2', '\x2', '\x226', '\x227', '\f', '\n', '\x2', 
		'\x2', '\x227', '\x228', '\a', '\x32', '\x2', '\x2', '\x228', '\x236', 
		'\x5', '&', '\x14', '\v', '\x229', '\x22A', '\f', '\t', '\x2', '\x2', 
		'\x22A', '\x22B', '\a', '\x33', '\x2', '\x2', '\x22B', '\x236', '\x5', 
		'&', '\x14', '\n', '\x22C', '\x22D', '\f', '\b', '\x2', '\x2', '\x22D', 
		'\x22E', '\a', '\x34', '\x2', '\x2', '\x22E', '\x236', '\x5', '&', '\x14', 
		'\t', '\x22F', '\x230', '\f', '\a', '\x2', '\x2', '\x230', '\x231', '\a', 
		'\x35', '\x2', '\x2', '\x231', '\x236', '\x5', '&', '\x14', '\b', '\x232', 
		'\x233', '\f', '\x6', '\x2', '\x2', '\x233', '\x234', '\a', '\x36', '\x2', 
		'\x2', '\x234', '\x236', '\x5', '&', '\x14', '\a', '\x235', '\x226', '\x3', 
		'\x2', '\x2', '\x2', '\x235', '\x229', '\x3', '\x2', '\x2', '\x2', '\x235', 
		'\x22C', '\x3', '\x2', '\x2', '\x2', '\x235', '\x22F', '\x3', '\x2', '\x2', 
		'\x2', '\x235', '\x232', '\x3', '\x2', '\x2', '\x2', '\x236', '\x239', 
		'\x3', '\x2', '\x2', '\x2', '\x237', '\x235', '\x3', '\x2', '\x2', '\x2', 
		'\x237', '\x238', '\x3', '\x2', '\x2', '\x2', '\x238', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x239', '\x237', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x247', 
		'\t', '\x4', '\x2', '\x2', '\x23B', '\x247', '\x5', '\x36', '\x1C', '\x2', 
		'\x23C', '\x247', '\x5', '\x34', '\x1B', '\x2', '\x23D', '\x247', '\x5', 
		'\x32', '\x1A', '\x2', '\x23E', '\x247', '\a', 'N', '\x2', '\x2', '\x23F', 
		'\x247', '\a', 'O', '\x2', '\x2', '\x240', '\x247', '\x5', '\x30', '\x19', 
		'\x2', '\x241', '\x247', '\a', 'Q', '\x2', '\x2', '\x242', '\x247', '\x5', 
		'*', '\x16', '\x2', '\x243', '\x247', '\x5', '.', '\x18', '\x2', '\x244', 
		'\x247', '\x5', ',', '\x17', '\x2', '\x245', '\x247', '\a', '\x11', '\x2', 
		'\x2', '\x246', '\x23A', '\x3', '\x2', '\x2', '\x2', '\x246', '\x23B', 
		'\x3', '\x2', '\x2', '\x2', '\x246', '\x23C', '\x3', '\x2', '\x2', '\x2', 
		'\x246', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x246', '\x23E', '\x3', 
		'\x2', '\x2', '\x2', '\x246', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x246', 
		'\x240', '\x3', '\x2', '\x2', '\x2', '\x246', '\x241', '\x3', '\x2', '\x2', 
		'\x2', '\x246', '\x242', '\x3', '\x2', '\x2', '\x2', '\x246', '\x243', 
		'\x3', '\x2', '\x2', '\x2', '\x246', '\x244', '\x3', '\x2', '\x2', '\x2', 
		'\x246', '\x245', '\x3', '\x2', '\x2', '\x2', '\x247', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x248', '\x249', '\a', 'Q', '\x2', '\x2', '\x249', '\x24A', 
		'\a', 'J', '\x2', '\x2', '\x24A', '\x24B', '\a', 'O', '\x2', '\x2', '\x24B', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x24D', '\a', 'Q', '\x2', '\x2', 
		'\x24D', '\x250', '\a', ',', '\x2', '\x2', '\x24E', '\x251', '\a', 'O', 
		'\x2', '\x2', '\x24F', '\x251', '\x5', '\x34', '\x1B', '\x2', '\x250', 
		'\x24E', '\x3', '\x2', '\x2', '\x2', '\x250', '\x24F', '\x3', '\x2', '\x2', 
		'\x2', '\x251', '\x252', '\x3', '\x2', '\x2', '\x2', '\x252', '\x253', 
		'\a', '-', '\x2', '\x2', '\x253', '\x254', '\a', 'J', '\x2', '\x2', '\x254', 
		'\x255', '\a', 'O', '\x2', '\x2', '\x255', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x256', '\x257', '\a', 'Q', '\x2', '\x2', '\x257', '\x258', '\a', 'J', 
		'\x2', '\x2', '\x258', '\x259', '\a', 'O', '\x2', '\x2', '\x259', '\x25C', 
		'\a', ',', '\x2', '\x2', '\x25A', '\x25D', '\a', 'O', '\x2', '\x2', '\x25B', 
		'\x25D', '\x5', '\x34', '\x1B', '\x2', '\x25C', '\x25A', '\x3', '\x2', 
		'\x2', '\x2', '\x25C', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x25D', '\x25E', 
		'\x3', '\x2', '\x2', '\x2', '\x25E', '\x25F', '\a', '-', '\x2', '\x2', 
		'\x25F', '\x260', '\a', 'J', '\x2', '\x2', '\x260', '\x261', '\a', 'O', 
		'\x2', '\x2', '\x261', '/', '\x3', '\x2', '\x2', '\x2', '\x262', '\x263', 
		'\a', 'O', '\x2', '\x2', '\x263', '\x266', '\a', ',', '\x2', '\x2', '\x264', 
		'\x267', '\a', 'O', '\x2', '\x2', '\x265', '\x267', '\x5', '\x34', '\x1B', 
		'\x2', '\x266', '\x264', '\x3', '\x2', '\x2', '\x2', '\x266', '\x265', 
		'\x3', '\x2', '\x2', '\x2', '\x267', '\x268', '\x3', '\x2', '\x2', '\x2', 
		'\x268', '\x26B', '\a', '-', '\x2', '\x2', '\x269', '\x26A', '\a', 'J', 
		'\x2', '\x2', '\x26A', '\x26C', '\a', 'O', '\x2', '\x2', '\x26B', '\x269', 
		'\x3', '\x2', '\x2', '\x2', '\x26B', '\x26C', '\x3', '\x2', '\x2', '\x2', 
		'\x26C', '\x31', '\x3', '\x2', '\x2', '\x2', '\x26D', '\x26E', '\a', 'P', 
		'\x2', '\x2', '\x26E', '\x33', '\x3', '\x2', '\x2', '\x2', '\x26F', '\x270', 
		'\a', 'L', '\x2', '\x2', '\x270', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x271', '\x272', '\a', 'M', '\x2', '\x2', '\x272', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x273', '\x274', '\t', '\x5', '\x2', '\x2', '\x274', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '+', '=', '\x41', 'J', '\x64', 't', '\x88', 
		'\x97', '\xA0', '\xA4', '\xB2', '\xB7', '\xBD', '\xCE', '\xD6', '\xD8', 
		'\xE1', '\xE4', '\xEF', '\xF4', '\xFC', '\x101', '\x10B', '\x119', '\x128', 
		'\x13C', '\x150', '\x164', '\x176', '\x182', '\x18D', '\x1A2', '\x1BA', 
		'\x21B', '\x224', '\x235', '\x237', '\x246', '\x250', '\x25C', '\x266', 
		'\x26B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
